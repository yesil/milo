{
  "version": 3,
  "sources": ["../node_modules/@spectrum-web-components/textfield/src/Textfield.ts", "../node_modules/@spectrum-web-components/textfield/src/textfield.css.ts", "../node_modules/@spectrum-web-components/textfield/sp-textfield.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    nothing,\n    PropertyValues,\n    SizedMixin,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    ifDefined,\n    live,\n} from '@spectrum-web-components/base/src/directives.js';\nimport {\n    property,\n    query,\n    state,\n} from '@spectrum-web-components/base/src/decorators.js';\n\nimport { ManageHelpText } from '@spectrum-web-components/help-text/src/manage-help-text.js';\nimport { Focusable } from '@spectrum-web-components/shared/src/focusable.js';\nimport '@spectrum-web-components/icons-ui/icons/sp-icon-checkmark100.js';\nimport '@spectrum-web-components/icons-workflow/icons/sp-icon-alert.js';\n\nimport textfieldStyles from './textfield.css.js';\nimport checkmarkStyles from '@spectrum-web-components/icon/src/spectrum-icon-checkmark.css.js';\n\nconst textfieldTypes = ['text', 'url', 'tel', 'email', 'password'] as const;\nexport type TextfieldType = (typeof textfieldTypes)[number];\n\n/**\n * @fires input - The value of the element has changed.\n * @fires change - An alteration to the value of the element has been committed by the user.\n */\nexport class TextfieldBase extends ManageHelpText(\n    SizedMixin(Focusable, {\n        noDefaultSize: true,\n    })\n) {\n    public static override get styles(): CSSResultArray {\n        return [textfieldStyles, checkmarkStyles];\n    }\n\n    @state()\n    protected appliedLabel?: string;\n\n    /**\n     * A regular expression outlining the keys that will be allowed to update the value of the form control.\n     */\n    @property({ attribute: 'allowed-keys' })\n    allowedKeys = '';\n\n    /**\n     * @private\n     */\n    @property({ type: Boolean, reflect: true })\n    public focused = false;\n\n    @query('.input:not(#sizer)')\n    protected inputElement!: HTMLInputElement | HTMLTextAreaElement;\n\n    /**\n     * Whether the `value` held by the form control is invalid.\n     */\n    @property({ type: Boolean, reflect: true })\n    public invalid = false;\n\n    /**\n     * A string applied via `aria-label` to the form control when a user visible label is not provided.\n     */\n    @property()\n    public label = '';\n\n    /**\n     * Name of the form control.\n     */\n    @property({ type: String, reflect: true })\n    public name: string | undefined;\n\n    /**\n     * Text that appears in the form control when it has no value set\n     */\n    @property()\n    public placeholder = '';\n\n    @state()\n    set type(val: TextfieldType) {\n        const prev = this._type;\n        this._type = val;\n        this.requestUpdate('type', prev);\n    }\n\n    get type(): TextfieldType {\n        return textfieldTypes.find((t) => t === this._type) ?? 'text';\n    }\n\n    /**\n     * @private\n     * This binding allows for invalid value for `type` to still be reflected to the DOM\n     */\n    @property({ attribute: 'type', reflect: true })\n    private _type: TextfieldType = 'text';\n\n    /**\n     * Pattern the `value` must match to be valid\n     */\n    @property()\n    public pattern?: string;\n\n    /**\n     * Whether a form control delivered with the `multiline` attribute will change size\n     * vertically to accomodate longer input\n     */\n    @property({ type: Boolean, reflect: true })\n    public grows = false;\n\n    /**\n     * Defines the maximum string length that the user can enter\n     */\n    @property({ type: Number })\n    public maxlength = -1;\n\n    /**\n     * Defines the minimum string length that the user can enter\n     */\n    @property({ type: Number })\n    public minlength = -1;\n\n    /**\n     * Whether the form control should accept a value longer than one line\n     */\n    @property({ type: Boolean, reflect: true })\n    public multiline = false;\n\n    /**\n     * Whether a user can interact with the value of the form control\n     */\n    @property({ type: Boolean, reflect: true })\n    public readonly = false;\n\n    /**\n     * The specific number of rows the form control should provide in the user interface\n     */\n    @property({ type: Number })\n    public rows = -1;\n\n    /**\n     * Whether the `value` held by the form control is valid.\n     */\n    @property({ type: Boolean, reflect: true })\n    public valid = false;\n\n    /**\n     * The value held by the form control\n     */\n    @property({ type: String })\n    public set value(value: string | number) {\n        if (value === this.value) {\n            return;\n        }\n        const oldValue = this._value;\n        this._value = value;\n        this.requestUpdate('value', oldValue);\n    }\n\n    public get value(): string | number {\n        return this._value;\n    }\n\n    protected _value: string | number = '';\n\n    /**\n     * Whether to display the form control with no visible background\n     */\n    @property({ type: Boolean, reflect: true })\n    public quiet = false;\n\n    /**\n     * Whether the form control will be found to be invalid when it holds no `value`\n     */\n    @property({ type: Boolean, reflect: true })\n    public required = false;\n\n    /**\n     * What form of assistance should be provided when attempting to supply a value to the form control\n     */\n    @property({ type: String, reflect: true })\n    public autocomplete?:\n        | 'list'\n        | 'none'\n        | HTMLInputElement['autocomplete']\n        | HTMLTextAreaElement['autocomplete'];\n\n    public override get focusElement(): HTMLInputElement | HTMLTextAreaElement {\n        return this.inputElement;\n    }\n\n    /**\n     * Sets the start and end positions of the current selection.\n     *\n     * @param selectionStart The 0-based index of the first selected character. An index greater than the length of the\n     *  element's value is treated as pointing to the end of the value.\n     * @param selectionEnd The 0-based index of the character after the last selected character. An index greater than\n     *  the length of the element's value is treated as pointing to the end of the value.\n     * @param [selectionDirection=\"none\"] A string indicating the direction in which the selection is considered to\n     *  have been performed.\n     */\n    public setSelectionRange(\n        selectionStart: number,\n        selectionEnd: number,\n        selectionDirection: 'forward' | 'backward' | 'none' = 'none'\n    ): void {\n        this.inputElement.setSelectionRange(\n            selectionStart,\n            selectionEnd,\n            selectionDirection\n        );\n    }\n\n    /**\n     * Selects all the text.\n     */\n    public select(): void {\n        this.inputElement.select();\n    }\n\n    protected handleInput(_event: Event): void {\n        if (this.allowedKeys && this.inputElement.value) {\n            const regExp = new RegExp(`^[${this.allowedKeys}]*$`, 'u');\n            if (!regExp.test(this.inputElement.value)) {\n                const selectionStart = this.inputElement\n                    .selectionStart as number;\n                const nextSelectStart = selectionStart - 1;\n                this.inputElement.value = this.value.toString();\n                this.inputElement.setSelectionRange(\n                    nextSelectStart,\n                    nextSelectStart\n                );\n                return;\n            }\n        }\n        this.value = this.inputElement.value;\n    }\n\n    protected handleChange(): void {\n        this.dispatchEvent(\n            new Event('change', {\n                bubbles: true,\n                composed: true,\n            })\n        );\n    }\n\n    protected onFocus(): void {\n        this.focused = !this.readonly && true;\n    }\n\n    protected onBlur(_event: FocusEvent): void {\n        this.focused = !this.readonly && false;\n    }\n\n    protected handleInputElementPointerdown(): void {}\n\n    protected renderStateIcons(): TemplateResult | typeof nothing {\n        if (this.invalid) {\n            return html`\n                <sp-icon-alert id=\"invalid\" class=\"icon\"></sp-icon-alert>\n            `;\n        } else if (this.valid) {\n            return html`\n                <sp-icon-checkmark100\n                    id=\"valid\"\n                    class=\"icon spectrum-UIIcon-Checkmark100\"\n                ></sp-icon-checkmark100>\n            `;\n        }\n        return nothing;\n    }\n\n    protected get displayValue(): string {\n        return this.value.toString();\n    }\n\n    // prettier-ignore\n    private get renderMultiline(): TemplateResult {\n        return html`\n            ${this.multiline && this.grows && this.rows === -1\n                ? html`\n                      <div id=\"sizer\" class=\"input\" aria-hidden=\"true\">${this.value}&#8203;\n                      </div>\n                  `\n                : nothing}\n            <!-- @ts-ignore -->\n            <textarea\n                name=${ifDefined(this.name || undefined)}\n                aria-describedby=${this.helpTextId}\n                aria-label=${this.label ||\n                this.appliedLabel ||\n                this.placeholder}\n                aria-invalid=${ifDefined(this.invalid || undefined)}\n                class=\"input\"\n                maxlength=${ifDefined(\n                    this.maxlength > -1 ? this.maxlength : undefined\n                )}\n                minlength=${ifDefined(\n                    this.minlength > -1 ? this.minlength : undefined\n                )}\n                title=${this.invalid ? '' : nothing}\n                pattern=${ifDefined(this.pattern)}\n                placeholder=${this.placeholder}\n                .value=${this.displayValue}\n                @change=${this.handleChange}\n                @input=${this.handleInput}\n                @focus=${this.onFocus}\n                @blur=${this.onBlur}\n                ?disabled=${this.disabled}\n                ?required=${this.required}\n                ?readonly=${this.readonly}\n                rows=${ifDefined(this.rows > -1 ? this.rows : undefined)}\n                autocomplete=${ifDefined(this.autocomplete)}\n            ></textarea>\n        `;\n    }\n\n    private get renderInput(): TemplateResult {\n        return html`\n            <!-- @ts-ignore -->\n            <input\n                name=${ifDefined(this.name || undefined)}\n                type=${this.type}\n                aria-describedby=${this.helpTextId}\n                aria-label=${this.label ||\n                this.appliedLabel ||\n                this.placeholder}\n                aria-invalid=${ifDefined(this.invalid || undefined)}\n                class=\"input\"\n                title=${this.invalid ? '' : nothing}\n                maxlength=${ifDefined(\n                    this.maxlength > -1 ? this.maxlength : undefined\n                )}\n                minlength=${ifDefined(\n                    this.minlength > -1 ? this.minlength : undefined\n                )}\n                pattern=${ifDefined(this.pattern)}\n                placeholder=${this.placeholder}\n                .value=${live(this.displayValue)}\n                @change=${this.handleChange}\n                @input=${this.handleInput}\n                @pointerdown=${this.handleInputElementPointerdown}\n                @focus=${this.onFocus}\n                @blur=${this.onBlur}\n                ?disabled=${this.disabled}\n                ?required=${this.required}\n                ?readonly=${this.readonly}\n                autocomplete=${ifDefined(this.autocomplete)}\n            />\n        `;\n    }\n\n    protected renderField(): TemplateResult {\n        return html`\n            ${this.renderStateIcons()}\n            ${this.multiline ? this.renderMultiline : this.renderInput}\n        `;\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <div id=\"textfield\">${this.renderField()}</div>\n            ${this.renderHelpText(this.invalid)}\n        `;\n    }\n\n    protected override update(changedProperties: PropertyValues): void {\n        if (\n            changedProperties.has('value') ||\n            (changedProperties.has('required') && this.required)\n        ) {\n            this.updateComplete.then(() => {\n                this.checkValidity();\n            });\n        }\n        super.update(changedProperties);\n    }\n\n    public checkValidity(): boolean {\n        let validity = this.inputElement.checkValidity();\n        if (this.required || (this.value && this.pattern)) {\n            if ((this.disabled || this.multiline) && this.pattern) {\n                const regex = new RegExp(`^${this.pattern}$`, 'u');\n                validity = regex.test(this.value.toString());\n            }\n            if (typeof this.minlength !== 'undefined') {\n                validity =\n                    validity && this.value.toString().length >= this.minlength;\n            }\n            this.valid = validity;\n            this.invalid = !validity;\n        }\n        return validity;\n    }\n}\n\n/**\n * @element sp-textfield\n * @slot help-text - default or non-negative help text to associate to your form element\n * @slot negative-help-text - negative help text to associate to your form element when `invalid`\n */\nexport class Textfield extends TextfieldBase {\n    @property({ type: String })\n    public override set value(value: string) {\n        if (value === this.value) {\n            return;\n        }\n        const oldValue = this._value;\n        this._value = value;\n        this.requestUpdate('value', oldValue);\n    }\n\n    public override get value(): string {\n        return this._value;\n    }\n\n    protected override _value = '';\n}\n", "/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { css } from '@spectrum-web-components/base';\nconst styles = css`\n    :host{--spectrum-textfield-input-line-height:var(--spectrum-textfield-height);--spectrum-texfield-animation-duration:var(--spectrum-animation-duration-100);--spectrum-textfield-width:240px;--spectrum-textfield-min-width:var(--spectrum-text-field-minimum-width-multiplier);--spectrum-textfield-corner-radius:var(--spectrum-corner-radius-100);--spectrum-textfield-height:var(--spectrum-component-height-100);--spectrum-textfield-spacing-inline:var(--spectrum-component-edge-to-text-100);--spectrum-textfield-spacing-inline-quiet:var(--spectrum-field-edge-to-text-quiet);--spectrum-textfield-spacing-block-start:var(--spectrum-component-top-to-text-100);--spectrum-textfield-spacing-block-end:var(--spectrum-component-bottom-to-text-100);--spectrum-textfield-spacing-block-quiet:var(--spectrum-field-edge-to-border-quiet);--spectrum-textfield-label-spacing-block:var(--spectrum-field-label-to-component);--spectrum-textfield-label-spacing-block-quiet:var(--spectrum-field-label-to-component-quiet-medium);--spectrum-textfield-label-spacing-inline-side-label:var(--spectrum-spacing-100);--spectrum-textfield-helptext-spacing-block:var(--spectrum-help-text-to-component);--spectrum-textfield-icon-size-invalid:var(--spectrum-workflow-icon-size-100);--spectrum-textfield-icon-size-valid:var(--spectrum-checkmark-icon-size-100);--spectrum-textfield-icon-spacing-inline-start-invalid:var(--spectrum-field-text-to-alert-icon-medium);--spectrum-textfield-icon-spacing-inline-end-invalid:var(--spectrum-field-edge-to-alert-icon-medium);--spectrum-textfield-icon-spacing-inline-end-quiet-invalid:var(--spectrum-field-edge-to-alert-icon-quiet);--spectrum-textfield-icon-spacing-block-invalid:var(--spectrum-field-top-to-alert-icon-medium);--spectrum-textfield-icon-spacing-inline-start-valid:var(--spectrum-field-text-to-validation-icon-medium);--spectrum-textfield-icon-spacing-inline-end-valid:var(--spectrum-field-edge-to-validation-icon-medium);--spectrum-textfield-icon-spacing-inline-end-quiet-valid:var(--spectrum-field-edge-to-validation-icon-quiet);--spectrum-textfield-icon-spacing-block-valid:var(--spectrum-field-top-to-validation-icon-medium);--spectrum-textfield-font-family:var(--spectrum-sans-font-family-stack);--spectrum-textfield-font-weight:var(--spectrum-regular-font-weight);--spectrum-textfield-placeholder-font-size:var(--spectrum-font-size-100);--spectrum-textfield-character-count-font-family:var(--spectrum-sans-font-family-stack);--spectrum-textfield-character-count-font-weight:var(--spectrum-regular-font-weight);--spectrum-textfield-character-count-font-size:var(--spectrum-font-size-75);--spectrum-textfield-character-count-spacing-inline:var(--spectrum-spacing-200);--spectrum-textfield-character-count-spacing-block:var(--spectrum-component-bottom-to-text-75);--spectrum-textfield-character-count-spacing-inline-side:var(--spectrum-side-label-character-count-to-field);--spectrum-textfield-character-count-spacing-block-side:var(--spectrum-side-label-character-count-top-margin-medium);--spectrum-textfield-focus-indicator-width:var(--spectrum-focus-indicator-thickness);--spectrum-textfield-focus-indicator-gap:var(--spectrum-focus-indicator-gap);--spectrum-textfield-background-color:var(--spectrum-gray-50);--spectrum-textfield-text-color-default:var(--spectrum-neutral-content-color-default);--spectrum-textfield-text-color-hover:var(--spectrum-neutral-content-color-hover);--spectrum-textfield-text-color-focus:var(--spectrum-neutral-content-color-focus);--spectrum-textfield-text-color-focus-hover:var(--spectrum-neutral-content-color-focus-hover);--spectrum-textfield-text-color-keyboard-focus:var(--spectrum-neutral-content-color-key-focus);--spectrum-textfield-text-color-readonly:var(--spectrum-neutral-content-color-default);--spectrum-textfield-background-color-disabled:var(--spectrum-disabled-background-color);--spectrum-textfield-border-color-disabled:var(--spectrum-disabled-border-color);--spectrum-textfield-text-color-disabled:var(--spectrum-disabled-content-color);--spectrum-textfield-border-color-invalid-default:var(--spectrum-negative-border-color-default);--spectrum-textfield-border-color-invalid-hover:var(--spectrum-negative-border-color-hover);--spectrum-textfield-border-color-invalid-focus:var(--spectrum-negative-border-color-focus);--spectrum-textfield-border-color-invalid-focus-hover:var(--spectrum-negative-border-color-focus-hover);--spectrum-textfield-border-color-invalid-keyboard-focus:var(--spectrum-negative-border-color-key-focus);--spectrum-textfield-icon-color-invalid:var(--spectrum-negative-visual-color);--spectrum-textfield-text-color-invalid:var(--spectrum-neutral-content-color-default);--spectrum-textfield-text-color-valid:var(--spectrum-neutral-content-color-default);--spectrum-textfield-icon-color-valid:var(--spectrum-positive-visual-color);--spectrum-textfield-focus-indicator-color:var(--spectrum-focus-indicator-color);--spectrum-text-area-min-inline-size:var(--spectrum-text-area-minimum-width);--spectrum-text-area-min-block-size:var(--spectrum-text-area-minimum-height);--spectrum-text-area-min-block-size-quiet:var(--spectrum-component-height-100)}:host([size=s]){--spectrum-textfield-height:var(--spectrum-component-height-75);--spectrum-textfield-label-spacing-block-quiet:var(--spectrum-field-label-to-component-quiet-small);--spectrum-textfield-label-spacing-inline-side-label:var(--spectrum-spacing-100);--spectrum-textfield-placeholder-font-size:var(--spectrum-font-size-75);--spectrum-textfield-spacing-inline:var(--spectrum-component-edge-to-text-75);--spectrum-textfield-icon-size-invalid:var(--spectrum-workflow-icon-size-75);--spectrum-textfield-icon-size-valid:var(--spectrum-checkmark-icon-size-75);--spectrum-textfield-icon-spacing-inline-end-invalid:var(--spectrum-field-edge-to-alert-icon-small);--spectrum-textfield-icon-spacing-inline-end-valid:var(--spectrum-field-edge-to-validation-icon-small);--spectrum-textfield-icon-spacing-block-invalid:var(--spectrum-field-top-to-alert-icon-small);--spectrum-textfield-icon-spacing-block-valid:var(--spectrum-field-top-to-validation-icon-small);--spectrum-textfield-icon-spacing-inline-start-invalid:var(--spectrum-field-text-to-alert-icon-small);--spectrum-textfield-icon-spacing-inline-start-valid:var(--spectrum-field-text-to-validation-icon-small);--spectrum-textfield-character-count-font-size:var(--spectrum-font-size-75);--spectrum-textfield-character-count-spacing-block:var(--spectrum-component-bottom-to-text-75);--spectrum-textfield-character-count-spacing-block-quiet:var(--spectrum-character-count-to-field-quiet-small);--spectrum-textfield-character-count-spacing-block-side:var(--spectrum-side-label-character-count-top-margin-small);--spectrum-text-area-min-block-size-quiet:var(--spectrum-component-height-75)}:host{--spectrum-textfield-height:var(--spectrum-component-height-100);--spectrum-textfield-label-spacing-block-quiet:var(--spectrum-field-label-to-component-quiet-medium);--spectrum-textfield-label-spacing-inline-side-label:var(--spectrum-spacing-200);--spectrum-textfield-placeholder-font-size:var(--spectrum-font-size-100);--spectrum-textfield-spacing-inline:var(--spectrum-component-edge-to-text-100);--spectrum-textfield-icon-size-invalid:var(--spectrum-workflow-icon-size-100);--spectrum-textfield-icon-size-valid:var(--spectrum-checkmark-icon-size-100);--spectrum-textfield-icon-spacing-inline-end-invalid:var(--spectrum-field-edge-to-alert-icon-medium);--spectrum-textfield-icon-spacing-inline-end-valid:var(--spectrum-field-edge-to-validation-icon-medium);--spectrum-textfield-icon-spacing-block-invalid:var(--spectrum-field-top-to-alert-icon-medium);--spectrum-textfield-icon-spacing-block-valid:var(--spectrum-field-top-to-validation-icon-medium);--spectrum-textfield-icon-spacing-inline-start-invalid:var(--spectrum-field-text-to-alert-icon-medium);--spectrum-textfield-icon-spacing-inline-start-valid:var(--spectrum-field-text-to-validation-icon-medium);--spectrum-textfield-character-count-font-size:var(--spectrum-font-size-75);--spectrum-textfield-character-count-spacing-block:var(--spectrum-component-bottom-to-text-75);--spectrum-textfield-character-count-spacing-block-quiet:var(--spectrum-character-count-to-field-quiet-medium);--spectrum-textfield-character-count-spacing-block-side:var(--spectrum-side-label-character-count-top-margin-medium);--spectrum-text-area-min-block-size-quiet:var(--spectrum-component-height-100)}:host([size=l]){--spectrum-textfield-height:var(--spectrum-component-height-200);--spectrum-textfield-label-spacing-block-quiet:var(--spectrum-field-label-to-component-quiet-large);--spectrum-textfield-label-spacing-inline-side-label:var(--spectrum-spacing-200);--spectrum-textfield-placeholder-font-size:var(--spectrum-font-size-200);--spectrum-textfield-spacing-inline:var(--spectrum-component-edge-to-text-200);--spectrum-textfield-icon-size-invalid:var(--spectrum-workflow-icon-size-200);--spectrum-textfield-icon-size-valid:var(--spectrum-checkmark-icon-size-200);--spectrum-textfield-icon-spacing-inline-end-invalid:var(--spectrum-field-edge-to-alert-icon-large);--spectrum-textfield-icon-spacing-inline-end-valid:var(--spectrum-field-edge-to-validation-icon-large);--spectrum-textfield-icon-spacing-block-invalid:var(--spectrum-field-top-to-alert-icon-large);--spectrum-textfield-icon-spacing-block-valid:var(--spectrum-field-top-to-validation-icon-large);--spectrum-textfield-icon-spacing-inline-start-invalid:var(--spectrum-field-text-to-alert-icon-large);--spectrum-textfield-icon-spacing-inline-start-valid:var(--spectrum-field-text-to-validation-icon-large);--spectrum-textfield-character-count-font-size:var(--spectrum-font-size-100);--spectrum-textfield-character-count-spacing-block:var(--spectrum-component-bottom-to-text-100);--spectrum-textfield-character-count-spacing-block-quiet:var(--spectrum-character-count-to-field-quiet-large);--spectrum-textfield-character-count-spacing-block-side:var(--spectrum-side-label-character-count-top-margin-large);--spectrum-text-area-min-block-size-quiet:var(--spectrum-component-height-200)}:host([size=xl]){--spectrum-textfield-height:var(--spectrum-component-height-300);--spectrum-textfield-label-spacing-block-quiet:var(--spectrum-field-label-to-component-quiet-extra-large);--spectrum-textfield-label-spacing-inline-side-label:var(--spectrum-spacing-200);--spectrum-textfield-placeholder-font-size:var(--spectrum-font-size-300);--spectrum-textfield-spacing-inline:var(--spectrum-component-edge-to-text-200);--spectrum-textfield-icon-size-invalid:var(--spectrum-workflow-icon-size-300);--spectrum-textfield-icon-size-valid:var(--spectrum-checkmark-icon-size-300);--spectrum-textfield-icon-spacing-inline-end-invalid:var(--spectrum-field-edge-to-alert-icon-extra-large);--spectrum-textfield-icon-spacing-inline-end-valid:var(--spectrum-field-edge-to-validation-icon-extra-large);--spectrum-textfield-icon-spacing-block-invalid:var(--spectrum-field-top-to-alert-icon-extra-large);--spectrum-textfield-icon-spacing-block-valid:var(--spectrum-field-top-to-validation-icon-extra-large);--spectrum-textfield-icon-spacing-inline-start-invalid:var(--spectrum-field-text-to-alert-icon-extra-large);--spectrum-textfield-icon-spacing-inline-start-valid:var(--spectrum-field-text-to-validation-icon-extra-large);--spectrum-textfield-character-count-font-size:var(--spectrum-font-size-200);--spectrum-textfield-character-count-spacing-block:var(--spectrum-component-bottom-to-text-200);--spectrum-textfield-character-count-spacing-block-quiet:var(--spectrum-character-count-to-field-quiet-extra-large);--spectrum-textfield-character-count-spacing-block-side:var(--spectrum-side-label-character-count-top-margin-extra-large);--spectrum-text-area-min-block-size-quiet:var(--spectrum-component-height-300)}#textfield{inline-size:var(--mod-textfield-width,var(--spectrum-textfield-width));text-indent:0;appearance:textfield;text-overflow:ellipsis;grid-template-rows:auto auto auto;grid-template-columns:auto auto;margin:0;display:inline-grid;position:relative;overflow:visible}:host([quiet]) #textfield:after{content:\"\";inline-size:100%;block-size:var(--mod-textfield-focus-indicator-width,var(--spectrum-textfield-focus-indicator-width));position:absolute;inset-block-end:calc(( var(--mod-textfield-focus-indicator-gap,var(--spectrum-textfield-focus-indicator-gap)) + var(--mod-textfield-focus-indicator-width,var(--spectrum-textfield-focus-indicator-width)))*-1);inset-inline-start:0}:host([quiet][focused]) #textfield:after{background-color:var(--highcontrast-textfield-focus-indicator-color,var(--mod-textfield-focus-indicator-color,var(--spectrum-textfield-focus-indicator-color)))}:host([quiet][invalid]) #textfield .input{padding-inline-end:calc(var(--mod-textfield-icon-spacing-inline-start-invalid,var(--spectrum-textfield-icon-spacing-inline-start-invalid)) + var(--mod-textfield-icon-size-invalid,var(--spectrum-textfield-icon-size-invalid)))}:host([quiet][valid]) #textfield .input{padding-inline-end:calc(var(--mod-textfield-icon-spacing-inline-start-valid,var(--spectrum-textfield-icon-spacing-inline-start-valid)) + var(--mod-textfield-icon-size-valid,var(--spectrum-textfield-icon-size-valid)))}:host([invalid]) #textfield .icon,:host([valid]) #textfield .icon{pointer-events:all;grid-area:2/2;margin-inline-start:auto;position:absolute;inset-block-start:0}#textfield.spectrum-Textfield--sideLabel .icon{grid-area:1/2/span 1/span 1}:host([valid]) #textfield .icon{color:var(--highcontrast-textfield-icon-color-valid,var(--mod-textfield-icon-color-valid,var(--spectrum-textfield-icon-color-valid)));inset-block-start:var(--mod-textfield-icon-spacing-block-valid,var(--spectrum-textfield-icon-spacing-block-valid));inset-block-end:var(--mod-textfield-icon-spacing-block-valid,var(--spectrum-textfield-icon-spacing-block-valid));inset-inline-end:var(--mod-textfield-icon-spacing-inline-end-valid,var(--spectrum-textfield-icon-spacing-inline-end-valid))}:host([invalid]) #textfield .icon{block-size:var(--mod-textfield-icon-size-invalid,var(--spectrum-textfield-icon-size-invalid));inline-size:var(--mod-textfield-icon-size-invalid,var(--spectrum-textfield-icon-size-invalid));color:var(--highcontrast-textfield-icon-color-invalid,var(--mod-textfield-icon-color-invalid,var(--spectrum-textfield-icon-color-invalid)));inset-block-start:var(--mod-textfield-icon-spacing-block-invalid,var(--spectrum-textfield-icon-spacing-block-invalid));inset-block-end:var(--mod-textfield-icon-spacing-block-invalid,var(--spectrum-textfield-icon-spacing-block-invalid));inset-inline-end:var(--mod-textfield-icon-spacing-inline-end-invalid,var(--spectrum-textfield-icon-spacing-inline-end-invalid))}:host([disabled]) #textfield .icon,:host([readonly]) #textfield .icon{color:#0000}:host([quiet]) .icon{padding-inline-end:0}:host([quiet][valid]) .icon{inset-inline-end:var(--mod-textfield-icon-spacing-inline-end-quiet-valid,var(--spectrum-textfield-icon-spacing-inline-end-quiet-valid))}:host([quiet][invalid]) .icon{inset-inline-end:var(--mod-textfield-icon-spacing-inline-end-quiet-invalid,var(--spectrum-textfield-icon-spacing-inline-end-quiet-invalid))}#textfield .spectrum-FieldLabel{grid-area:1/1/auto/span 1;margin-block-end:var(--mod-textfield-label-spacing-block,var(--spectrum-textfield-label-spacing-block))}:host([quiet]) .spectrum-FieldLabel{margin-block-end:var(--mod-textfield-label-spacing-block-quiet,var(--spectrum-textfield-label-spacing-block-quiet))}:host([disabled]) .spectrum-FieldLabel{color:var(--spectrum-textfield-text-color-disabled)}#textfield .spectrum-HelpText{grid-area:3/1/auto/span 2;margin-block-start:var(--mod-textfield-helptext-spacing-block,var(--spectrum-textfield-helptext-spacing-block))}.spectrum-Textfield-characterCount{inline-size:auto;font-size:var(--mod-textfield-character-count-font-size,var(--spectrum-textfield-character-count-font-size));font-family:var(--mod-textfield-character-count-font-family,var(--spectrum-textfield-character-count-font-family));font-weight:var(--mod-textfield-character-count-font-weight,var(--spectrum-textfield-character-count-font-weight));grid-area:1/2/auto/span 1;justify-content:flex-end;align-items:flex-end;margin-block-end:var(--mod-textfield-character-count-spacing-block,var(--spectrum-textfield-character-count-spacing-block));margin-inline-start:var(--mod-textfield-character-count-spacing-inline,var(--spectrum-textfield-character-count-spacing-inline));margin-inline-end:0;padding-inline-end:calc(var(--mod-textfield-corner-radius,var(--spectrum-textfield-corner-radius))/2);display:inline-flex}:host([quiet]) .spectrum-Textfield-characterCount{margin-block-end:var(--mod-textfield-character-count-spacing-block-quiet,var(--spectrum-textfield-character-count-spacing-block-quiet))}.input{line-height:var(--spectrum-textfield-input-line-height);box-sizing:border-box;inline-size:100%;min-inline-size:var(--mod-textfield-min-width,var(--spectrum-textfield-min-width));block-size:var(--mod-textfield-height,var(--spectrum-textfield-height));padding-block-start:calc(var(--mod-textfield-spacing-block-start,var(--spectrum-textfield-spacing-block-start)) - var(--mod-textfield-border-width,var(--spectrum-textfield-border-width)));padding-block-end:calc(var(--mod-textfield-spacing-block-end,var(--spectrum-textfield-spacing-block-end)) - var(--mod-textfield-border-width,var(--spectrum-textfield-border-width)));padding-inline:calc(var(--mod-textfield-spacing-inline,var(--spectrum-textfield-spacing-inline)) - var(--mod-textfield-border-width,var(--spectrum-textfield-border-width)));text-indent:0;vertical-align:top;background-color:var(--mod-textfield-background-color,var(--spectrum-textfield-background-color));border:var(--mod-textfield-border-width,var(--spectrum-textfield-border-width))solid var(--highcontrast-textfield-border-color,var(--mod-textfield-border-color,var(--spectrum-textfield-border-color)));border-radius:var(--mod-textfield-corner-radius,var(--spectrum-textfield-corner-radius));transition:border-color var(--mod-texfield-animation-duration,var(--spectrum-texfield-animation-duration))ease-in-out;font-size:var(--mod-textfield-placeholder-font-size,var(--spectrum-textfield-placeholder-font-size));font-family:var(--mod-textfield-font-family,var(--spectrum-textfield-font-family));font-weight:var(--mod-textfield-font-weight,var(--spectrum-textfield-font-weight));color:var(--highcontrast-textfield-text-color-default,var(--mod-textfield-text-color-default,var(--spectrum-textfield-text-color-default)));text-overflow:ellipsis;appearance:textfield;outline:none;grid-area:2/1/auto/span 2;margin:0}.input::-ms-clear{inline-size:0;block-size:0}.input::-webkit-inner-spin-button,.input::-webkit-outer-spin-button{appearance:none;margin:0}.input:-moz-ui-invalid{box-shadow:none}.input::placeholder{opacity:1;font-size:var(--mod-textfield-placeholder-font-size,var(--spectrum-textfield-placeholder-font-size));font-family:var(--mod-textfield-font-family,var(--spectrum-textfield-font-family));font-weight:var(--mod-textfield-font-weight,var(--spectrum-textfield-font-weight));color:var(--highcontrast-textfield-text-color-default,var(--mod-textfield-text-color-default,var(--spectrum-textfield-text-color-default)));transition:color var(--mod-texfield-animation-duration,var(--spectrum-texfield-animation-duration))ease-in-out}.input:lang(ja)::placeholder,.input:lang(ko)::placeholder,.input:lang(zh)::placeholder{font-style:normal}.input:lang(ja)::-moz-placeholder,.input:lang(ko)::-moz-placeholder,.input:lang(zh)::-moz-placeholder{font-style:normal}:host([focused]) .input,.input:focus{border-color:var(--highcontrast-textfield-border-color-focus,var(--mod-textfield-border-color-focus,var(--spectrum-textfield-border-color-focus)));color:var(--highcontrast-textfield-text-color-focus,var(--mod-textfield-text-color-focus,var(--spectrum-textfield-text-color-focus)))}:host([focused]) .input::placeholder,.input:focus::placeholder{color:var(--highcontrast-textfield-text-color-focus,var(--mod-textfield-text-color-focus,var(--spectrum-textfield-text-color-focus)))}:host([focused]) .input{border-color:var(--highcontrast-textfield-border-color-keyboard-focus,var(--mod-textfield-border-color-keyboard-focus,var(--spectrum-textfield-border-color-keyboard-focus)));color:var(--highcontrast-textfield-text-color-keyboard-focus,var(--mod-textfield-text-color-keyboard-focus,var(--spectrum-textfield-text-color-keyboard-focus)));outline:var(--mod-textfield-focus-indicator-width,var(--spectrum-textfield-focus-indicator-width))solid;outline-color:var(--highcontrast-textfield-focus-indicator-color,var(--mod-textfield-focus-indicator-color,var(--spectrum-textfield-focus-indicator-color)));outline-offset:var(--mod-textfield-focus-indicator-gap,var(--spectrum-textfield-focus-indicator-gap))}:host([focused]) .input::placeholder{color:var(--highcontrast-textfield-text-color-keyboard-focus,var(--mod-textfield-text-color-keyboard-focus,var(--spectrum-textfield-text-color-keyboard-focus)))}:host([valid]) .input{color:var(--highcontrast-textfield-text-color-valid,var(--mod-textfield-text-color-valid,var(--spectrum-textfield-text-color-valid)));padding-inline-end:calc(var(--mod-textfield-icon-spacing-inline-start-valid,var(--spectrum-textfield-icon-spacing-inline-start-valid)) + var(--mod-textfield-icon-size-valid,var(--spectrum-textfield-icon-size-valid)) + var(--mod-textfield-icon-spacing-inline-end-valid,var(--spectrum-textfield-icon-spacing-inline-end-valid)) - var(--mod-textfield-border-width,var(--spectrum-textfield-border-width)))}:host([invalid]) .input{color:var(--highcontrast-textfield-text-color-invalid,var(--mod-textfield-text-color-invalid,var(--spectrum-textfield-text-color-invalid)));border-color:var(--highcontrast-textfield-border-color-invalid-default,var(--mod-textfield-border-color-invalid-default,var(--spectrum-textfield-border-color-invalid-default)));padding-inline-end:calc(var(--mod-textfield-icon-spacing-inline-start-invalid,var(--spectrum-textfield-icon-spacing-inline-start-invalid)) + var(--mod-textfield-icon-size-invalid,var(--spectrum-textfield-icon-size-invalid)) + var(--mod-textfield-icon-spacing-inline-end-invalid,var(--spectrum-textfield-icon-spacing-inline-end-invalid)) - var(--mod-textfield-border-width,var(--spectrum-textfield-border-width)))}:host([invalid]) .input:focus,:host([invalid][focused]) .input,:host([invalid]:focus) .input{border-color:var(--highcontrast-textfield-border-color-invalid-focus,var(--mod-textfield-border-color-invalid-focus,var(--spectrum-textfield-border-color-invalid-focus)))}:host([invalid]) .input:focus-visible,:host([invalid][focused]) .input{border-color:var(--highcontrast-textfield-border-color-invalid-keyboard-focus,var(--mod-textfield-border-color-invalid-keyboard-focus,var(--spectrum-textfield-border-color-invalid-keyboard-focus)))}.input:disabled,:host([disabled]) #textfield .input{background-color:var(--mod-textfield-background-color-disabled,var(--spectrum-textfield-background-color-disabled));color:var(--highcontrast-textfield-text-color-disabled,var(--mod-textfield-text-color-disabled,var(--spectrum-textfield-text-color-disabled)));-webkit-text-fill-color:var(--highcontrast-textfield-text-color-disabled,var(--mod-textfield-text-color-disabled,var(--spectrum-textfield-text-color-disabled)));resize:none;opacity:1;border-color:#0000}.input:disabled::placeholder,:host([disabled]) #textfield .input::placeholder{color:var(--highcontrast-textfield-text-color-disabled,var(--mod-textfield-text-color-disabled,var(--spectrum-textfield-text-color-disabled)))}:host([quiet]) .input{padding-block-start:var(--mod-textfield-spacing-block-start,var(--spectrum-textfield-spacing-block-start));padding-inline:var(--mod-textfield-spacing-inline-quiet,var(--spectrum-textfield-spacing-inline-quiet));background-color:initial;resize:none;border-block-start-width:0;border-inline-width:0;border-radius:0;outline:none;margin-block-end:var(--mod-textfield-spacing-block-quiet,var(--spectrum-textfield-spacing-block-quiet));overflow-y:hidden}:host([quiet][disabled]) .input,.input:disabled{background-color:initial;border-color:var(--mod-textfield-border-color-disabled,var(--spectrum-textfield-border-color-disabled));color:var(--highcontrast-textfield-text-color-disabled,var(--mod-textfield-text-color-disabled,var(--spectrum-textfield-text-color-disabled)))}:host([quiet][disabled]) .input::placeholder,.input:disabled::placeholder{color:var(--highcontrast-textfield-text-color-disabled,var(--mod-textfield-text-color-disabled,var(--spectrum-textfield-text-color-disabled)))}.input:read-only,:host([readonly]) #textfield .input{background-color:initial;color:var(--highcontrast-textfield-text-color-readonly,var(--mod-textfield-text-color-readonly,var(--spectrum-textfield-text-color-readonly)));border-color:#0000;outline:none}.input:read-only::placeholder,:host([readonly]) #textfield .input::placeholder{color:var(--highcontrast-textfield-text-color-readonly,var(--mod-textfield-text-color-readonly,var(--spectrum-textfield-text-color-readonly)));background-color:initial}@media (hover:hover){.input:hover,#textfield:hover .input{border-color:var(--highcontrast-textfield-border-color-hover,var(--mod-textfield-border-color-hover,var(--spectrum-textfield-border-color-hover)));color:var(--highcontrast-textfield-text-color-hover,var(--mod-textfield-text-color-hover,var(--spectrum-textfield-text-color-hover)))}.input:hover::placeholder,#textfield:hover .input::placeholder{color:var(--highcontrast-textfield-text-color-hover,var(--mod-textfield-text-color-hover,var(--spectrum-textfield-text-color-hover)))}:host([focused]) .input:hover,.input:focus:hover{border-color:var(--highcontrast-textfield-border-color-focus-hover,var(--mod-textfield-border-color-focus-hover,var(--spectrum-textfield-border-color-focus-hover)))}:host([focused]) .input:hover,:host([focused]) .input:hover::placeholder,.input:focus:hover,.input:focus:hover::placeholder{color:var(--highcontrast-textfield-text-color-focus-hover,var(--mod-textfield-text-color-focus-hover,var(--spectrum-textfield-text-color-focus-hover)))}:host([invalid]) .input:hover,:host([invalid]:hover) .input{border-color:var(--highcontrast-textfield-border-color-invalid-hover,var(--mod-textfield-border-color-invalid-hover,var(--spectrum-textfield-border-color-invalid-hover)))}:host([invalid]) .input:focus:hover,:host([invalid][focused]) .input:hover,:host([invalid]:focus) .input:hover{border-color:var(--highcontrast-textfield-border-color-invalid-focus-hover,var(--mod-textfield-border-color-invalid-focus-hover,var(--spectrum-textfield-border-color-invalid-focus-hover)))}:host([disabled]) #textfield:hover .input{background-color:var(--mod-textfield-background-color-disabled,var(--spectrum-textfield-background-color-disabled));color:var(--highcontrast-textfield-text-color-disabled,var(--mod-textfield-text-color-disabled,var(--spectrum-textfield-text-color-disabled)));-webkit-text-fill-color:var(--highcontrast-textfield-text-color-disabled,var(--mod-textfield-text-color-disabled,var(--spectrum-textfield-text-color-disabled)));resize:none;opacity:1;border-color:#0000}:host([disabled]) #textfield:hover .input::placeholder{color:var(--highcontrast-textfield-text-color-disabled,var(--mod-textfield-text-color-disabled,var(--spectrum-textfield-text-color-disabled)))}:host([quiet][disabled]:hover) .input{background-color:initial;border-color:var(--mod-textfield-border-color-disabled,var(--spectrum-textfield-border-color-disabled));color:var(--highcontrast-textfield-text-color-disabled,var(--mod-textfield-text-color-disabled,var(--spectrum-textfield-text-color-disabled)))}:host([quiet][disabled]:hover) .input::placeholder{color:var(--highcontrast-textfield-text-color-disabled,var(--mod-textfield-text-color-disabled,var(--spectrum-textfield-text-color-disabled)))}:host([readonly]) #textfield:hover .input{background-color:initial;color:var(--highcontrast-textfield-text-color-readonly,var(--mod-textfield-text-color-readonly,var(--spectrum-textfield-text-color-readonly)));border-color:#0000;outline:none}:host([readonly]) #textfield:hover .input::placeholder{color:var(--highcontrast-textfield-text-color-readonly,var(--mod-textfield-text-color-readonly,var(--spectrum-textfield-text-color-readonly)));background-color:initial}}.spectrum-Textfield--sideLabel{grid-template-rows:auto auto;grid-template-columns:auto auto auto}.spectrum-Textfield--sideLabel:after{grid-area:1/2/span 1/span 1}.spectrum-Textfield--sideLabel .spectrum-FieldLabel{grid-area:1/1/span 2/span 1;margin-inline-end:var(--mod-textfield-label-spacing-inline-side-label,var(--spectrum-textfield-label-spacing-inline-side-label))}.spectrum-Textfield--sideLabel .spectrum-Textfield-characterCount{grid-area:1/3/auto/span 1;align-items:flex-start;margin-block-start:var(--mod-textfield-character-count-spacing-block-side,var(--spectrum-textfield-character-count-spacing-block-side));margin-inline-start:var(--mod-textfield-character-count-spacing-inline-side,var(--spectrum-textfield-character-count-spacing-inline-side))}.spectrum-Textfield--sideLabel .spectrum-HelpText{grid-area:2/2/auto/span 1}.spectrum-Textfield--sideLabel .input,.spectrum-Textfield--sideLabel .icon{grid-area:1/2/span 1/span 1}:host([multiline]){--spectrum-textfield-input-line-height:normal}:host([multiline]) .input{min-inline-size:var(--mod-text-area-min-inline-size,var(--spectrum-text-area-min-inline-size));min-block-size:var(--mod-text-area-min-block-size,var(--spectrum-text-area-min-block-size));resize:inherit}:host([multiline][grows]) .input{grid-row:2}:host([multiline][grows]) .spectrum-Textfield--sideLabel .input{grid-row:1}:host([multiline][quiet]) .input{min-block-size:var(--mod-text-area-min-block-size-quiet,var(--spectrum-text-area-min-block-size-quiet));resize:none;overflow-y:hidden}@media (forced-colors:active){:host{--highcontrast-textfield-border-color-hover:Highlight;--highcontrast-textfield-border-color-focus:Highlight;--highcontrast-textfield-border-color-keyboard-focus:CanvasText;--highcontrast-textfield-focus-indicator-color:Highlight;--highcontrast-textfield-border-color-invalid-default:Highlight;--highcontrast-textfield-border-color-invalid-hover:Highlight;--highcontrast-textfield-border-color-invalid-focus:Highlight;--highcontrast-textfield-border-color-invalid-keyboard-focus:Highlight;--highcontrast-textfield-text-color-valid:CanvasText;--highcontrast-textfield-text-color-invalid:CanvasText}#textfield .input{--highcontrast-textfield-text-color-default:CanvasText;--highcontrast-textfield-text-color-hover:CanvasText;--highcontrast-textfield-text-color-keyboard-focus:CanvasText;--highcontrast-textfield-text-color-disabled:GrayText;--highcontrast-textfield-text-color-readonly:CanvasText}#textfield .input::placeholder{--highcontrast-textfield-text-color-default:GrayText;--highcontrast-textfield-text-color-hover:GrayText;--highcontrast-textfield-text-color-keyboard-focus:GrayText;--highcontrast-textfield-text-color-disabled:GrayText;--highcontrast-textfield-text-color-readonly:CanvasText}}:host{--spectrum-textfield-border-color:var(--system-spectrum-textfield-border-color);--spectrum-textfield-border-color-hover:var(--system-spectrum-textfield-border-color-hover);--spectrum-textfield-border-color-focus:var(--system-spectrum-textfield-border-color-focus);--spectrum-textfield-border-color-focus-hover:var(--system-spectrum-textfield-border-color-focus-hover);--spectrum-textfield-border-color-keyboard-focus:var(--system-spectrum-textfield-border-color-keyboard-focus);--spectrum-textfield-border-width:var(--system-spectrum-textfield-border-width)}:host{inline-size:var(--mod-textfield-width,var(--spectrum-textfield-width));flex-direction:column;display:inline-flex}:host([multiline]){resize:both}:host([multiline][readonly]){resize:none}:host([disabled]:focus-visible){outline:none}#textfield{inline-size:100%}#textfield,textarea{resize:inherit}.input{min-inline-size:var(--spectrum-textfield-min-width)}:host([focused]) .input{caret-color:var(--swc-test-caret-color);forced-color-adjust:var(--swc-test-forced-color-adjust)}#sizer{block-size:auto;word-break:break-word;opacity:0;white-space:pre-line}.icon,.icon-workflow{pointer-events:none}:host([multiline]) #textfield{display:inline-grid}:host([multiline]) textarea{transition:box-shadow var(--spectrum-global-animation-duration-100,.13s)ease-in-out,border-color var(--spectrum-global-animation-duration-100,.13s)ease-in-out}:host([multiline]:not([quiet])) #textfield:after{box-shadow:none}:host([multiline][rows]) .input{block-size:auto;resize:none}:host([multiline][rows=\"1\"]) .input{min-block-size:auto}:host([disabled][quiet]) #textfield .input,:host([disabled][quiet]) #textfield:hover .input,:host([quiet]) .input :disabled{border-color:var(--mod-textfield-border-color-disabled,var(--spectrum-textfield-border-color-disabled));color:var(--highcontrast-textfield-text-color-disabled,var(--mod-textfield-text-color-disabled,var(--spectrum-textfield-text-color-disabled)));background-color:#0000}:host([disabled]) #textfield .icon.icon-search,:host([readonly]) #textfield .icon.icon-search{color:var(--highcontrast-textfield-text-color-disabled,var(--mod-textfield-text-color-disabled,var(--spectrum-textfield-text-color-disabled)))}:host([multiline][grows]:not([quiet])) #textfield:after{grid-area:unset;min-block-size:calc(var(--mod-text-area-min-block-size,var(--spectrum-text-area-min-block-size)) + var(--mod-textfield-focus-indicator-gap,var(--spectrum-textfield-focus-indicator-gap))*2)}:host([multiline][grows]:not([rows])) .input:not(#sizer){height:100%;resize:none;position:absolute;top:0;left:0;overflow:hidden}\n`;\nexport default styles;", "/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { Textfield } from './src/Textfield.js';\nimport { defineElement } from '@spectrum-web-components/base/src/define-element.js';\n\ndefineElement('sp-textfield', Textfield);\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'sp-textfield': Textfield;\n    }\n}\n"],
  "mappings": "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",
  "names": ["html", "nothing", "SizedMixin", "ifDefined", "live", "property", "query", "state", "ManageHelpText", "Focusable", "css", "styles", "checkmarkStyles", "textfieldTypes", "ManageHelpText", "SizedMixin", "Focusable", "textfieldStyles", "val", "prev", "_a", "t", "value", "oldValue", "selectionStart", "selectionEnd", "selectionDirection", "_event", "nextSelectStart", "html", "nothing", "ifDefined", "live", "changedProperties", "validity", "__decorateClass", "state", "property", "query", "defineElement", "Textfield"]
}
