/* Generated by Milo*/
/* eslint-disable */

// node_modules/@spectrum-web-components/alert-dialog/src/AlertDialog.js
import { html as o, SpectrumElement as u } from "/libs/features/spectrum-web-components/dist/base.js";
import { property as m, query as g } from "/libs/features/spectrum-web-components/dist/base.js";
import "/libs/features/spectrum-web-components/dist/button.js";
import { FocusVisiblePolyfillMixin as v } from "/libs/features/spectrum-web-components/dist/shared.js";
import { conditionAttributeWithId as c } from "/libs/features/spectrum-web-components/dist/base.js";

// node_modules/@lit-labs/observers/resize-controller.js
var s = class {
  constructor(s4, { target: t2, config: i, callback: h2, skipInitial: e2 }) {
    this.t = /* @__PURE__ */ new Set(), this.o = false, this.i = false, this.h = s4, null !== t2 && this.t.add(t2 ?? s4), this.l = i, this.o = e2 ?? this.o, this.callback = h2, window.ResizeObserver ? (this.u = new ResizeObserver((s5) => {
      this.handleChanges(s5), this.h.requestUpdate();
    }), s4.addController(this)) : console.warn("ResizeController error: browser does not support ResizeObserver.");
  }
  handleChanges(s4) {
    this.value = this.callback?.(s4, this.u);
  }
  hostConnected() {
    for (const s4 of this.t)
      this.observe(s4);
  }
  hostDisconnected() {
    this.disconnect();
  }
  async hostUpdated() {
    !this.o && this.i && this.handleChanges([]), this.i = false;
  }
  observe(s4) {
    this.t.add(s4), this.u.observe(s4, this.l), this.i = true, this.h.requestUpdate();
  }
  unobserve(s4) {
    this.t.delete(s4), this.u.unobserve(s4);
  }
  disconnect() {
    this.u.disconnect();
  }
};

// node_modules/@spectrum-web-components/alert-dialog/src/alert-dialog.css.js
import { css as t } from "/libs/features/spectrum-web-components/dist/base.js";
var e = t`
:host{--spectrum-alert-dialog-min-width:var(
--spectrum-alert-dialog-minimum-width
);--spectrum-alert-dialog-max-width:var(
--spectrum-alert-dialog-maximum-width
);--spectrum-alert-dialog-icon-size:var(--spectrum-workflow-icon-size-100);--spectrum-alert-dialog-warning-icon-color:var(
--spectrum-notice-visual-color
);--spectrum-alert-dialog-error-icon-color:var(
--spectrum-negative-visual-color
);--spectrum-alert-dialog-title-font-family:var(
--spectrum-sans-font-family-stack
);--spectrum-alert-dialog-title-font-weight:var(
--spectrum-heading-sans-serif-font-weight
);--spectrum-alert-dialog-title-font-style:var(
--spectrum-heading-sans-serif-font-style
);--spectrum-alert-dialog-title-font-size:var(
--spectrum-alert-dialog-title-size
);--spectrum-alert-dialog-title-line-height:var(
--spectrum-heading-line-height
);--spectrum-alert-dialog-title-color:var(--spectrum-heading-color);--spectrum-alert-dialog-body-font-family:var(
--spectrum-sans-font-family-stack
);--spectrum-alert-dialog-body-font-weight:var(
--spectrum-body-sans-serif-font-weight
);--spectrum-alert-dialog-body-font-style:var(
--spectrum-body-sans-serif-font-style
);--spectrum-alert-dialog-body-font-size:var(
--spectrum-alert-dialog-description-size
);--spectrum-alert-dialog-body-line-height:var(--spectrum-line-height-100);--spectrum-alert-dialog-body-color:var(--spectrum-body-color);--spectrum-alert-dialog-title-to-divider:var(--spectrum-spacing-200);--spectrum-alert-dialog-divider-to-description:var(--spectrum-spacing-300);--spectrum-alert-dialog-title-to-icon:var(--spectrum-spacing-300);--mod-buttongroup-justify-content:flex-end}:host{box-sizing:border-box;display:flex;inline-size:-moz-fit-content;inline-size:fit-content;max-inline-size:var(
--mod-alert-dialog-max-width,var(--spectrum-alert-dialog-max-width)
);max-height:inherit;min-inline-size:var(
--mod-alert-dialog-min-width,var(--spectrum-alert-dialog-min-width)
);outline:none;padding:var(
--mod-alert-dialog-padding,var(--spectrum-alert-dialog-padding)
)}.icon{block-size:var(
--mod-alert-dialog-icon-size,var(--spectrum-alert-dialog-icon-size)
);flex-shrink:0;inline-size:var(
--mod-alert-dialog-icon-size,var(--spectrum-alert-dialog-icon-size)
);margin-left:var(
--mod-alert-dialog-title-to-icon,var(--spectrum-alert-dialog-title-to-icon)
)}:host([variant=warning]){--mod-icon-color:var(
--mod-alert-dialog-warning-icon-color,var(--spectrum-alert-dialog-warning-icon-color)
)}:host([variant=error]){--mod-icon-color:var(
--mod-alert-dialog-error-icon-color,var(--spectrum-alert-dialog-error-icon-color)
)}.grid{display:grid}.header{align-items:baseline;display:flex;justify-content:space-between}::slotted([slot=heading]){color:var(
--mod-alert-dialog-title-color,var(--spectrum-alert-dialog-title-color)
);font-family:var(
--mod-alert-dialog-title-font-family,var(--spectrum-alert-dialog-title-font-family)
);font-size:var(
--mod-alert-dialog-title-font-size,var(--spectrum-alert-dialog-title-font-size)
);font-style:var(
--mod-alert-dialog-title-font-style,var(--spectrum-alert-dialog-title-font-style)
);font-weight:var(
--mod-alert-dialog-title-font-weight,var(--spectrum-alert-dialog-title-font-weight)
);line-height:var(
--mod-alert-dialog-title-line-height,var(--spectrum-alert-dialog-title-line-height)
);margin:0;margin-block-end:var(
--mod-alert-dialog-title-to-divider,var(--spectrum-alert-dialog-title-to-divider)
)}.content{-webkit-overflow-scrolling:touch;color:var(
--mod-alert-dialog-body-color,var(--spectrum-alert-dialog-body-color)
);font-family:var(
--mod-alert-dialog-body-font-family,var(--spectrum-alert-dialog-body-font-family)
);font-size:var(
--mod-alert-dialog-body-font-size,var(--spectrum-alert-dialog-body-font-size)
);font-style:var(
--mod-alert-dialog-body-font-style,var(--spectrum-alert-dialog-body-font-style)
);font-weight:var(
--mod-alert-dialog-body-font-weight,var(--spectrum-alert-dialog-body-font-weight)
);line-height:var(
--mod-alert-dialog-body-line-height,var(--spectrum-alert-dialog-body-line-height)
);margin:0;margin-block-end:var(
--mod-alert-dialog-description-to-buttons,var(--spectrum-alert-dialog-description-to-buttons)
);margin-block-start:var(
--mod-alert-dialog-divider-to-description,var(--spectrum-alert-dialog-divider-to-description)
);overflow-y:auto}@media (forced-colors:active){:host{border:solid}}
`;
var alert_dialog_css_default = e;

// node_modules/@spectrum-web-components/alert-dialog/src/AlertDialog.js
var b = Object.defineProperty;
var p = Object.getOwnPropertyDescriptor;
var d = (l2, r, e2, t2) => {
  for (var i = t2 > 1 ? void 0 : t2 ? p(r, e2) : r, n = l2.length - 1, a; n >= 0; n--)
    (a = l2[n]) && (i = (t2 ? a(r, e2, i) : a(i)) || i);
  return t2 && i && b(r, e2, i), i;
};
var alertDialogVariants = ["confirmation", "information", "warning", "error", "destructive", "secondary"];
var E = 0;
function h(l2, r) {
  const e2 = l2.assignedElements(), t2 = [];
  return e2.forEach((i) => {
    if (i.id)
      t2.push(i.id);
    else {
      const n = r + `-${E++}`;
      i.id = n, t2.push(n);
    }
  }), t2;
}
var s2 = class s3 extends v(u) {
  constructor() {
    super(...arguments);
    this.resizeController = new s(this, { callback: () => {
      this.shouldManageTabOrderForScrolling();
    } });
    this._variant = "";
    this.labelledbyId = `sp-dialog-label-${s3.instanceCount++}`;
    this.shouldManageTabOrderForScrolling = () => {
      if (!this.contentElement)
        return;
      const { offsetHeight: e2, scrollHeight: t2 } = this.contentElement;
      e2 < t2 ? this.contentElement.tabIndex = 0 : this.contentElement.removeAttribute("tabindex");
    };
    this.describedbyId = `sp-dialog-description-${s3.instanceCount++}`;
  }
  static get styles() {
    return [alert_dialog_css_default];
  }
  set variant(e2) {
    if (e2 === this.variant)
      return;
    const t2 = this.variant;
    alertDialogVariants.includes(e2) ? (this.setAttribute("variant", e2), this._variant = e2) : (this.removeAttribute("variant"), this._variant = ""), this.requestUpdate("variant", t2);
  }
  get variant() {
    return this._variant;
  }
  renderIcon() {
    switch (this.variant) {
      case "warning":
      case "error":
        return o`
                    <sp-icon-alert class="icon"></sp-icon-alert>
                `;
      default:
        return o``;
    }
  }
  renderHeading() {
    return o`
            <slot name="heading" @slotchange=${this.onHeadingSlotchange}></slot>
        `;
  }
  renderContent() {
    return o`
            <div class="content">
                <slot @slotchange=${this.onContentSlotChange}></slot>
            </div>
        `;
  }
  onHeadingSlotchange({ target: e2 }) {
    this.conditionLabelledby && (this.conditionLabelledby(), delete this.conditionLabelledby);
    const t2 = h(e2, this.labelledbyId);
    t2.length && (this.conditionLabelledby = c(this, "aria-labelledby", t2));
  }
  onContentSlotChange({ target: e2 }) {
    requestAnimationFrame(() => {
      this.resizeController.unobserve(this.contentElement), this.resizeController.observe(this.contentElement);
    }), this.conditionDescribedby && (this.conditionDescribedby(), delete this.conditionDescribedby);
    const t2 = h(e2, this.describedbyId);
    if (t2.length && t2.length < 4)
      this.conditionDescribedby = c(this, "aria-describedby", t2);
    else if (!t2.length) {
      const i = !!this.id;
      i || (this.id = this.describedbyId);
      const n = c(this, "aria-describedby", this.id);
      this.conditionDescribedby = () => {
        n(), i || this.removeAttribute("id");
      };
    }
  }
  renderButtons() {
    return o`
            <sp-button-group class="button-group">
                <slot name="button"></slot>
            </sp-button-group>
        `;
  }
  render() {
    return o`
            <div class="grid">
                <div class="header">
                    ${this.renderHeading()} ${this.renderIcon()}
                </div>
                <sp-divider size="m" class="divider"></sp-divider>
                ${this.renderContent()} ${this.renderButtons()}
            </div>
        `;
  }
};
s2.instanceCount = 0, d([g(".content")], s2.prototype, "contentElement", 2), d([m({ type: String, reflect: true })], s2.prototype, "variant", 1);
var AlertDialog = s2;

// node_modules/@spectrum-web-components/alert-dialog/sp-alert-dialog.js
import { defineElement as l } from "/libs/features/spectrum-web-components/dist/base.js";
l("sp-alert-dialog", AlertDialog);
export {
  AlertDialog,
  alertDialogVariants
};
