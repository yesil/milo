{
  "version": 3,
  "sources": ["../node_modules/@spectrum-web-components/icon/src/IconBase.ts", "../node_modules/@spectrum-web-components/icon/src/icon.css.ts", "../node_modules/@spectrum-web-components/icon/src/Icon.ts", "../node_modules/@spectrum-web-components/iconset/src/iconset-registry.ts", "../src/icon.js"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    CSSResultArray,\n    html,\n    PropertyValues,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport { property } from '@spectrum-web-components/base/src/decorators.js';\n\nimport iconStyles from './icon.css.js';\n\nexport class IconBase extends SpectrumElement {\n    public static override get styles(): CSSResultArray {\n        return [iconStyles];\n    }\n\n    @property()\n    public label = '';\n\n    @property({ reflect: true })\n    public size?: 'xxs' | 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl';\n\n    protected override update(changes: PropertyValues): void {\n        if (changes.has('label')) {\n            if (this.label) {\n                this.removeAttribute('aria-hidden');\n            } else {\n                this.setAttribute('aria-hidden', 'true');\n            }\n        }\n        super.update(changes);\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <slot></slot>\n        `;\n    }\n}\n", "/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { css } from '@spectrum-web-components/base';\nconst styles = css`\n    :host{--spectrum-icon-inline-size:var(--mod-icon-inline-size,var(--mod-icon-size,var(--spectrum-icon-size)));--spectrum-icon-block-size:var(--mod-icon-block-size,var(--mod-icon-size,var(--spectrum-icon-size)));inline-size:var(--spectrum-icon-inline-size);block-size:var(--spectrum-icon-block-size);color:var(--mod-icon-color,inherit);fill:currentColor;pointer-events:none;display:inline-block}:host(:not(:root)){overflow:hidden}@media (forced-colors:active){:host{forced-color-adjust:auto}}:host{--spectrum-icon-size:var(--spectrum-workflow-icon-size-100)}:host([size=xxs]){--spectrum-icon-size:var(--spectrum-workflow-icon-size-xxs)}:host([size=xs]){--spectrum-icon-size:var(--spectrum-workflow-icon-size-50)}:host([size=s]){--spectrum-icon-size:var(--spectrum-workflow-icon-size-75)}:host([size=l]){--spectrum-icon-size:var(--spectrum-workflow-icon-size-200)}:host([size=xl]){--spectrum-icon-size:var(--spectrum-workflow-icon-size-300)}:host([size=xxl]){--spectrum-icon-size:var(--spectrum-workflow-icon-size-xxl)}:host{--spectrum-icon-size:inherit;--spectrum-icon-inline-size:var(--mod-icon-inline-size,var(--mod-icon-size,var(--_spectrum-icon-size)));--spectrum-icon-block-size:var(--mod-icon-block-size,var(--mod-icon-size,var(--_spectrum-icon-size)));--_spectrum-icon-size:var(--spectrum-icon-size,var(--spectrum-workflow-icon-size-100))}#container{height:100%}img,svg,::slotted(*){height:100%;width:100%;vertical-align:top;color:inherit}@media (forced-colors:active){img,svg,::slotted(*){forced-color-adjust:auto}}:host([size=xxs]){--_spectrum-icon-size:var(--spectrum-icon-size,var(--spectrum-workflow-icon-size-xxs))}:host([size=xs]){--_spectrum-icon-size:var(--spectrum-icon-size,var(--spectrum-workflow-icon-size-50))}:host([size=s]){--_spectrum-icon-size:var(--spectrum-icon-size,var(--spectrum-workflow-icon-size-75))}:host([size=l]){--_spectrum-icon-size:var(--spectrum-icon-size,var(--spectrum-workflow-icon-size-200))}:host([size=xl]){--_spectrum-icon-size:var(--spectrum-icon-size,var(--spectrum-workflow-icon-size-300))}:host([size=xxl]){--_spectrum-icon-size:var(--spectrum-icon-size,var(--spectrum-workflow-icon-size-xxl))}\n`;\nexport default styles;", "/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { html, TemplateResult } from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport { ifDefined } from '@spectrum-web-components/base/src/directives.js';\n\nimport { IconsetRegistry } from '@spectrum-web-components/iconset/src/iconset-registry.js';\n\nimport { IconBase } from './IconBase.js';\n\n/**\n * @element sp-icon\n */\nexport class Icon extends IconBase {\n    @property()\n    public src?: string;\n\n    @property()\n    public name?: string;\n\n    @query('#container')\n    private iconContainer?: HTMLElement;\n\n    private updateIconPromise?: Promise<void>;\n\n    public override connectedCallback(): void {\n        super.connectedCallback();\n        window.addEventListener('sp-iconset-added', this.iconsetListener);\n    }\n\n    public override disconnectedCallback(): void {\n        super.disconnectedCallback();\n        window.removeEventListener('sp-iconset-added', this.iconsetListener);\n    }\n\n    public override firstUpdated(): void {\n        this.updateIconPromise = this.updateIcon();\n    }\n\n    public override attributeChangedCallback(\n        name: string,\n        old: string,\n        value: string\n    ): void {\n        super.attributeChangedCallback(name, old, value);\n        this.updateIconPromise = this.updateIcon(); // any of our attributes change, update our icon\n    }\n\n    private iconsetListener = (event: CustomEvent): void => {\n        if (!this.name) {\n            return;\n        }\n        // parse the icon name to get iconset name\n        const icon = this.parseIcon(this.name);\n        if (event.detail.name === icon.iconset) {\n            this.updateIconPromise = this.updateIcon();\n        }\n    };\n\n    private announceIconImageSrcError(): void {\n        this.dispatchEvent(\n            new Event('error', {\n                cancelable: false,\n                bubbles: false,\n                composed: false,\n            })\n        );\n    }\n\n    protected override render(): TemplateResult {\n        if (this.name) {\n            return html`\n                <div id=\"container\"></div>\n            `;\n        } else if (this.src) {\n            return html`\n                <img\n                    src=\"${this.src}\"\n                    alt=${ifDefined(this.label)}\n                    @error=${this.announceIconImageSrcError}\n                />\n            `;\n        }\n        return super.render();\n    }\n\n    private async updateIcon(): Promise<void> {\n        if (this.updateIconPromise) {\n            await this.updateIconPromise;\n        }\n        if (!this.name) {\n            return Promise.resolve();\n        }\n        // parse the icon name to get iconset name\n        const icon = this.parseIcon(this.name);\n        // try to retrieve the iconset\n        const iconset = IconsetRegistry.getInstance().getIconset(icon.iconset);\n        if (!iconset) {\n            // we can stop here as there's nothing to be done till we get the iconset\n            return Promise.resolve();\n        }\n        if (!this.iconContainer) {\n            return Promise.resolve();\n        }\n        this.iconContainer.innerHTML = '';\n        return iconset.applyIconToElement(\n            this.iconContainer,\n            icon.icon,\n            this.size || '',\n            this.label ? this.label : ''\n        );\n    }\n\n    private parseIcon(icon: string): { iconset: string; icon: string } {\n        const iconParts = icon.split(':');\n        let iconsetName = 'default';\n        let iconName = icon;\n        if (iconParts.length > 1) {\n            iconsetName = iconParts[0];\n            iconName = iconParts[1];\n        }\n        return { iconset: iconsetName, icon: iconName };\n    }\n\n    protected override async getUpdateComplete(): Promise<boolean> {\n        const complete = (await super.getUpdateComplete()) as boolean;\n        await this.updateIconPromise;\n        return complete;\n    }\n}\n", "/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { Iconset } from './iconset.js';\nexport interface IconsetAddedDetail {\n    name: string;\n    iconset: Iconset;\n}\nexport interface IconsetRemovedDetail {\n    name: string;\n}\n\nexport class IconsetRegistry {\n    // singleton getter\n    public static getInstance(): IconsetRegistry {\n        if (!IconsetRegistry.instance) {\n            IconsetRegistry.instance = new IconsetRegistry();\n        }\n        return IconsetRegistry.instance;\n    }\n    private static instance: IconsetRegistry;\n\n    private iconsetMap = new Map<string, Iconset>();\n\n    public addIconset(name: string, iconset: Iconset): void {\n        this.iconsetMap.set(name, iconset);\n\n        // dispatch a sp-iconset-added event on window to let everyone know we have a new iconset\n        // note we're using window here for efficiency since we don't need to bubble through the dom since everyone\n        // will know where to look for this event\n        const event = new CustomEvent('sp-iconset-added', {\n            bubbles: true,\n            composed: true,\n            detail: { name, iconset },\n        });\n        // we're dispatching this event in the next tick to allow the iconset to finish any slotchange or other event\n        // listeners caused by connection to the dom and first render to complete, this way any icons listening for\n        // this iconset will be able to access the completed iconset\n        setTimeout(() => window.dispatchEvent(event), 0);\n    }\n    public removeIconset(name: string): void {\n        this.iconsetMap.delete(name);\n        // dispatch a sp-iconset-removed event on window to let everyone know we have a new iconset\n        // note we're using window here for efficiency since we don't need to bubble through the dom since everyone\n        // will know where to look for this event\n        const event = new CustomEvent('sp-iconset-removed', {\n            bubbles: true,\n            composed: true,\n            detail: { name },\n        });\n        // we're dispatching this event in the next tick To keep the event model consistent with the added event\n        setTimeout(() => window.dispatchEvent(event), 0);\n    }\n    public getIconset(name: string): Iconset | undefined {\n        return this.iconsetMap.get(name);\n    }\n}\n\ndeclare global {\n    interface GlobalEventHandlersEventMap {\n        'sp-iconset-added': CustomEvent<IconsetAddedDetail>;\n        'sp-iconset-removed': CustomEvent<IconsetRemovedDetail>;\n    }\n}\n", "export * from '@spectrum-web-components/icon';\nexport * from '@spectrum-web-components/icon/src/spectrum-icon-checkmark.css.js';\n\nexport default {};\n"],
  "mappings": "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",
  "names": ["html", "SpectrumElement", "property", "css", "styles", "SpectrumElement", "iconStyles", "changes", "html", "__decorateClass", "property", "html", "property", "query", "ifDefined", "name", "iconset", "event", "IconBase", "event", "icon", "name", "old", "value", "html", "ifDefined", "iconset", "IconsetRegistry", "iconParts", "iconsetName", "iconName", "complete", "__decorateClass", "property", "query"]
}
