/* Generated by Milo*/
/* eslint-disable */

// node_modules/@spectrum-web-components/menu/src/Menu.js
import { html as v, SizedMixin as b, SpectrumElement as g } from "/libs/features/spectrum-web-components/dist/base.js";
import { property as c, query as y } from "/libs/features/spectrum-web-components/dist/base.js";

// node_modules/@spectrum-web-components/menu/src/menu.css.js
import { css as e } from "/libs/features/spectrum-web-components/dist/base.js";
var t = e`
:host{--spectrum-menu-item-min-height:var(--spectrum-component-height-100);--spectrum-menu-item-icon-height:var(--spectrum-workflow-icon-size-100);--spectrum-menu-item-icon-width:var(--spectrum-workflow-icon-size-100);--spectrum-menu-item-label-font-size:var(--spectrum-font-size-100);--spectrum-menu-item-label-text-to-visual:var(
--spectrum-text-to-visual-100
);--spectrum-menu-item-label-inline-edge-to-content:var(
--spectrum-component-edge-to-text-100
);--spectrum-menu-item-top-edge-to-text:var(
--spectrum-component-top-to-text-100
);--spectrum-menu-item-bottom-edge-to-text:var(
--spectrum-component-bottom-to-text-100
);--spectrum-menu-item-text-to-control:var(--spectrum-text-to-control-100);--spectrum-menu-item-description-font-size:var(--spectrum-font-size-75);--spectrum-menu-section-header-font-size:var(--spectrum-font-size-100);--spectrum-menu-section-header-min-width:var(
--spectrum-component-height-100
);--spectrum-menu-item-selectable-edge-to-text-not-selected:var(
--spectrum-menu-item-selectable-edge-to-text-not-selected-medium
);--spectrum-menu-item-checkmark-height:var(
--spectrum-menu-item-checkmark-height-medium
);--spectrum-menu-item-checkmark-width:var(
--spectrum-menu-item-checkmark-width-medium
);--spectrum-menu-item-top-to-checkmark:var(
--spectrum-menu-item-top-to-selected-icon-medium
);--spectrum-menu-item-label-line-height:var(--spectrum-line-height-100);--spectrum-menu-item-label-line-height-cjk:var(
--spectrum-cjk-line-height-100
);--spectrum-menu-item-label-to-description-spacing:var(
--spectrum-menu-item-label-to-description
);--spectrum-menu-item-focus-indicator-width:var(
--spectrum-border-width-200
);--spectrum-menu-item-focus-indicator-color:var(--spectrum-blue-800);--spectrum-menu-item-label-to-value-area-min-spacing:var(
--spectrum-spacing-100
);--spectrum-menu-item-label-content-color-default:var(
--spectrum-neutral-content-color-default
);--spectrum-menu-item-label-content-color-hover:var(
--spectrum-neutral-content-color-hover
);--spectrum-menu-item-label-content-color-down:var(
--spectrum-neutral-content-color-down
);--spectrum-menu-item-label-content-color-focus:var(
--spectrum-neutral-content-color-key-focus
);--spectrum-menu-item-label-icon-color-default:var(
--spectrum-neutral-content-color-default
);--spectrum-menu-item-label-icon-color-hover:var(
--spectrum-neutral-content-color-hover
);--spectrum-menu-item-label-icon-color-down:var(
--spectrum-neutral-content-color-down
);--spectrum-menu-item-label-icon-color-focus:var(
--spectrum-neutral-content-color-key-focus
);--spectrum-menu-item-label-content-color-disabled:var(
--spectrum-disabled-content-color
);--spectrum-menu-item-label-icon-color-disabled:var(
--spectrum-disabled-content-color
);--spectrum-menu-item-description-line-height:var(
--spectrum-line-height-100
);--spectrum-menu-item-description-line-height-cjk:var(
--spectrum-cjk-line-height-100
);--spectrum-menu-item-description-color-default:var(
--spectrum-neutral-subdued-content-color-default
);--spectrum-menu-item-description-color-hover:var(
--spectrum-neutral-subdued-content-color-hover
);--spectrum-menu-item-description-color-down:var(
--spectrum-neutral-subdued-content-color-down
);--spectrum-menu-item-description-color-focus:var(
--spectrum-neutral-subdued-content-color-key-focus
);--spectrum-menu-item-description-color-disabled:var(
--spectrum-disabled-content-color
);--spectrum-menu-section-header-line-height:var(--spectrum-line-height-100);--spectrum-menu-section-header-line-height-cjk:var(
--spectrum-cjk-line-height-100
);--spectrum-menu-section-header-font-weight:var(
--spectrum-bold-font-weight
);--spectrum-menu-section-header-color:var(--spectrum-gray-900);--spectrum-menu-collapsible-icon-color:var(--spectrum-gray-900);--spectrum-menu-checkmark-icon-color-default:var(
--spectrum-accent-color-900
);--spectrum-menu-checkmark-icon-color-hover:var(
--spectrum-accent-color-1000
);--spectrum-menu-checkmark-icon-color-down:var(
--spectrum-accent-color-1100
);--spectrum-menu-checkmark-icon-color-focus:var(
--spectrum-accent-color-1000
);--spectrum-menu-drillin-icon-color-default:var(
--spectrum-neutral-subdued-content-color-default
);--spectrum-menu-drillin-icon-color-hover:var(
--spectrum-neutral-subdued-content-color-hover
);--spectrum-menu-drillin-icon-color-down:var(
--spectrum-neutral-subdued-content-color-down
);--spectrum-menu-drillin-icon-color-focus:var(
--spectrum-neutral-subdued-content-color-key-focus
);--spectrum-menu-item-value-color-default:var(
--spectrum-neutral-subdued-content-color-default
);--spectrum-menu-item-value-color-hover:var(
--spectrum-neutral-subdued-content-color-hover
);--spectrum-menu-item-value-color-down:var(
--spectrum-neutral-subdued-content-color-down
);--spectrum-menu-item-value-color-focus:var(
--spectrum-neutral-subdued-content-color-key-focus
);--spectrum-menu-checkmark-display-hidden:none;--spectrum-menu-checkmark-display-shown:block;--spectrum-menu-checkmark-display:var(
--spectrum-menu-checkmark-display-shown
);--spectrum-menu-item-collapsible-has-icon-submenu-item-padding-x-start:calc(var(--spectrum-menu-item-label-inline-edge-to-content) + var(--spectrum-menu-item-checkmark-width) + var(--spectrum-menu-item-text-to-control) + var(--spectrum-menu-item-icon-width) + var(--spectrum-menu-item-label-text-to-visual) + var(--spectrum-menu-item-focus-indicator-width));--spectrum-menu-item-collapsible-no-icon-submenu-item-padding-x-start:calc(var(--spectrum-menu-item-label-inline-edge-to-content) + var(--spectrum-menu-item-checkmark-width) + var(--spectrum-menu-item-label-text-to-visual) + var(--spectrum-menu-item-focus-indicator-width))}:host([size=s]){--spectrum-menu-item-min-height:var(--spectrum-component-height-75);--spectrum-menu-item-icon-height:var(--spectrum-workflow-icon-size-75);--spectrum-menu-item-icon-width:var(--spectrum-workflow-icon-size-75);--spectrum-menu-item-label-font-size:var(--spectrum-font-size-75);--spectrum-menu-item-label-text-to-visual:var(
--spectrum-text-to-visual-75
);--spectrum-menu-item-label-inline-edge-to-content:var(
--spectrum-component-edge-to-text-75
);--spectrum-menu-item-top-edge-to-text:var(
--spectrum-component-top-to-text-75
);--spectrum-menu-item-bottom-edge-to-text:var(
--spectrum-component-bottom-to-text-75
);--spectrum-menu-item-text-to-control:var(--spectrum-text-to-control-75);--spectrum-menu-item-description-font-size:var(--spectrum-font-size-50);--spectrum-menu-section-header-font-size:var(--spectrum-font-size-75);--spectrum-menu-section-header-min-width:var(
--spectrum-component-height-75
);--spectrum-menu-item-selectable-edge-to-text-not-selected:var(
--spectrum-menu-item-selectable-edge-to-text-not-selected-small
);--spectrum-menu-item-checkmark-height:var(
--spectrum-menu-item-checkmark-height-small
);--spectrum-menu-item-checkmark-width:var(
--spectrum-menu-item-checkmark-width-small
);--spectrum-menu-item-top-to-checkmark:var(
--spectrum-menu-item-top-to-selected-icon-small
)}:host([size=l]){--spectrum-menu-item-min-height:var(--spectrum-component-height-200);--spectrum-menu-item-icon-height:var(--spectrum-workflow-icon-size-200);--spectrum-menu-item-icon-width:var(--spectrum-workflow-icon-size-200);--spectrum-menu-item-label-font-size:var(--spectrum-font-size-200);--spectrum-menu-item-label-text-to-visual:var(
--spectrum-text-to-visual-200
);--spectrum-menu-item-label-inline-edge-to-content:var(
--spectrum-component-edge-to-text-200
);--spectrum-menu-item-top-edge-to-text:var(
--spectrum-component-top-to-text-200
);--spectrum-menu-item-bottom-edge-to-text:var(
--spectrum-component-bottom-to-text-200
);--spectrum-menu-item-text-to-control:var(--spectrum-text-to-control-200);--spectrum-menu-item-description-font-size:var(--spectrum-font-size-100);--spectrum-menu-section-header-font-size:var(--spectrum-font-size-200);--spectrum-menu-section-header-min-width:var(
--spectrum-component-height-200
);--spectrum-menu-item-selectable-edge-to-text-not-selected:var(
--spectrum-menu-item-selectable-edge-to-text-not-selected-large
);--spectrum-menu-item-checkmark-height:var(
--spectrum-menu-item-checkmark-height-large
);--spectrum-menu-item-checkmark-width:var(
--spectrum-menu-item-checkmark-width-large
);--spectrum-menu-item-top-to-checkmark:var(
--spectrum-menu-item-top-to-selected-icon-large
)}:host([size=xl]){--spectrum-menu-item-min-height:var(--spectrum-component-height-300);--spectrum-menu-item-icon-height:var(--spectrum-workflow-icon-size-300);--spectrum-menu-item-icon-width:var(--spectrum-workflow-icon-size-300);--spectrum-menu-item-label-font-size:var(--spectrum-font-size-300);--spectrum-menu-item-label-text-to-visual:var(
--spectrum-text-to-visual-300
);--spectrum-menu-item-label-inline-edge-to-content:var(
--spectrum-component-edge-to-text-300
);--spectrum-menu-item-top-edge-to-text:var(
--spectrum-component-top-to-text-300
);--spectrum-menu-item-bottom-edge-to-text:var(
--spectrum-component-bottom-to-text-300
);--spectrum-menu-item-text-to-control:var(--spectrum-text-to-control-300);--spectrum-menu-item-description-font-size:var(--spectrum-font-size-200);--spectrum-menu-section-header-font-size:var(--spectrum-font-size-300);--spectrum-menu-section-header-min-width:var(
--spectrum-component-height-300
);--spectrum-menu-item-selectable-edge-to-text-not-selected:var(
--spectrum-menu-item-selectable-edge-to-text-not-selected-extra-large
);--spectrum-menu-item-checkmark-height:var(
--spectrum-menu-item-checkmark-height-extra-large
);--spectrum-menu-item-checkmark-width:var(
--spectrum-menu-item-checkmark-width-extra-large
);--spectrum-menu-item-top-to-checkmark:var(
--spectrum-menu-item-top-to-selected-icon-extra-large
)}@media (forced-colors:active){:host{--highcontrast-menu-item-background-color-default:ButtonFace;--highcontrast-menu-item-color-default:ButtonText;--highcontrast-menu-item-background-color-focus:Highlight;--highcontrast-menu-item-color-focus:HighlightText;--highcontrast-menu-checkmark-icon-color-default:Highlight;--highcontrast-menu-item-color-disabled:GrayText;--highcontrast-menu-item-focus-indicator-color:Highlight;--highcontrast-menu-item-selected-background-color:Highlight;--highcontrast-menu-item-selected-color:HighlightText}@supports (color:SelectedItem){:host{--highcontrast-menu-item-selected-background-color:SelectedItem;--highcontrast-menu-item-selected-color:SelectedItemText}}}:host{box-sizing:border-box;display:inline-block;list-style-type:none;margin:0;overflow:auto;padding:0}:host:lang(ja),:host:lang(ko),:host:lang(zh){--spectrum-menu-item-label-line-height:var(
--mod-menu-item-label-line-height-cjk,var(--spectrum-menu-item-label-line-height-cjk)
);--spectrum-menu-item-description-line-height:var(
--mod-menu-item-description-line-height-cjk,var(--spectrum-menu-item-description-line-height-cjk)
);--spectrum-menu-section-header-line-height:var(
--mod-menu-section-header-line-height-cjk,var(--spectrum-menu-section-header-line-height-cjk)
)}:host([selects]) ::slotted(sp-menu-item){--spectrum-menu-checkmark-display:var(
--spectrum-menu-checkmark-display-hidden
);padding-inline-start:var(
--mod-menu-item-selectable-edge-to-text-not-selected,var(--spectrum-menu-item-selectable-edge-to-text-not-selected)
)}:host([selects]) ::slotted(sp-menu-item[selected]){--spectrum-menu-checkmark-display:var(
--spectrum-menu-checkmark-display-shown
);padding-inline-start:var(
--mod-menu-item-label-inline-edge-to-content,var(--spectrum-menu-item-label-inline-edge-to-content)
)}li:not(::slotted(sp-menu-item),.menu-divider){box-sizing:border-box;display:block;margin:0;padding:0;position:relative}.spectrum-Menu-sectionHeading{color:var(
--highcontrast-menu-item-color-default,var(
--mod-menu-section-header-color,var(--spectrum-menu-section-header-color)
)
);display:block;font-size:var(
--mod-menu-section-header-font-size,var(--spectrum-menu-section-header-font-size)
);font-weight:var(
--mod-menu-section-header-font-weight,var(--spectrum-menu-section-header-font-weight)
);grid-area:sectionHeadingArea/1/sectionHeadingArea/-1;line-height:var(
--mod-menu-section-header-line-height,var(--spectrum-menu-section-header-line-height)
);min-inline-size:var(
--mod-menu-section-header-min-width,var(--spectrum-menu-section-header-min-width)
);padding-block-end:var(
--mod-menu-section-header-bottom-edge-to-text,var(
--mod-menu-item-bottom-edge-to-text,var(--spectrum-menu-item-bottom-edge-to-text)
)
);padding-block-start:var(
--mod-menu-section-header-top-edge-to-text,var(
--mod-menu-item-top-edge-to-text,var(--spectrum-menu-item-top-edge-to-text)
)
);padding-inline:var(
--mod-menu-item-label-inline-edge-to-content,var(--spectrum-menu-item-label-inline-edge-to-content)
)}:host{display:inline-flex;flex-direction:column;width:var(--swc-menu-width)}:host(:focus){outline:none}::slotted(*){flex-shrink:0}
`;
var menu_css_default = t;

// node_modules/@spectrum-web-components/menu/src/Menu.js
var f = Object.defineProperty;
var I = Object.getOwnPropertyDescriptor;
var a = (r2, o2, e3, s2) => {
  for (var t3 = s2 > 1 ? void 0 : s2 ? I(o2, e3) : o2, i = r2.length - 1, n; i >= 0; i--)
    (n = r2[i]) && (t3 = (s2 ? n(o2, e3, t3) : n(t3)) || t3);
  return s2 && t3 && f(o2, e3, t3), t3;
};
function p(r2, o2) {
  return !!o2 && (r2 === o2 || r2.contains(o2));
}
var Menu = class extends b(g, { noDefaultSize: true }) {
  constructor() {
    super();
    this.label = "";
    this.ignore = false;
    this.value = "";
    this.valueSeparator = ",";
    this._selected = [];
    this.selectedItems = [];
    this.childItemSet = /* @__PURE__ */ new Set();
    this.focusedItemIndex = 0;
    this.focusInItemIndex = 0;
    this.selectedItemsMap = /* @__PURE__ */ new Map();
    this.descendentOverlays = /* @__PURE__ */ new Map();
    this.handleSubmenuClosed = (e3) => {
      e3.stopPropagation(), e3.composedPath()[0].dispatchEvent(new Event("sp-menu-submenu-closed", { bubbles: true, composed: true }));
    };
    this.handleSubmenuOpened = (e3) => {
      e3.stopPropagation(), e3.composedPath()[0].dispatchEvent(new Event("sp-menu-submenu-opened", { bubbles: true, composed: true }));
      const t3 = this.childItems[this.focusedItemIndex];
      t3 && (t3.focused = false);
      const i = e3.composedPath().find((d2) => this.childItemSet.has(d2));
      if (!i)
        return;
      const n = this.childItems.indexOf(i);
      this.focusedItemIndex = n, this.focusInItemIndex = n;
    };
    this._hasUpdatedSelectedItemIndex = false;
    this._willUpdateItems = false;
    this.cacheUpdated = Promise.resolve();
    this.resolveCacheUpdated = () => {
    };
    this.addEventListener("sp-menu-item-added-or-updated", this.onSelectableItemAddedOrUpdated), this.addEventListener("sp-menu-item-added-or-updated", this.onFocusableItemAddedOrUpdated, { capture: true }), this.addEventListener("click", this.handleClick), this.addEventListener("focusin", this.handleFocusin), this.addEventListener("focusout", this.handleFocusout), this.addEventListener("sp-opened", this.handleSubmenuOpened), this.addEventListener("sp-closed", this.handleSubmenuClosed);
  }
  static get styles() {
    return [menu_css_default];
  }
  get isSubmenu() {
    return this.slot === "submenu";
  }
  get selected() {
    return this._selected;
  }
  set selected(e3) {
    if (e3 === this.selected)
      return;
    const s2 = this.selected;
    this._selected = e3, this.selectedItems = [], this.selectedItemsMap.clear(), this.childItems.forEach((t3) => {
      t3.selected = this.selected.includes(t3.value), t3.selected && (this.selectedItems.push(t3), this.selectedItemsMap.set(t3, true));
    }), this.requestUpdate("selected", s2);
  }
  get childItems() {
    return this.cachedChildItems || (this.cachedChildItems = this.updateCachedMenuItems()), this.cachedChildItems;
  }
  updateCachedMenuItems() {
    if (this.cachedChildItems = [], !this.menuSlot)
      return [];
    const e3 = this.menuSlot.assignedElements({ flatten: true });
    for (const [s2, t3] of e3.entries()) {
      if (this.childItemSet.has(t3)) {
        this.cachedChildItems.push(t3);
        continue;
      }
      const n = t3.localName === "slot" ? t3.assignedElements({ flatten: true }) : [...t3.querySelectorAll(":scope > *")];
      e3.splice(s2, 1, t3, ...n);
    }
    return this.cachedChildItems;
  }
  get childRole() {
    if (this.resolvedRole === "listbox")
      return "option";
    switch (this.resolvedSelects) {
      case "single":
        return "menuitemradio";
      case "multiple":
        return "menuitemcheckbox";
      default:
        return "menuitem";
    }
  }
  get ownRole() {
    return "menu";
  }
  onFocusableItemAddedOrUpdated(e3) {
    e3.menuCascade.set(this, { hadFocusRoot: !!e3.item.menuData.focusRoot, ancestorWithSelects: e3.currentAncestorWithSelects }), this.selects && (e3.currentAncestorWithSelects = this), e3.item.menuData.focusRoot = e3.item.menuData.focusRoot || this;
  }
  onSelectableItemAddedOrUpdated(e3) {
    var i, n;
    const s2 = e3.menuCascade.get(this);
    if (!s2)
      return;
    if (e3.item.menuData.parentMenu = e3.item.menuData.parentMenu || this, s2.hadFocusRoot && !this.ignore && (this.tabIndex = -1), this.addChildItem(e3.item), this.selects === "inherit") {
      this.resolvedSelects = "inherit";
      const d2 = (i = e3.currentAncestorWithSelects) == null ? void 0 : i.ignore;
      this.resolvedRole = d2 ? "none" : ((n = e3.currentAncestorWithSelects) == null ? void 0 : n.getAttribute("role")) || this.getAttribute("role") || void 0;
    } else
      this.selects ? (this.resolvedRole = this.ignore ? "none" : this.getAttribute("role") || void 0, this.resolvedSelects = this.selects) : (this.resolvedRole = this.ignore ? "none" : this.getAttribute("role") || void 0, this.resolvedSelects = this.resolvedRole === "none" ? "ignore" : "none");
    const t3 = this.resolvedSelects === "single" || this.resolvedSelects === "multiple";
    e3.item.menuData.cleanupSteps.push((d2) => this.removeChildItem(d2)), (t3 || !this.selects && this.resolvedSelects !== "ignore") && !e3.item.menuData.selectionRoot && (e3.item.setRole(this.childRole), e3.item.menuData.selectionRoot = e3.item.menuData.selectionRoot || this, e3.item.selected && (this.selectedItemsMap.set(e3.item, true), this.selectedItems = [...this.selectedItems, e3.item], this._selected = [...this.selected, e3.item.value], this.value = this.selected.join(this.valueSeparator)));
  }
  addChildItem(e3) {
    this.childItemSet.add(e3), this.handleItemsChanged();
  }
  async removeChildItem(e3) {
    this.childItemSet.delete(e3), this.cachedChildItems = void 0, e3.focused && (this.handleItemsChanged(), await this.updateComplete, this.focus());
  }
  focus({ preventScroll: e3 } = {}) {
    if (!this.childItems.length || this.childItems.every((t3) => t3.disabled))
      return;
    if (this.childItems.some((t3) => t3.menuData.focusRoot !== this)) {
      super.focus({ preventScroll: e3 });
      return;
    }
    this.focusMenuItemByOffset(0), super.focus({ preventScroll: e3 });
    const s2 = this.selectedItems[0];
    s2 && !e3 && s2.scrollIntoView({ block: "nearest" });
  }
  handleClick(e3) {
    const t3 = e3.composedPath().find((i) => i instanceof Element ? i.getAttribute("role") === this.childRole : false);
    if (e3.defaultPrevented) {
      const i = this.childItems.indexOf(t3);
      (t3 == null ? void 0 : t3.menuData.focusRoot) === this && i > -1 && (this.focusedItemIndex = i);
      return;
    }
    if (t3 != null && t3.href && t3.href.length) {
      this.dispatchEvent(new Event("change", { bubbles: true, composed: true }));
      return;
    } else if ((t3 == null ? void 0 : t3.menuData.selectionRoot) === this && this.childItems.length) {
      if (e3.preventDefault(), t3.hasSubmenu || t3.open)
        return;
      this.selectOrToggleItem(t3);
    } else
      return;
    this.prepareToCleanUp();
  }
  handleFocusin(e3) {
    var n;
    const s2 = p(this, e3.relatedTarget);
    if (this.childItems.some((d2) => d2.menuData.focusRoot !== this))
      return;
    const t3 = this.getRootNode().activeElement, i = ((n = this.childItems[this.focusedItemIndex]) == null ? void 0 : n.menuData.selectionRoot) || this;
    if ((t3 !== i || !s2 && e3.target !== this) && (i.focus({ preventScroll: true }), t3 && this.focusedItemIndex === 0)) {
      const d2 = this.childItems.findIndex((l) => l === t3);
      this.focusMenuItemByOffset(Math.max(d2, 0));
    }
    this.startListeningToKeyboard();
  }
  startListeningToKeyboard() {
    this.addEventListener("keydown", this.handleKeydown);
  }
  handleFocusout(e3) {
    p(this, e3.relatedTarget) || (this.stopListeningToKeyboard(), this.childItems.forEach((s2) => s2.focused = false), this.removeAttribute("aria-activedescendant"));
  }
  stopListeningToKeyboard() {
    this.removeEventListener("keydown", this.handleKeydown);
  }
  handleDescendentOverlayOpened(e3) {
    const s2 = e3.composedPath()[0];
    s2.overlayElement && this.descendentOverlays.set(s2.overlayElement, s2.overlayElement);
  }
  handleDescendentOverlayClosed(e3) {
    const s2 = e3.composedPath()[0];
    s2.overlayElement && this.descendentOverlays.delete(s2.overlayElement);
  }
  async selectOrToggleItem(e3) {
    const s2 = this.resolvedSelects, t3 = new Map(this.selectedItemsMap), i = this.selected.slice(), n = this.selectedItems.slice(), d2 = this.value, l = this.childItems[this.focusedItemIndex];
    if (l && (l.focused = false, l.active = false), this.focusedItemIndex = this.childItems.indexOf(e3), this.forwardFocusVisibleToItem(e3), s2 === "multiple") {
      this.selectedItemsMap.has(e3) ? this.selectedItemsMap.delete(e3) : this.selectedItemsMap.set(e3, true);
      const h2 = [], m4 = [];
      this.childItemSet.forEach((u2) => {
        u2.menuData.selectionRoot === this && this.selectedItemsMap.has(u2) && (h2.push(u2.value), m4.push(u2));
      }), this._selected = h2, this.selectedItems = m4, this.value = this.selected.join(this.valueSeparator);
    } else
      this.selectedItemsMap.clear(), this.selectedItemsMap.set(e3, true), this.value = e3.value, this._selected = [e3.value], this.selectedItems = [e3];
    if (!this.dispatchEvent(new Event("change", { cancelable: true, bubbles: true, composed: true }))) {
      this._selected = i, this.selectedItems = n, this.selectedItemsMap = t3, this.value = d2;
      return;
    }
    if (s2 === "single") {
      for (const h2 of t3.keys())
        h2 !== e3 && (h2.selected = false);
      e3.selected = true;
    } else
      s2 === "multiple" && (e3.selected = !e3.selected);
  }
  navigateWithinMenu(e3) {
    const { code: s2 } = e3, t3 = this.childItems[this.focusedItemIndex], i = s2 === "ArrowDown" ? 1 : -1, n = this.focusMenuItemByOffset(i);
    n !== t3 && (e3.preventDefault(), e3.stopPropagation(), n.scrollIntoView({ block: "nearest" }));
  }
  navigateBetweenRelatedMenus(e3) {
    const { code: s2 } = e3, t3 = this.isLTR && s2 === "ArrowRight" || !this.isLTR && s2 === "ArrowLeft", i = this.isLTR && s2 === "ArrowLeft" || !this.isLTR && s2 === "ArrowRight";
    if (t3) {
      e3.stopPropagation();
      const n = this.childItems[this.focusedItemIndex];
      n != null && n.hasSubmenu && n.openOverlay();
    } else
      i && this.isSubmenu && (e3.stopPropagation(), this.dispatchEvent(new Event("close", { bubbles: true })), this.updateSelectedItemIndex());
  }
  handleKeydown(e3) {
    var n;
    if (e3.target !== this && this !== e3.target.parentElement || e3.defaultPrevented)
      return;
    const t3 = this.childItems[this.focusedItemIndex];
    t3 && (t3.focused = true);
    const { code: i } = e3;
    if (e3.shiftKey && e3.target !== this && this.hasAttribute("tabindex")) {
      this.removeAttribute("tabindex");
      const d2 = (l) => {
        !l.shiftKey && !this.hasAttribute("tabindex") && (this.tabIndex = 0, document.removeEventListener("keyup", d2), this.removeEventListener("focusout", d2));
      };
      document.addEventListener("keyup", d2), this.addEventListener("focusout", d2);
    }
    if (i === "Tab") {
      this.prepareToCleanUp();
      return;
    }
    if (i === "Space" && t3 != null && t3.hasSubmenu) {
      t3.openOverlay();
      return;
    }
    if (i === "Space" || i === "Enter") {
      (n = this.childItems[this.focusedItemIndex]) == null || n.click();
      return;
    }
    if (i === "ArrowDown" || i === "ArrowUp") {
      this.navigateWithinMenu(e3);
      return;
    }
    this.navigateBetweenRelatedMenus(e3);
  }
  focusMenuItemByOffset(e3) {
    const s2 = e3 || 1, t3 = this.childItems[this.focusedItemIndex];
    t3 && (t3.focused = false, t3.active = t3.open), this.focusedItemIndex = (this.childItems.length + this.focusedItemIndex + e3) % this.childItems.length;
    let i = this.childItems[this.focusedItemIndex], n = this.childItems.length;
    for (; i != null && i.disabled && n; )
      n -= 1, this.focusedItemIndex = (this.childItems.length + this.focusedItemIndex + s2) % this.childItems.length, i = this.childItems[this.focusedItemIndex];
    return i != null && i.disabled || this.forwardFocusVisibleToItem(i), i;
  }
  prepareToCleanUp() {
    document.addEventListener("focusout", () => {
      requestAnimationFrame(() => {
        const e3 = this.childItems[this.focusedItemIndex];
        e3 && (e3.focused = false, this.updateSelectedItemIndex());
      });
    }, { once: true });
  }
  updateSelectedItemIndex() {
    let e3 = 0;
    const s2 = /* @__PURE__ */ new Map(), t3 = [], i = [];
    let n = this.childItems.length;
    for (; n; ) {
      n -= 1;
      const d2 = this.childItems[n];
      d2.menuData.selectionRoot === this && ((d2.selected || !this._hasUpdatedSelectedItemIndex && this.selected.includes(d2.value)) && (e3 = n, s2.set(d2, true), t3.unshift(d2.value), i.unshift(d2)), n !== e3 && (d2.focused = false));
    }
    i.map((d2, l) => {
      l > 0 && (d2.focused = false);
    }), this.selectedItemsMap = s2, this._selected = t3, this.selectedItems = i, this.value = this.selected.join(this.valueSeparator), this.focusedItemIndex = e3, this.focusInItemIndex = e3;
  }
  handleItemsChanged() {
    this.cachedChildItems = void 0, this._willUpdateItems || (this._willUpdateItems = true, this.cacheUpdated = this.updateCache());
  }
  async updateCache() {
    this.hasUpdated ? await new Promise((e3) => requestAnimationFrame(() => e3(true))) : await Promise.all([new Promise((e3) => requestAnimationFrame(() => e3(true))), this.updateComplete]), this.cachedChildItems === void 0 && (this.updateSelectedItemIndex(), this.updateItemFocus()), this._willUpdateItems = false;
  }
  updateItemFocus() {
    if (this.childItems.length == 0)
      return;
    const e3 = this.childItems[this.focusInItemIndex];
    this.getRootNode().activeElement === e3.menuData.focusRoot && this.forwardFocusVisibleToItem(e3);
  }
  closeDescendentOverlays() {
    this.descendentOverlays.forEach((e3) => {
      e3.open = false;
    }), this.descendentOverlays = /* @__PURE__ */ new Map();
  }
  forwardFocusVisibleToItem(e3) {
    if (!e3 || e3.menuData.focusRoot !== this)
      return;
    this.closeDescendentOverlays();
    const s2 = this.hasVisibleFocusInTree() || !!this.childItems.find((t3) => t3.hasVisibleFocusInTree());
    e3.focused = s2, this.setAttribute("aria-activedescendant", e3.id), e3.menuData.selectionRoot && e3.menuData.selectionRoot !== this && e3.menuData.selectionRoot.focus();
  }
  handleSlotchange({ target: e3 }) {
    const s2 = e3.assignedElements({ flatten: true });
    this.childItems.length !== s2.length && s2.forEach((t3) => {
      typeof t3.triggerUpdate != "undefined" && t3.triggerUpdate();
    });
  }
  renderMenuItemSlot() {
    return v`
            <slot
                @sp-menu-submenu-opened=${this.handleDescendentOverlayOpened}
                @sp-menu-submenu-closed=${this.handleDescendentOverlayClosed}
                @slotchange=${this.handleSlotchange}
            ></slot>
        `;
  }
  render() {
    return this.renderMenuItemSlot();
  }
  firstUpdated(e3) {
    super.firstUpdated(e3), !this.hasAttribute("tabindex") && !this.ignore && (this.getAttribute("role") === "group" ? this.tabIndex = -1 : this.tabIndex = 0);
    const s2 = [new Promise((t3) => requestAnimationFrame(() => t3(true)))];
    [...this.children].forEach((t3) => {
      t3.localName === "sp-menu-item" && s2.push(t3.updateComplete);
    }), this.childItemsUpdated = Promise.all(s2);
  }
  updated(e3) {
    super.updated(e3), e3.has("selects") && this.hasUpdated && this.selectsChanged(), e3.has("label") && (this.label || typeof e3.get("label") != "undefined") && (this.label ? this.setAttribute("aria-label", this.label) : this.removeAttribute("aria-label"));
  }
  selectsChanged() {
    const e3 = [new Promise((s2) => requestAnimationFrame(() => s2(true)))];
    this.childItemSet.forEach((s2) => {
      e3.push(s2.triggerUpdate());
    }), this.childItemsUpdated = Promise.all(e3);
  }
  connectedCallback() {
    super.connectedCallback(), !this.hasAttribute("role") && !this.ignore && this.setAttribute("role", this.ownRole), this.updateComplete.then(() => this.updateItemFocus());
  }
  disconnectedCallback() {
    this.cachedChildItems = void 0, super.disconnectedCallback();
  }
  async getUpdateComplete() {
    const e3 = await super.getUpdateComplete();
    return await this.childItemsUpdated, await this.cacheUpdated, e3;
  }
};
a([c({ type: String, reflect: true })], Menu.prototype, "label", 2), a([c({ type: Boolean, reflect: true })], Menu.prototype, "ignore", 2), a([c({ type: String, reflect: true })], Menu.prototype, "selects", 2), a([c({ type: String })], Menu.prototype, "value", 2), a([c({ type: String, attribute: "value-separator" })], Menu.prototype, "valueSeparator", 2), a([c({ attribute: false })], Menu.prototype, "selected", 1), a([c({ attribute: false })], Menu.prototype, "selectedItems", 2), a([y("slot:not([name])")], Menu.prototype, "menuSlot", 2);

// node_modules/@spectrum-web-components/menu/sp-menu.js
import { defineElement as m } from "/libs/features/spectrum-web-components/dist/base.js";
m("sp-menu", Menu);

// node_modules/@spectrum-web-components/menu/src/MenuItem.js
import { html as d, nothing as h } from "/libs/features/spectrum-web-components/dist/base.js";
import { ObserveSlotPresence as m2, ObserveSlotText as v2 } from "/libs/features/spectrum-web-components/dist/shared.js";
import { property as s, query as u } from "/libs/features/spectrum-web-components/dist/base.js";
import "/libs/features/spectrum-web-components/dist/icons-ui.js";
import { LikeAnchor as b2 } from "/libs/features/spectrum-web-components/dist/shared.js";
import { Focusable as f2 } from "/libs/features/spectrum-web-components/dist/shared.js";
import "/libs/features/spectrum-web-components/dist/icons-ui.js";
import E from "/libs/features/spectrum-web-components/dist/icons/chevron.js";

// node_modules/@spectrum-web-components/menu/src/menu-item.css.js
import { css as o } from "/libs/features/spectrum-web-components/dist/base.js";
var e2 = o`
::slotted([slot=icon]){fill:var(
--highcontrast-menu-item-color-default,var(
--mod-menu-item-label-icon-color-default,var(--spectrum-menu-item-label-icon-color-default)
)
);color:var(
--highcontrast-menu-item-color-default,var(
--mod-menu-item-label-icon-color-default,var(--spectrum-menu-item-label-icon-color-default)
)
)}.checkmark{fill:var(
--highcontrast-menu-checkmark-icon-color-default,var(
--mod-menu-checkmark-icon-color-default,var(--spectrum-menu-checkmark-icon-color-default)
)
);align-self:center;color:var(
--highcontrast-menu-checkmark-icon-color-default,var(
--mod-menu-checkmark-icon-color-default,var(--spectrum-menu-checkmark-icon-color-default)
)
);display:var(
--mod-menu-checkmark-display,var(--spectrum-menu-checkmark-display)
);opacity:1}:host{align-items:center;background-color:var(
--highcontrast-menu-item-background-color-default,var(
--mod-menu-item-background-color-default,var(--spectrum-menu-item-background-color-default)
)
);box-sizing:border-box;cursor:pointer;line-height:var(
--mod-menu-item-label-line-height,var(--spectrum-menu-item-label-line-height)
);margin:0;min-block-size:var(
--mod-menu-item-min-height,var(--spectrum-menu-item-min-height)
);padding-block-end:var(
--mod-menu-item-bottom-edge-to-text,var(--spectrum-menu-item-bottom-edge-to-text)
);padding-block-start:var(
--mod-menu-item-top-edge-to-text,var(--spectrum-menu-item-top-edge-to-text)
);padding-inline:var(
--mod-menu-item-label-inline-edge-to-content,var(--spectrum-menu-item-label-inline-edge-to-content)
);position:relative;-webkit-text-decoration:none;text-decoration:none}:host{display:grid;grid-template:". chevronAreaCollapsible . iconArea sectionHeadingArea . . ." 1fr "selectedArea chevronAreaCollapsible checkmarkArea iconArea labelArea valueArea actionsArea chevronAreaDrillIn" ". . . . descriptionArea . . ." ". . . . submenuArea . . ."/auto auto auto auto 1fr auto auto auto}#label{grid-area:submenuItemLabelArea}::slotted([slot=value]){grid-area:submenuItemValueArea}:host(:focus),:host([focused]){background-color:var(
--highcontrast-menu-item-background-color-focus,var(
--mod-menu-item-background-color-key-focus,var(--spectrum-menu-item-background-color-key-focus)
)
);outline:none}:host(:focus)>#label,:host([focused])>#label{color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-label-content-color-focus,var(--spectrum-menu-item-label-content-color-focus)
)
)}:host(:focus)>[name=description]::slotted(*),:host([focused])>[name=description]::slotted(*){color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-description-color-focus,var(--spectrum-menu-item-description-color-focus)
)
)}:host(:focus)>::slotted([slot=value]),:host([focused])>::slotted([slot=value]){color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-value-color-focus,var(--spectrum-menu-item-value-color-focus)
)
)}:host(:focus)>.icon:not(.chevron,.checkmark),:host([focused])>.icon:not(.chevron,.checkmark){fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-label-icon-color-focus,var(--spectrum-menu-item-label-icon-color-focus)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-label-icon-color-focus,var(--spectrum-menu-item-label-icon-color-focus)
)
)}:host(:focus)>.chevron,:host([focused])>.chevron{fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-collapsible-icon-color,var(--spectrum-menu-collapsible-icon-color)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-collapsible-icon-color,var(--spectrum-menu-collapsible-icon-color)
)
)}:host(:focus)>.checkmark,:host([focused])>.checkmark{fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-checkmark-icon-color-focus,var(--spectrum-menu-checkmark-icon-color-focus)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-checkmark-icon-color-focus,var(--spectrum-menu-checkmark-icon-color-focus)
)
)}:host([focused]){box-shadow:inset calc(var(
--mod-menu-item-focus-indicator-width,
var(--spectrum-menu-item-focus-indicator-width)
)*var(--spectrum-menu-item-focus-indicator-direction-scalar, 1)) 0 0 0 var(
--highcontrast-menu-item-focus-indicator-color,var(
--mod-menu-item-focus-indicator-color,var(--spectrum-menu-item-focus-indicator-color)
)
)}:host([dir=rtl]){--spectrum-menu-item-focus-indicator-direction-scalar:-1}:host(:hover){background-color:var(
--highcontrast-menu-item-background-color-focus,var(
--mod-menu-item-background-color-hover,var(--spectrum-menu-item-background-color-hover)
)
)}:host(:hover)>#label{color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-label-content-color-hover,var(--spectrum-menu-item-label-content-color-hover)
)
)}:host(:hover)>[name=description]::slotted(*){color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-description-color-hover,var(--spectrum-menu-item-description-color-hover)
)
)}:host(:hover)>::slotted([slot=value]){color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-value-color-hover,var(--spectrum-menu-item-value-color-hover)
)
)}:host(:hover)>.icon:not(.chevron,.checkmark){fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-label-icon-color-hover,var(--spectrum-menu-item-label-icon-color-hover)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-label-icon-color-hover,var(--spectrum-menu-item-label-icon-color-hover)
)
)}:host(:hover)>.chevron{fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-collapsible-icon-color,var(--spectrum-menu-collapsible-icon-color)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-collapsible-icon-color,var(--spectrum-menu-collapsible-icon-color)
)
)}:host(:hover)>.checkmark{fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-checkmark-icon-color-hover,var(--spectrum-menu-checkmark-icon-color-hover)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-checkmark-icon-color-hover,var(--spectrum-menu-checkmark-icon-color-hover)
)
)}:host:active{background-color:var(
--highcontrast-menu-item-background-color-focus,var(
--mod-menu-item-background-color-down,var(--spectrum-menu-item-background-color-down)
)
)}:host:active>#label{color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-label-content-color-down,var(--spectrum-menu-item-label-content-color-down)
)
)}:host:active>[name=description]::slotted(*){color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-description-color-down,var(--spectrum-menu-item-description-color-down)
)
)}:host:active>::slotted([slot=value]){color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-value-color-down,var(--spectrum-menu-item-value-color-down)
)
)}:host:active>.icon:not(.chevron,.checkmark){fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-label-icon-color-down,var(--spectrum-menu-item-label-icon-color-down)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-label-icon-color-down,var(--spectrum-menu-item-label-icon-color-down)
)
)}:host:active>.chevron{fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-collapsible-icon-color,var(--spectrum-menu-collapsible-icon-color)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-collapsible-icon-color,var(--spectrum-menu-collapsible-icon-color)
)
)}:host:active>.checkmark{fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-checkmark-icon-color-down,var(--spectrum-menu-checkmark-icon-color-down)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-checkmark-icon-color-down,var(--spectrum-menu-checkmark-icon-color-down)
)
)}:host([aria-disabled=true]),:host([disabled]){background-color:#0000}:host([aria-disabled=true]) #label,:host([disabled]) #label{color:var(
--highcontrast-menu-item-color-disabled,var(
--mod-menu-item-label-content-color-disabled,var(--spectrum-menu-item-label-content-color-disabled)
)
)}:host([aria-disabled=true]) [name=description]::slotted(*),:host([disabled]) [name=description]::slotted(*){color:var(
--highcontrast-menu-item-color-disabled,var(
--mod-menu-item-description-color-disabled,var(--spectrum-menu-item-description-color-disabled)
)
)}:host([aria-disabled=true]) ::slotted([slot=icon]),:host([disabled]) ::slotted([slot=icon]){fill:var(
--highcontrast-menu-item-color-disabled,var(
--mod-menu-item-label-icon-color-disabled,var(--spectrum-menu-item-label-icon-color-disabled)
)
);color:var(
--highcontrast-menu-item-color-disabled,var(
--mod-menu-item-label-icon-color-disabled,var(--spectrum-menu-item-label-icon-color-disabled)
)
)}:host([aria-disabled=true]:hover),:host([disabled]:hover){cursor:default}:host([aria-disabled=true]:hover) ::slotted([slot=icon]),:host([disabled]:hover) ::slotted([slot=icon]){fill:var(
--highcontrast-menu-item-color-disabled,var(
--mod-menu-item-label-icon-color-disabled,var(--spectrum-menu-item-label-icon-color-disabled)
)
);color:var(
--highcontrast-menu-item-color-disabled,var(
--mod-menu-item-label-icon-color-disabled,var(--spectrum-menu-item-label-icon-color-disabled)
)
)}::slotted([slot=icon]){align-self:start;grid-area:iconArea}.checkmark{align-self:start;grid-area:checkmarkArea}.menu-itemSelection{grid-area:selectedArea}#label{color:var(
--highcontrast-menu-item-color-default,var(
--mod-menu-item-label-content-color-default,var(--spectrum-menu-item-label-content-color-default)
)
);font-size:var(
--mod-menu-item-label-font-size,var(--spectrum-menu-item-label-font-size)
);grid-area:labelArea}::slotted([slot=value]){grid-area:valueArea}.spectrum-Menu-itemActions{grid-area:actionsArea}.chevron{align-self:center;block-size:var(--spectrum-menu-item-checkmark-height);grid-area:chevronArea;height:var(--spectrum-menu-item-checkmark-height);inline-size:var(--spectrum-menu-item-checkmark-width);width:var(--spectrum-menu-item-checkmark-width)}.spectrum-Menu-item--collapsible .chevron{grid-area:chevronAreaCollapsible}[name=description]::slotted(*){grid-area:descriptionArea}:host([has-submenu]) .chevron{grid-area:chevronAreaDrillIn}.icon:not(.chevron,.checkmark){block-size:var(
--mod-menu-item-icon-height,var(--spectrum-menu-item-icon-height)
);inline-size:var(
--mod-menu-item-icon-width,var(--spectrum-menu-item-icon-width)
)}.checkmark{block-size:var(
--mod-menu-item-checkmark-height,var(--spectrum-menu-item-checkmark-height)
);inline-size:var(
--mod-menu-item-checkmark-width,var(--spectrum-menu-item-checkmark-width)
);margin-block-start:calc(var(
--mod-menu-item-top-to-checkmark,
var(--spectrum-menu-item-top-to-checkmark)
) - var(
--mod-menu-item-top-edge-to-text,
var(--spectrum-menu-item-top-edge-to-text)
));margin-inline-end:var(
--mod-menu-item-text-to-control,var(--spectrum-menu-item-text-to-control)
)}::slotted([slot=icon]){margin-inline-end:var(
--mod-menu-item-label-text-to-visual,var(--spectrum-menu-item-label-text-to-visual)
)}.chevron{margin-inline-end:var(
--mod-menu-item-text-to-control,var(--spectrum-menu-item-text-to-control)
)}[name=description]::slotted(*){color:var(
--highcontrast-menu-item-color-default,var(
--mod-menu-item-description-color-default,var(--spectrum-menu-item-description-color-default)
)
);font-size:var(
--mod-menu-item-description-font-size,var(--spectrum-menu-item-description-font-size)
);-webkit-hyphens:auto;hyphens:auto;line-height:var(
--mod-menu-item-description-line-height,var(--spectrum-menu-item-description-line-height)
);margin-block-start:var(
--mod-menu-item-label-to-description-spacing,var(--spectrum-menu-item-label-to-description-spacing)
);overflow-wrap:break-word}::slotted([slot=value]){color:var(
--highcontrast-menu-item-color-default,var(
--mod-menu-item-value-color-default,var(--spectrum-menu-item-value-color-default)
)
);font-size:var(
--mod-menu-item-label-font-size,var(--spectrum-menu-item-label-font-size)
);justify-self:end;margin-inline-start:var(
--mod-menu-item-label-to-value-area-min-spacing,var(--spectrum-menu-item-label-to-value-area-min-spacing)
)}:host([no-wrap]) #label{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.spectrum-Menu-item--collapsible.is-open{padding-block-end:0}.spectrum-Menu-item--collapsible.is-open .chevron{transform:rotate(90deg)}.spectrum-Menu-item--collapsible.is-open:active,.spectrum-Menu-item--collapsible.is-open:focus,.spectrum-Menu-item--collapsible.is-open:hover,:host([focused]) .spectrum-Menu-item--collapsible.is-open{background-color:var(
--highcontrast-menu-item-background-color-default,var(
--mod-menu-item-background-color-default,var(--spectrum-menu-item-background-color-default)
)
)}.spectrum-Menu-item--collapsible>::slotted([slot=icon]){padding-block-end:var(
--mod-menu-section-header-bottom-edge-to-text,var(
--mod-menu-item-bottom-edge-to-text,var(--spectrum-menu-item-bottom-edge-to-text)
)
);padding-block-start:var(
--mod-menu-section-header-top-edge-to-text,var(
--mod-menu-item-top-edge-to-text,var(--spectrum-menu-item-top-edge-to-text)
)
)}:host([dir=rtl]) .chevron{transform:rotate(-180deg)}:host([has-submenu]) .chevron{fill:var(
--highcontrast-menu-item-color-default,var(
--mod-menu-drillin-icon-color-default,var(--spectrum-menu-drillin-icon-color-default)
)
);color:var(
--highcontrast-menu-item-color-default,var(
--mod-menu-drillin-icon-color-default,var(--spectrum-menu-drillin-icon-color-default)
)
);margin-inline-end:0;margin-inline-start:var(
--mod-menu-item-label-to-value-area-min-spacing,var(--spectrum-menu-item-label-to-value-area-min-spacing)
)}:host([has-submenu]) .is-open{--spectrum-menu-item-background-color-default:var(
--highcontrast-menu-item-selected-background-color,var(
--mod-menu-item-background-color-hover,var(--spectrum-menu-item-background-color-hover)
)
)}:host([has-submenu]) .is-open .icon:not(.chevron,.checkmark){fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-label-icon-color-hover,var(--spectrum-menu-item-label-icon-color-hover)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-item-label-icon-color-hover,var(--spectrum-menu-item-label-icon-color-hover)
)
)}:host([has-submenu]) .is-open .chevron{fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-drillin-icon-color-hover,var(--spectrum-menu-drillin-icon-color-hover)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-drillin-icon-color-hover,var(--spectrum-menu-drillin-icon-color-hover)
)
)}:host([has-submenu]) .is-open .checkmark{fill:var(
--highcontrast-menu-checkmark-icon-color-default,var(
--mod-menu-checkmark-icon-color-hover,var(--spectrum-menu-checkmark-icon-color-hover)
)
);color:var(
--highcontrast-menu-checkmark-icon-color-default,var(
--mod-menu-checkmark-icon-color-hover,var(--spectrum-menu-checkmark-icon-color-hover)
)
)}:host([has-submenu]:hover) .chevron{fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-drillin-icon-color-hover,var(--spectrum-menu-drillin-icon-color-hover)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-drillin-icon-color-hover,var(--spectrum-menu-drillin-icon-color-hover)
)
)}:host([has-submenu]:focus) .chevron,:host([has-submenu][focused]) .chevron{fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-drillin-icon-color-focus,var(--spectrum-menu-drillin-icon-color-focus)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-drillin-icon-color-focus,var(--spectrum-menu-drillin-icon-color-focus)
)
)}:host([has-submenu]):active .chevron{fill:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-drillin-icon-color-down,var(--spectrum-menu-drillin-icon-color-down)
)
);color:var(
--highcontrast-menu-item-color-focus,var(
--mod-menu-drillin-icon-color-down,var(--spectrum-menu-drillin-icon-color-down)
)
)}#label{flex:1 1 auto;-webkit-hyphens:auto;hyphens:auto;line-height:var(--spectrum-listitem-texticon-label-line-height);overflow-wrap:break-word;width:calc(100% - var(--spectrum-listitem-texticon-ui-icon-width) - var(--spectrum-listitem-texticon-icon-gap))}.spectrum-Menu-itemLabel--wrapping{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host([hidden]){display:none}:host([disabled]){pointer-events:none}#button{inset:0;position:absolute}:host([dir=ltr]) [icon-only]::slotted(:last-of-type){margin-right:auto}:host([dir=rtl]) [icon-only]::slotted(:last-of-type){margin-left:auto}@media (forced-colors:active){:host{forced-color-adjust:none}}::slotted([slot=submenu]){max-width:100%;width:max-content}
`;
var menu_item_css_default = e2;

// node_modules/@spectrum-web-components/menu/src/MenuItem.js
import g2 from "/libs/features/spectrum-web-components/dist/icons/checkmark.js";

// node_modules/@lit-labs/observers/mutation-controller.js
var t2 = class {
  constructor(t3, { target: s2, config: i, callback: h2, skipInitial: o2 }) {
    this.t = /* @__PURE__ */ new Set(), this.o = false, this.i = false, this.h = t3, null !== s2 && this.t.add(s2 ?? t3), this.l = i, this.o = o2 ?? this.o, this.callback = h2, window.MutationObserver ? (this.u = new MutationObserver((t4) => {
      this.handleChanges(t4), this.h.requestUpdate();
    }), t3.addController(this)) : console.warn("MutationController error: browser does not support MutationObserver.");
  }
  handleChanges(t3) {
    this.value = this.callback?.(t3, this.u);
  }
  hostConnected() {
    for (const t3 of this.t)
      this.observe(t3);
  }
  hostDisconnected() {
    this.disconnect();
  }
  async hostUpdated() {
    const t3 = this.u.takeRecords();
    (t3.length || !this.o && this.i) && this.handleChanges(t3), this.i = false;
  }
  observe(t3) {
    this.t.add(t3), this.u.observe(t3, this.l), this.i = true, this.h.requestUpdate();
  }
  disconnect() {
    this.u.disconnect();
  }
};

// node_modules/@spectrum-web-components/menu/src/MenuItem.js
var c2 = Object.defineProperty;
var p2 = Object.getOwnPropertyDescriptor;
var r = (l, a2, e3, t3) => {
  for (var i = t3 > 1 ? void 0 : t3 ? p2(a2, e3) : a2, o2 = l.length - 1, n; o2 >= 0; o2--)
    (n = l[o2]) && (i = (t3 ? n(a2, e3, i) : n(i)) || i);
  return t3 && i && c2(a2, e3, i), i;
};
var C = 100;
var MenuItemAddedOrUpdatedEvent = class extends Event {
  constructor(e3) {
    super("sp-menu-item-added-or-updated", { bubbles: true, composed: true });
    this.menuCascade = /* @__PURE__ */ new WeakMap();
    this.clear(e3);
  }
  clear(e3) {
    this._item = e3, this.currentAncestorWithSelects = void 0, e3.menuData = { cleanupSteps: [], focusRoot: void 0, selectionRoot: void 0, parentMenu: void 0 }, this.menuCascade = /* @__PURE__ */ new WeakMap();
  }
  get item() {
    return this._item;
  }
};
var MenuItem = class extends b2(v2(m2(f2, '[slot="icon"]'))) {
  constructor() {
    super();
    this.active = false;
    this.focused = false;
    this.selected = false;
    this._value = "";
    this.hasSubmenu = false;
    this.noWrap = false;
    this.open = false;
    this.proxyFocus = () => {
      this.focus();
    };
    this.handleBeforetoggle = (e3) => {
      e3.newState === "closed" && (this.open = true, this.overlayElement.manuallyKeepOpen(), this.overlayElement.removeEventListener("beforetoggle", this.handleBeforetoggle));
    };
    this.recentlyLeftChild = false;
    this.willDispatchUpdate = false;
    this.menuData = { focusRoot: void 0, parentMenu: void 0, selectionRoot: void 0, cleanupSteps: [] };
    this.addEventListener("click", this.handleClickCapture, { capture: true }), new t2(this, { config: { characterData: true, childList: true, subtree: true }, callback: () => {
      this.breakItemChildrenCache();
    } });
  }
  static get styles() {
    return [menu_item_css_default, g2, E];
  }
  get value() {
    return this._value || this.itemText;
  }
  set value(e3) {
    e3 !== this._value && (this._value = e3 || "", this._value ? this.setAttribute("value", this._value) : this.removeAttribute("value"));
  }
  get itemText() {
    return this.itemChildren.content.reduce((e3, t3) => e3 + (t3.textContent || "").trim(), "");
  }
  get focusElement() {
    return this;
  }
  get hasIcon() {
    return this.slotContentIsPresent;
  }
  get itemChildren() {
    if (!this.iconSlot || !this.contentSlot)
      return { icon: [], content: [] };
    if (this._itemChildren)
      return this._itemChildren;
    const e3 = this.iconSlot.assignedElements().map((i) => {
      const o2 = i.cloneNode(true);
      return o2.removeAttribute("slot"), o2.classList.toggle("icon"), o2;
    }), t3 = this.contentSlot.assignedNodes().map((i) => i.cloneNode(true));
    return this._itemChildren = { icon: e3, content: t3 }, this._itemChildren;
  }
  click() {
    this.disabled || this.shouldProxyClick() || super.click();
  }
  handleClickCapture(e3) {
    if (this.disabled)
      return e3.preventDefault(), e3.stopImmediatePropagation(), e3.stopPropagation(), false;
  }
  shouldProxyClick() {
    let e3 = false;
    return this.anchorElement && (this.anchorElement.click(), e3 = true), e3;
  }
  breakItemChildrenCache() {
    this._itemChildren = void 0, this.triggerUpdate();
  }
  renderSubmenu() {
    const e3 = d`
            <slot
                name="submenu"
                @slotchange=${this.manageSubmenu}
                @sp-menu-item-added-or-updated=${{ handleEvent: (t3) => {
      t3.clear(t3.item);
    }, capture: true }}
                @focusin=${(t3) => t3.stopPropagation()}
            ></slot>
        `;
    return this.hasSubmenu ? (import("/libs/features/spectrum-web-components/dist/overlay.js"), import("/libs/features/spectrum-web-components/dist/popover.js"), d`
            <sp-overlay
                .triggerElement=${this}
                ?disabled=${!this.hasSubmenu}
                ?open=${this.hasSubmenu && this.open}
                .placement=${this.isLTR ? "right-start" : "left-start"}
                .offset=${[-10, -4]}
                .type=${"auto"}
                @close=${(t3) => t3.stopPropagation()}
            >
                <sp-popover
                    @change=${(t3) => {
      this.handleSubmenuChange(t3), this.open = false;
    }}
                    @pointerenter=${this.handleSubmenuPointerenter}
                    @pointerleave=${this.handleSubmenuPointerleave}
                    @sp-menu-item-added-or-updated=${(t3) => t3.stopPropagation()}
                >
                    ${e3}
                </sp-popover>
            </sp-overlay>
            <sp-icon-chevron100
                class="spectrum-UIIcon-ChevronRight100 chevron icon"
            ></sp-icon-chevron100>
        `) : e3;
  }
  render() {
    return d`
            ${this.selected ? d`
                      <sp-icon-checkmark100
                          id="selected"
                          class="spectrum-UIIcon-Checkmark100 
                            icon 
                            checkmark
                            ${this.hasIcon ? "checkmark--withAdjacentIcon" : ""}"
                      ></sp-icon-checkmark100>
                  ` : h}
            <slot name="icon"></slot>
            <div id="label">
                <slot id="slot"></slot>
            </div>
            <slot name="description"></slot>
            <slot name="value"></slot>
            ${this.href && this.href.length > 0 ? super.renderAnchor({ id: "button", ariaHidden: true, className: "button anchor hidden" }) : h}
            ${this.renderSubmenu()}
        `;
  }
  manageSubmenu(e3) {
    const t3 = e3.target.assignedElements({ flatten: true });
    this.hasSubmenu = !!t3.length, this.hasSubmenu && this.setAttribute("aria-haspopup", "true");
  }
  handleRemoveActive() {
    this.open || (this.active = false);
  }
  handlePointerdown(e3) {
    this.active = true, e3.target === this && this.hasSubmenu && this.open && (this.addEventListener("focus", this.handleSubmenuFocus, { once: true }), this.overlayElement.addEventListener("beforetoggle", this.handleBeforetoggle));
  }
  firstUpdated(e3) {
    super.firstUpdated(e3), this.setAttribute("tabindex", "-1"), this.addEventListener("pointerdown", this.handlePointerdown), this.addEventListener("pointerenter", this.closeOverlaysForRoot), this.hasAttribute("id") || (this.id = `sp-menu-item-${crypto.randomUUID().slice(0, 8)}`);
  }
  closeOverlaysForRoot() {
    var e3;
    this.open || (e3 = this.menuData.parentMenu) == null || e3.closeDescendentOverlays();
  }
  handleSubmenuClick(e3) {
    e3.composedPath().includes(this.overlayElement) || this.openOverlay();
  }
  handleSubmenuFocus() {
    requestAnimationFrame(() => {
      this.overlayElement.open = this.open;
    });
  }
  handlePointerenter() {
    if (this.leaveTimeout) {
      clearTimeout(this.leaveTimeout), delete this.leaveTimeout;
      return;
    }
    this.openOverlay();
  }
  handlePointerleave() {
    this.open && !this.recentlyLeftChild && (this.leaveTimeout = setTimeout(() => {
      delete this.leaveTimeout, this.open = false;
    }, C));
  }
  handleSubmenuChange(e3) {
    var t3;
    e3.stopPropagation(), (t3 = this.menuData.selectionRoot) == null || t3.selectOrToggleItem(this);
  }
  handleSubmenuPointerenter() {
    this.recentlyLeftChild = true;
  }
  async handleSubmenuPointerleave() {
    requestAnimationFrame(() => {
      this.recentlyLeftChild = false;
    });
  }
  handleSubmenuOpen(e3) {
    this.focused = false;
    const t3 = e3.composedPath().find((i) => i !== this.overlayElement && i.localName === "sp-overlay");
    this.overlayElement.parentOverlayToForceClose = t3;
  }
  cleanup() {
    this.open = false, this.active = false;
  }
  async openOverlay() {
    !this.hasSubmenu || this.open || this.disabled || (this.open = true, this.active = true, this.setAttribute("aria-expanded", "true"), this.addEventListener("sp-closed", this.cleanup, { once: true }));
  }
  updateAriaSelected() {
    const e3 = this.getAttribute("role");
    e3 === "option" ? this.setAttribute("aria-selected", this.selected ? "true" : "false") : (e3 === "menuitemcheckbox" || e3 === "menuitemradio") && this.setAttribute("aria-checked", this.selected ? "true" : "false");
  }
  setRole(e3) {
    this.setAttribute("role", e3), this.updateAriaSelected();
  }
  updated(e3) {
    var t3, i, o2;
    if (super.updated(e3), e3.has("label") && (this.label || typeof e3.get("label") != "undefined") && this.setAttribute("aria-label", this.label || ""), e3.has("active") && (this.active || typeof e3.get("active") != "undefined"))
      if (this.active) {
        (t3 = this.menuData.selectionRoot) == null || t3.closeDescendentOverlays(), this.abortControllerPointer = new AbortController();
        const n = { signal: this.abortControllerPointer.signal };
        this.addEventListener("pointerup", this.handleRemoveActive, n), this.addEventListener("pointerleave", this.handleRemoveActive, n), this.addEventListener("pointercancel", this.handleRemoveActive, n);
      } else
        (i = this.abortControllerPointer) == null || i.abort();
    if (this.anchorElement && (this.anchorElement.addEventListener("focus", this.proxyFocus), this.anchorElement.tabIndex = -1), e3.has("selected") && this.updateAriaSelected(), e3.has("hasSubmenu") && (this.hasSubmenu || typeof e3.get("hasSubmenu") != "undefined"))
      if (this.hasSubmenu) {
        this.abortControllerSubmenu = new AbortController();
        const n = { signal: this.abortControllerSubmenu.signal };
        this.addEventListener("click", this.handleSubmenuClick, n), this.addEventListener("pointerenter", this.handlePointerenter, n), this.addEventListener("pointerleave", this.handlePointerleave, n), this.addEventListener("sp-opened", this.handleSubmenuOpen, n);
      } else
        (o2 = this.abortControllerSubmenu) == null || o2.abort();
  }
  connectedCallback() {
    super.connectedCallback(), this.triggerUpdate();
  }
  disconnectedCallback() {
    this.menuData.cleanupSteps.forEach((e3) => e3(this)), super.disconnectedCallback();
  }
  async triggerUpdate() {
    this.willDispatchUpdate || (this.willDispatchUpdate = true, await new Promise((e3) => requestAnimationFrame(e3)), this.dispatchUpdate());
  }
  dispatchUpdate() {
    this.dispatchEvent(new MenuItemAddedOrUpdatedEvent(this)), this.willDispatchUpdate = false;
  }
};
r([s({ type: Boolean, reflect: true })], MenuItem.prototype, "active", 2), r([s({ type: Boolean, reflect: true })], MenuItem.prototype, "focused", 2), r([s({ type: Boolean, reflect: true })], MenuItem.prototype, "selected", 2), r([s({ type: String })], MenuItem.prototype, "value", 1), r([s({ type: Boolean, reflect: true, attribute: "has-submenu" })], MenuItem.prototype, "hasSubmenu", 2), r([u("slot:not([name])")], MenuItem.prototype, "contentSlot", 2), r([u('slot[name="icon"]')], MenuItem.prototype, "iconSlot", 2), r([s({ type: Boolean, reflect: true, attribute: "no-wrap", hasChanged() {
  return false;
} })], MenuItem.prototype, "noWrap", 2), r([u(".anchor")], MenuItem.prototype, "anchorElement", 2), r([u("sp-overlay")], MenuItem.prototype, "overlayElement", 2), r([s({ type: Boolean, reflect: true })], MenuItem.prototype, "open", 2);

// node_modules/@spectrum-web-components/menu/sp-menu-item.js
import { defineElement as m3 } from "/libs/features/spectrum-web-components/dist/base.js";
m3("sp-menu-item", MenuItem);
