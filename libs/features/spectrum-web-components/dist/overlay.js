/* Generated by Milo*/
/* eslint-disable */
var __getOwnPropNames = Object.getOwnPropertyNames;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};

// node_modules/@spectrum-web-components/overlay/src/overlay-timer.js
var OverlayTimer;
var init_overlay_timer = __esm({
  "node_modules/@spectrum-web-components/overlay/src/overlay-timer.js"() {
    "use strict";
    OverlayTimer = class {
      constructor(e4 = {}) {
        this.warmUpDelay = 1e3;
        this.coolDownDelay = 1e3;
        this.isWarm = false;
        this.timeout = 0;
        Object.assign(this, e4);
      }
      async openTimer(e4) {
        if (this.cancelCooldownTimer(), !this.component || e4 !== this.component)
          return this.component && (this.close(this.component), this.cancelCooldownTimer()), this.component = e4, this.isWarm ? false : (this.promise = new Promise((o4) => {
            this.resolve = o4, this.timeout = window.setTimeout(() => {
              this.resolve && (this.resolve(false), this.isWarm = true);
            }, this.warmUpDelay);
          }), this.promise);
        if (this.promise)
          return this.promise;
        throw new Error("Inconsistent state");
      }
      close(e4) {
        this.component && this.component === e4 && (this.resetCooldownTimer(), this.timeout > 0 && (clearTimeout(this.timeout), this.timeout = 0), this.resolve && (this.resolve(true), delete this.resolve), delete this.promise, delete this.component);
      }
      resetCooldownTimer() {
        this.isWarm && (this.cooldownTimeout && window.clearTimeout(this.cooldownTimeout), this.cooldownTimeout = window.setTimeout(() => {
          this.isWarm = false, delete this.cooldownTimeout;
        }, this.coolDownDelay));
      }
      cancelCooldownTimer() {
        this.cooldownTimeout && window.clearTimeout(this.cooldownTimeout), delete this.cooldownTimeout;
      }
    };
  }
});

// node_modules/@spectrum-web-components/overlay/src/AbstractOverlay.js
import { SpectrumElement as E } from "/libs/features/spectrum-web-components/dist/base.js";
import { reparentChildren as T } from "/libs/features/spectrum-web-components/dist/shared.js";
function nextFrame() {
  return new Promise((o4) => requestAnimationFrame(() => o4()));
}
function forcePaint() {
  document.body.offsetHeight;
}
var overlayTimer, noop, BeforetoggleClosedEvent, BeforetoggleOpenEvent, guaranteedAllTransitionend, AbstractOverlay;
var init_AbstractOverlay = __esm({
  "node_modules/@spectrum-web-components/overlay/src/AbstractOverlay.js"() {
    "use strict";
    init_overlay_timer();
    overlayTimer = new OverlayTimer();
    noop = () => {
    };
    BeforetoggleClosedEvent = class extends Event {
      constructor() {
        super("beforetoggle", { bubbles: false, composed: false });
        this.currentState = "open";
        this.newState = "closed";
      }
    };
    BeforetoggleOpenEvent = class extends Event {
      constructor() {
        super("beforetoggle", { bubbles: false, composed: false });
        this.currentState = "closed";
        this.newState = "open";
      }
    };
    guaranteedAllTransitionend = (o4, d2, t) => {
      const a3 = new AbortController(), n3 = /* @__PURE__ */ new Map(), c3 = () => {
        a3.abort(), t();
      };
      let u5, s2;
      const e4 = requestAnimationFrame(() => {
        u5 = requestAnimationFrame(() => {
          s2 = requestAnimationFrame(() => {
            c3();
          });
        });
      }), m4 = (r2) => {
        r2.target === o4 && (n3.set(r2.propertyName, n3.get(r2.propertyName) - 1), n3.get(r2.propertyName) || n3.delete(r2.propertyName), n3.size === 0 && c3());
      }, y = (r2) => {
        r2.target === o4 && (n3.has(r2.propertyName) || n3.set(r2.propertyName, 0), n3.set(r2.propertyName, n3.get(r2.propertyName) + 1), cancelAnimationFrame(e4), cancelAnimationFrame(u5), cancelAnimationFrame(s2));
      };
      o4.addEventListener("transitionrun", y, { signal: a3.signal }), o4.addEventListener("transitionend", m4, { signal: a3.signal }), o4.addEventListener("transitioncancel", m4, { signal: a3.signal }), d2();
    };
    AbstractOverlay = class extends E {
      constructor() {
        super(...arguments);
        this.dispose = noop;
        this.offset = 6;
        this.willPreventClose = false;
      }
      async applyFocus(t, a3) {
      }
      get delayed() {
        return false;
      }
      set delayed(t) {
      }
      async ensureOnDOM(t) {
      }
      async makeTransition(t) {
        return null;
      }
      async manageDelay(t) {
      }
      async manageDialogOpen() {
      }
      async managePopoverOpen() {
      }
      managePosition() {
      }
      get open() {
        return false;
      }
      set open(t) {
      }
      get state() {
        return "closed";
      }
      set state(t) {
      }
      manuallyKeepOpen() {
      }
      static update() {
        const t = new CustomEvent("sp-update-overlays", { bubbles: true, composed: true, cancelable: true });
        document.dispatchEvent(t);
      }
      static async open(t, a3, n3, c3) {
        var g4, b2, f3, O2;
        await Promise.resolve().then(() => (init_sp_overlay(), sp_overlay_exports));
        const u5 = arguments.length === 2, s2 = n3 || t, e4 = new this();
        let m4 = false;
        e4.dispose = () => {
          e4.addEventListener("sp-closed", () => {
            m4 || (y(), m4 = true), requestAnimationFrame(() => {
              e4.remove();
            });
          }), e4.open = false, e4.dispose = noop;
        };
        const y = T([s2], e4, { position: "beforeend", prepareCallback: (i2) => {
          const v3 = i2.slot;
          return i2.removeAttribute("slot"), () => {
            i2.slot = v3;
          };
        } });
        if (!u5 && s2 && c3) {
          const i2 = t, v3 = a3, p4 = c3;
          return e4.delayed = p4.delayed || s2.hasAttribute("delayed"), e4.receivesFocus = (g4 = p4.receivesFocus) != null ? g4 : "auto", e4.triggerElement = p4.virtualTrigger || i2, e4.type = v3 === "modal" ? "modal" : v3 === "hover" ? "hint" : "auto", e4.offset = (b2 = p4.offset) != null ? b2 : 6, e4.placement = p4.placement, e4.willPreventClose = !!p4.notImmediatelyClosable, i2.insertAdjacentElement("afterend", e4), await e4.updateComplete, e4.open = true, e4.dispose;
        }
        const l2 = a3;
        return e4.append(s2), e4.delayed = l2.delayed || s2.hasAttribute("delayed"), e4.receivesFocus = (f3 = l2.receivesFocus) != null ? f3 : "auto", e4.triggerElement = l2.trigger || null, e4.type = l2.type || "modal", e4.offset = (O2 = l2.offset) != null ? O2 : 6, e4.placement = l2.placement, e4.willPreventClose = !!l2.notImmediatelyClosable, e4.updateComplete.then(() => {
          e4.open = true;
        }), e4;
      }
    };
  }
});

// node_modules/@spectrum-web-components/overlay/src/VirtualTrigger.js
var VirtualTrigger;
var init_VirtualTrigger = __esm({
  "node_modules/@spectrum-web-components/overlay/src/VirtualTrigger.js"() {
    "use strict";
    init_AbstractOverlay();
    VirtualTrigger = class {
      constructor(t, i2) {
        this.x = 0;
        this.y = 0;
        this.x = t, this.y = i2;
      }
      updateBoundingClientRect(t, i2) {
        this.x = t, this.y = i2, AbstractOverlay.update();
      }
      getBoundingClientRect() {
        return { width: 0, height: 0, top: this.y, right: this.x, y: this.y, x: this.x, bottom: this.y, left: this.x, toJSON() {
        } };
      }
    };
  }
});

// node_modules/@spectrum-web-components/overlay/src/OverlayDialog.js
import { firstFocusableIn as d, firstFocusableSlottedIn as m } from "/libs/features/spectrum-web-components/dist/shared.js";
import { userFocusableSelector as v } from "/libs/features/spectrum-web-components/dist/shared.js";
function OverlayDialog(a3) {
  class c3 extends a3 {
    async manageDialogOpen() {
      const e4 = this.open;
      if (await this.managePosition(), this.open !== e4 || this.open !== e4)
        return;
      const o4 = await this.dialogMakeTransition(e4);
      this.open === e4 && await this.dialogApplyFocus(e4, o4);
    }
    async dialogMakeTransition(e4) {
      let o4 = null;
      const p4 = (t, s2) => async () => {
        if (typeof t.open != "undefined" && (t.open = e4), !e4) {
          const i2 = () => {
            t.removeEventListener("close", i2), l2(t, s2);
          };
          t.addEventListener("close", i2);
        }
        if (s2 > 0)
          return;
        const n3 = e4 ? BeforetoggleOpenEvent : BeforetoggleClosedEvent;
        this.dispatchEvent(new n3()), e4 && (t.matches(v) && (o4 = t), o4 = o4 || d(t), o4 || t.querySelectorAll("slot").forEach((r2) => {
          o4 || (o4 = m(r2));
        }), !(!this.isConnected || this.dialogEl.open) && this.dialogEl.showModal());
      }, l2 = (t, s2) => () => {
        if (this.open !== e4)
          return;
        const n3 = e4 ? "sp-opened" : "sp-closed";
        if (s2 > 0) {
          t.dispatchEvent(new CustomEvent(n3, { bubbles: false, composed: false, detail: { interaction: this.type } }));
          return;
        }
        if (!this.isConnected || e4 !== this.open)
          return;
        const i2 = () => {
          const r2 = this.triggerElement instanceof VirtualTrigger;
          this.dispatchEvent(new Event(n3, { bubbles: r2, composed: r2 })), t.dispatchEvent(new Event(n3, { bubbles: false, composed: false })), this.triggerElement && !r2 && this.triggerElement.dispatchEvent(new CustomEvent(n3, { bubbles: true, composed: true, detail: { interaction: this.type } })), this.state = e4 ? "opened" : "closed";
        };
        !e4 && this.dialogEl.open ? (this.dialogEl.addEventListener("close", () => {
          i2();
        }, { once: true }), this.dialogEl.close()) : i2();
      };
      return this.elements.forEach((t, s2) => {
        guaranteedAllTransitionend(t, p4(t, s2), l2(t, s2));
      }), o4;
    }
    async dialogApplyFocus(e4, o4) {
      this.applyFocus(e4, o4);
    }
  }
  return c3;
}
var init_OverlayDialog = __esm({
  "node_modules/@spectrum-web-components/overlay/src/OverlayDialog.js"() {
    "use strict";
    init_VirtualTrigger();
    init_AbstractOverlay();
  }
});

// node_modules/@spectrum-web-components/overlay/src/OverlayPopover.js
import { firstFocusableIn as f, firstFocusableSlottedIn as E2 } from "/libs/features/spectrum-web-components/dist/shared.js";
import { userFocusableSelector as g } from "/libs/features/spectrum-web-components/dist/shared.js";
function u(l2) {
  let a3 = false;
  try {
    a3 = l2.matches(":popover-open");
  } catch (e4) {
  }
  let c3 = false;
  try {
    c3 = l2.matches(":open");
  } catch (e4) {
  }
  return a3 || c3;
}
function OverlayPopover(l2) {
  class a3 extends l2 {
    async manageDelay(e4) {
      if (e4 === false || e4 !== this.open) {
        overlayTimer.close(this);
        return;
      }
      this.delayed && await overlayTimer.openTimer(this) && (this.open = !e4);
    }
    async shouldHidePopover(e4) {
      if (e4 && this.open !== e4)
        return;
      const o4 = async ({ newState: i2 } = {}) => {
        i2 !== "open" && await this.placementController.resetOverlayPosition();
      };
      if (!u(this.dialogEl)) {
        o4();
        return;
      }
      this.dialogEl.addEventListener("toggle", o4, { once: true });
    }
    async shouldShowPopover(e4) {
      let o4 = false;
      try {
        o4 = this.dialogEl.matches(":popover-open");
      } catch (p4) {
      }
      let i2 = false;
      try {
        i2 = this.dialogEl.matches(":open");
      } catch (p4) {
      }
      e4 && this.open === e4 && !o4 && !i2 && this.isConnected && (this.dialogEl.showPopover(), await this.managePosition());
    }
    async ensureOnDOM(e4) {
      await nextFrame(), await this.shouldHidePopover(e4), await this.shouldShowPopover(e4), await nextFrame();
    }
    async makeTransition(e4) {
      if (this.open !== e4)
        return null;
      let o4 = null;
      const i2 = (t, s2) => () => {
        if (typeof t.open != "undefined" && (t.open = e4), s2 === 0) {
          const r2 = e4 ? BeforetoggleOpenEvent : BeforetoggleClosedEvent;
          this.dispatchEvent(new r2());
        }
        if (!e4 || (t.matches(g) && (o4 = t), o4 = o4 || f(t), o4))
          return;
        t.querySelectorAll("slot").forEach((r2) => {
          o4 || (o4 = E2(r2));
        });
      }, p4 = (t, s2) => async () => {
        if (this.open !== e4)
          return;
        const n3 = e4 ? "sp-opened" : "sp-closed";
        if (s2 > 0) {
          t.dispatchEvent(new CustomEvent(n3, { bubbles: false, composed: false, detail: { interaction: this.type } }));
          return;
        }
        const r2 = async () => {
          if (this.open !== e4)
            return;
          await nextFrame();
          const d2 = this.triggerElement instanceof VirtualTrigger;
          this.dispatchEvent(new Event(n3, { bubbles: d2, composed: d2 })), t.dispatchEvent(new CustomEvent(n3, { bubbles: false, composed: false, detail: { interaction: this.type } })), this.triggerElement && !d2 && this.triggerElement.dispatchEvent(new CustomEvent(n3, { bubbles: true, composed: true, detail: { interaction: this.type } })), this.state = e4 ? "opened" : "closed";
        };
        if (this.open !== e4)
          return;
        const v3 = u(this.dialogEl);
        e4 !== true && v3 && this.isConnected ? (this.dialogEl.addEventListener("beforetoggle", () => {
          r2();
        }, { once: true }), this.dialogEl.hidePopover()) : r2();
      };
      return this.elements.forEach((t, s2) => {
        guaranteedAllTransitionend(t, i2(t, s2), p4(t, s2));
      }), o4;
    }
  }
  return a3;
}
var init_OverlayPopover = __esm({
  "node_modules/@spectrum-web-components/overlay/src/OverlayPopover.js"() {
    "use strict";
    init_VirtualTrigger();
    init_AbstractOverlay();
  }
});

// node_modules/@spectrum-web-components/overlay/src/OverlayNoPopover.js
import { firstFocusableIn as p, firstFocusableSlottedIn as u2 } from "/libs/features/spectrum-web-components/dist/shared.js";
import { userFocusableSelector as E3 } from "/libs/features/spectrum-web-components/dist/shared.js";
function OverlayNoPopover(l2) {
  class a3 extends l2 {
    async managePopoverOpen() {
      await this.managePosition();
    }
    async manageDelay(e4) {
      if (e4 === false || e4 !== this.open) {
        overlayTimer.close(this);
        return;
      }
      this.delayed && await overlayTimer.openTimer(this) && (this.open = !e4);
    }
    async ensureOnDOM(e4) {
      forcePaint();
    }
    async makeTransition(e4) {
      if (this.open !== e4)
        return null;
      let o4 = null;
      const c3 = (t, n3) => () => {
        if (e4 !== this.open)
          return;
        if (typeof t.open != "undefined" && (t.open = e4), n3 === 0) {
          const r2 = e4 ? BeforetoggleOpenEvent : BeforetoggleClosedEvent;
          this.dispatchEvent(new r2());
        }
        if (e4 !== true || (t.matches(E3) && (o4 = t), o4 = o4 || p(t), o4))
          return;
        t.querySelectorAll("slot").forEach((r2) => {
          o4 || (o4 = u2(r2));
        });
      }, m4 = (t, n3) => () => {
        if (this.open !== e4)
          return;
        const s2 = e4 ? "sp-opened" : "sp-closed";
        if (t.dispatchEvent(new CustomEvent(s2, { bubbles: false, composed: false, detail: { interaction: this.type } })), n3 > 0)
          return;
        const r2 = this.triggerElement instanceof VirtualTrigger;
        this.dispatchEvent(new Event(s2, { bubbles: r2, composed: r2 })), this.triggerElement && !r2 && this.triggerElement.dispatchEvent(new CustomEvent(s2, { bubbles: true, composed: true, detail: { interaction: this.type } })), this.state = e4 ? "opened" : "closed";
      };
      return this.elements.forEach((t, n3) => {
        guaranteedAllTransitionend(t, c3(t, n3), m4(t, n3));
      }), o4;
    }
  }
  return a3;
}
var init_OverlayNoPopover = __esm({
  "node_modules/@spectrum-web-components/overlay/src/OverlayNoPopover.js"() {
    "use strict";
    init_VirtualTrigger();
    init_AbstractOverlay();
  }
});

// node_modules/@spectrum-web-components/overlay/src/OverlayStack.js
var a, c, overlayStack;
var init_OverlayStack = __esm({
  "node_modules/@spectrum-web-components/overlay/src/OverlayStack.js"() {
    "use strict";
    a = "showPopover" in document.createElement("div");
    c = class {
      constructor() {
        this.root = document.body;
        this.stack = [];
        this.handlePointerdown = (t) => {
          this.pointerdownPath = t.composedPath();
        };
        this.handlePointerup = () => {
          var i2;
          if (!this.stack.length || !((i2 = this.pointerdownPath) != null && i2.length))
            return;
          const t = this.pointerdownPath;
          this.pointerdownPath = void 0;
          const e4 = this.stack.filter((n3) => !t.find((o4) => o4 === n3 || o4 === (n3 == null ? void 0 : n3.triggerElement)) && !n3.shouldPreventClose() && n3.type !== "manual");
          e4.reverse(), e4.forEach((n3) => {
            this.closeOverlay(n3);
            let s2 = n3.parentOverlayToForceClose;
            for (; s2; )
              this.closeOverlay(s2), s2 = s2.parentOverlayToForceClose;
          });
        };
        this.handleBeforetoggle = (t) => {
          const { target: e4, newState: i2 } = t;
          i2 !== "open" && this.closeOverlay(e4);
        };
        this.handleKeydown = (t) => {
          if (t.code !== "Escape")
            return;
          const e4 = this.stack.at(-1);
          if ((e4 == null ? void 0 : e4.type) === "page") {
            t.preventDefault();
            return;
          }
          a || this.stack.length && e4 && this.closeOverlay(e4);
        };
        this.bindEvents();
      }
      get document() {
        return this.root.ownerDocument || document;
      }
      bindEvents() {
        this.document.addEventListener("pointerdown", this.handlePointerdown), this.document.addEventListener("pointerup", this.handlePointerup), this.document.addEventListener("keydown", this.handleKeydown);
      }
      closeOverlay(t) {
        const e4 = this.stack.indexOf(t);
        e4 > -1 && this.stack.splice(e4, 1), t.open = false;
      }
      overlaysByTriggerElement(t) {
        return this.stack.filter((e4) => e4.triggerElement === t);
      }
      add(t) {
        if (this.stack.includes(t)) {
          const e4 = this.stack.indexOf(t);
          e4 > -1 && (this.stack.splice(e4, 1), this.stack.push(t));
          return;
        }
        if (t.type === "auto" || t.type === "modal" || t.type === "page") {
          const e4 = "sp-overlay-query-path", i2 = new Event(e4, { composed: true, bubbles: true });
          t.addEventListener(e4, (n3) => {
            const s2 = n3.composedPath();
            this.stack.forEach((o4) => {
              !s2.find((r2) => r2 === o4) && o4.type !== "manual" && this.closeOverlay(o4);
            });
          }, { once: true }), t.dispatchEvent(i2);
        } else
          t.type === "hint" && this.stack.forEach((e4) => {
            e4.type === "hint" && this.closeOverlay(e4);
          });
        requestAnimationFrame(() => {
          this.stack.push(t), t.addEventListener("beforetoggle", this.handleBeforetoggle, { once: true });
        });
      }
      remove(t) {
        this.closeOverlay(t);
      }
    };
    overlayStack = new c();
  }
});

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
var min, max, round, floor, createCoords, oppositeSideMap, oppositeAlignmentMap;
var init_floating_ui_utils = __esm({
  "node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs"() {
    min = Math.min;
    max = Math.max;
    round = Math.round;
    floor = Math.floor;
    createCoords = (v3) => ({
      x: v3,
      y: v3
    });
    oppositeSideMap = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    oppositeAlignmentMap = {
      start: "end",
      end: "start"
    };
  }
});

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    ...rects.floating,
    x,
    y
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var computePosition, arrow, flip, offset, shift, size;
var init_floating_ui_core = __esm({
  "node_modules/@floating-ui/core/dist/floating-ui.core.mjs"() {
    init_floating_ui_utils();
    init_floating_ui_utils();
    computePosition = async (reference, floating, config) => {
      const {
        placement = "bottom",
        strategy = "absolute",
        middleware = [],
        platform: platform2
      } = config;
      const validMiddleware = middleware.filter(Boolean);
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
      let rects = await platform2.getElementRects({
        reference,
        floating,
        strategy
      });
      let {
        x,
        y
      } = computeCoordsFromPlacement(rects, placement, rtl);
      let statefulPlacement = placement;
      let middlewareData = {};
      let resetCount = 0;
      for (let i2 = 0; i2 < validMiddleware.length; i2++) {
        const {
          name,
          fn
        } = validMiddleware[i2];
        const {
          x: nextX,
          y: nextY,
          data,
          reset
        } = await fn({
          x,
          y,
          initialPlacement: placement,
          placement: statefulPlacement,
          strategy,
          middlewareData,
          rects,
          platform: platform2,
          elements: {
            reference,
            floating
          }
        });
        x = nextX != null ? nextX : x;
        y = nextY != null ? nextY : y;
        middlewareData = {
          ...middlewareData,
          [name]: {
            ...middlewareData[name],
            ...data
          }
        };
        if (reset && resetCount <= 50) {
          resetCount++;
          if (typeof reset === "object") {
            if (reset.placement) {
              statefulPlacement = reset.placement;
            }
            if (reset.rects) {
              rects = reset.rects === true ? await platform2.getElementRects({
                reference,
                floating,
                strategy
              }) : reset.rects;
            }
            ({
              x,
              y
            } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
          }
          i2 = -1;
          continue;
        }
      }
      return {
        x,
        y,
        placement: statefulPlacement,
        strategy,
        middlewareData
      };
    };
    arrow = (options) => ({
      name: "arrow",
      options,
      async fn(state) {
        const {
          x,
          y,
          placement,
          rects,
          platform: platform2,
          elements,
          middlewareData
        } = state;
        const {
          element,
          padding = 0
        } = evaluate(options, state) || {};
        if (element == null) {
          return {};
        }
        const paddingObject = getPaddingObject(padding);
        const coords = {
          x,
          y
        };
        const axis = getAlignmentAxis(placement);
        const length = getAxisLength(axis);
        const arrowDimensions = await platform2.getDimensions(element);
        const isYAxis = axis === "y";
        const minProp = isYAxis ? "top" : "left";
        const maxProp = isYAxis ? "bottom" : "right";
        const clientProp = isYAxis ? "clientHeight" : "clientWidth";
        const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
        const startDiff = coords[axis] - rects.reference[axis];
        const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
        let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
        if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
          clientSize = elements.floating[clientProp] || rects.floating[length];
        }
        const centerToReference = endDiff / 2 - startDiff / 2;
        const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
        const minPadding = min(paddingObject[minProp], largestPossiblePadding);
        const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
        const min$1 = minPadding;
        const max2 = clientSize - arrowDimensions[length] - maxPadding;
        const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
        const offset2 = clamp(min$1, center, max2);
        const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset2 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
        const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
        return {
          [axis]: coords[axis] + alignmentOffset,
          data: {
            [axis]: offset2,
            centerOffset: center - offset2 - alignmentOffset,
            ...shouldAddOffset && {
              alignmentOffset
            }
          },
          reset: shouldAddOffset
        };
      }
    });
    flip = function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "flip",
        options,
        async fn(state) {
          var _middlewareData$arrow, _middlewareData$flip;
          const {
            placement,
            middlewareData,
            rects,
            initialPlacement,
            platform: platform2,
            elements
          } = state;
          const {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = true,
            fallbackPlacements: specifiedFallbackPlacements,
            fallbackStrategy = "bestFit",
            fallbackAxisSideDirection = "none",
            flipAlignment = true,
            ...detectOverflowOptions
          } = evaluate(options, state);
          if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
            return {};
          }
          const side = getSide(placement);
          const isBasePlacement = getSide(initialPlacement) === initialPlacement;
          const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
          const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
          if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
            fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
          }
          const placements2 = [initialPlacement, ...fallbackPlacements];
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const overflows = [];
          let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
          if (checkMainAxis) {
            overflows.push(overflow[side]);
          }
          if (checkCrossAxis) {
            const sides2 = getAlignmentSides(placement, rects, rtl);
            overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
          }
          overflowsData = [...overflowsData, {
            placement,
            overflows
          }];
          if (!overflows.every((side2) => side2 <= 0)) {
            var _middlewareData$flip2, _overflowsData$filter;
            const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
            const nextPlacement = placements2[nextIndex];
            if (nextPlacement) {
              return {
                data: {
                  index: nextIndex,
                  overflows: overflowsData
                },
                reset: {
                  placement: nextPlacement
                }
              };
            }
            let resetPlacement = (_overflowsData$filter = overflowsData.filter((d2) => d2.overflows[0] <= 0).sort((a3, b2) => a3.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
            if (!resetPlacement) {
              switch (fallbackStrategy) {
                case "bestFit": {
                  var _overflowsData$map$so;
                  const placement2 = (_overflowsData$map$so = overflowsData.map((d2) => [d2.placement, d2.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a3, b2) => a3[1] - b2[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
                  if (placement2) {
                    resetPlacement = placement2;
                  }
                  break;
                }
                case "initialPlacement":
                  resetPlacement = initialPlacement;
                  break;
              }
            }
            if (placement !== resetPlacement) {
              return {
                reset: {
                  placement: resetPlacement
                }
              };
            }
          }
          return {};
        }
      };
    };
    offset = function(options) {
      if (options === void 0) {
        options = 0;
      }
      return {
        name: "offset",
        options,
        async fn(state) {
          const {
            x,
            y
          } = state;
          const diffCoords = await convertValueToCoords(state, options);
          return {
            x: x + diffCoords.x,
            y: y + diffCoords.y,
            data: diffCoords
          };
        }
      };
    };
    shift = function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "shift",
        options,
        async fn(state) {
          const {
            x,
            y,
            placement
          } = state;
          const {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = false,
            limiter = {
              fn: (_ref) => {
                let {
                  x: x2,
                  y: y2
                } = _ref;
                return {
                  x: x2,
                  y: y2
                };
              }
            },
            ...detectOverflowOptions
          } = evaluate(options, state);
          const coords = {
            x,
            y
          };
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const crossAxis = getSideAxis(getSide(placement));
          const mainAxis = getOppositeAxis(crossAxis);
          let mainAxisCoord = coords[mainAxis];
          let crossAxisCoord = coords[crossAxis];
          if (checkMainAxis) {
            const minSide = mainAxis === "y" ? "top" : "left";
            const maxSide = mainAxis === "y" ? "bottom" : "right";
            const min2 = mainAxisCoord + overflow[minSide];
            const max2 = mainAxisCoord - overflow[maxSide];
            mainAxisCoord = clamp(min2, mainAxisCoord, max2);
          }
          if (checkCrossAxis) {
            const minSide = crossAxis === "y" ? "top" : "left";
            const maxSide = crossAxis === "y" ? "bottom" : "right";
            const min2 = crossAxisCoord + overflow[minSide];
            const max2 = crossAxisCoord - overflow[maxSide];
            crossAxisCoord = clamp(min2, crossAxisCoord, max2);
          }
          const limitedCoords = limiter.fn({
            ...state,
            [mainAxis]: mainAxisCoord,
            [crossAxis]: crossAxisCoord
          });
          return {
            ...limitedCoords,
            data: {
              x: limitedCoords.x - x,
              y: limitedCoords.y - y
            }
          };
        }
      };
    };
    size = function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "size",
        options,
        async fn(state) {
          const {
            placement,
            rects,
            platform: platform2,
            elements
          } = state;
          const {
            apply = () => {
            },
            ...detectOverflowOptions
          } = evaluate(options, state);
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const side = getSide(placement);
          const alignment = getAlignment(placement);
          const isYAxis = getSideAxis(placement) === "y";
          const {
            width,
            height
          } = rects.floating;
          let heightSide;
          let widthSide;
          if (side === "top" || side === "bottom") {
            heightSide = side;
            widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
          } else {
            widthSide = side;
            heightSide = alignment === "end" ? "top" : "bottom";
          }
          const overflowAvailableHeight = height - overflow[heightSide];
          const overflowAvailableWidth = width - overflow[widthSide];
          const noShift = !state.middlewareData.shift;
          let availableHeight = overflowAvailableHeight;
          let availableWidth = overflowAvailableWidth;
          if (isYAxis) {
            const maximumClippingWidth = width - overflow.left - overflow.right;
            availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
          } else {
            const maximumClippingHeight = height - overflow.top - overflow.bottom;
            availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
          }
          if (noShift && !alignment) {
            const xMin = max(overflow.left, 0);
            const xMax = max(overflow.right, 0);
            const yMin = max(overflow.top, 0);
            const yMax = max(overflow.bottom, 0);
            if (isYAxis) {
              availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
            } else {
              availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
            }
          }
          await apply({
            ...state,
            availableWidth,
            availableHeight
          });
          const nextDimensions = await platform2.getDimensions(elements.floating);
          if (width !== nextDimensions.width || height !== nextDimensions.height) {
            return {
              reset: {
                rects: true
              }
            };
          }
          return {};
        }
      };
    };
  }
});

// node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle2(element);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
var init_floating_ui_utils_dom = __esm({
  "node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs"() {
  }
});

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentIFrame = win.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== win) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentIFrame = getWindow(currentIFrame).frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  return getCssDimensions(element);
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const window2 = getWindow(element);
  if (!isHTMLElement(element)) {
    return window2;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    clearTimeout(timeoutId);
    io && io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e4) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          resizeObserver && resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo && cleanupIo();
    resizeObserver && resizeObserver.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var noOffsets, getElementRects, platform, computePosition2;
var init_floating_ui_dom = __esm({
  "node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs"() {
    init_floating_ui_core();
    init_floating_ui_core();
    init_floating_ui_utils();
    init_floating_ui_utils_dom();
    noOffsets = /* @__PURE__ */ createCoords(0);
    getElementRects = async function(_ref) {
      let {
        reference,
        floating,
        strategy
      } = _ref;
      const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
      const getDimensionsFn = this.getDimensions;
      return {
        reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
        floating: {
          x: 0,
          y: 0,
          ...await getDimensionsFn(floating)
        }
      };
    };
    platform = {
      convertOffsetParentRelativeRectToViewportRelativeRect,
      getDocumentElement,
      getClippingRect,
      getOffsetParent,
      getElementRects,
      getClientRects,
      getDimensions,
      getScale,
      isElement,
      isRTL
    };
    computePosition2 = (reference, floating, options) => {
      const cache = /* @__PURE__ */ new Map();
      const mergedOptions = {
        platform,
        ...options
      };
      const platformWithCache = {
        ...mergedOptions.platform,
        _c: cache
      };
      return computePosition(reference, floating, {
        ...mergedOptions,
        platform: platformWithCache
      });
    };
  }
});

// node_modules/@spectrum-web-components/overlay/src/topLayerOverTransforms.js
var topLayerOverTransforms;
var init_topLayerOverTransforms = __esm({
  "node_modules/@spectrum-web-components/overlay/src/topLayerOverTransforms.js"() {
    "use strict";
    init_floating_ui_utils_dom();
    init_VirtualTrigger();
    topLayerOverTransforms = () => ({ name: "topLayer", async fn(g4) {
      const { x: s2, y: l2, elements: { reference: c3, floating: o4 } } = g4;
      let e4 = false, f3 = false, d2 = false;
      const r2 = { x: 0, y: 0 };
      try {
        e4 = e4 || o4.matches(":popover-open");
      } catch (a3) {
      }
      try {
        e4 = e4 || o4.matches(":open");
      } catch (a3) {
      }
      try {
        e4 = e4 || o4.matches(":modal");
      } catch (a3) {
      }
      f3 = e4;
      const p4 = new Event("floating-ui-dialog-test", { composed: true, bubbles: true });
      o4.addEventListener("floating-ui-dialog-test", (a3) => {
        a3.composedPath().forEach((n3) => {
          if (d2 = d2 || n3 === c3, !(n3 === o4 || n3.localName !== "dialog"))
            try {
              e4 = e4 || n3.matches(":modal");
            } catch (t) {
            }
        });
      }, { once: true }), o4.dispatchEvent(p4);
      let m4 = false;
      if (!(c3 instanceof VirtualTrigger)) {
        const a3 = d2 ? c3 : o4, n3 = isContainingBlock(a3) ? a3 : getContainingBlock(a3);
        let t = {};
        if (n3 !== null && getWindow(n3) !== n3 && (t = getComputedStyle(n3), m4 = t.transform !== "none" || t.translate !== "none" || (t.backdropFilter ? t.backdropFilter !== "none" : false) || (t.filter ? t.filter !== "none" : false) || t.willChange.search("transform") > -1 || t.willChange.search("translate") > -1 || ["paint", "layout", "strict", "content"].some((i2) => (t.contain || "").includes(i2))), e4 && m4 && n3) {
          const i2 = n3.getBoundingClientRect(), { marginInlineStart: y = "0", marginBlockStart: u5 = "0" } = t;
          r2.x = i2.x + parseFloat(y), r2.y = i2.y + parseFloat(u5);
        }
      }
      return e4 && f3 ? { x: s2 + r2.x, y: l2 + r2.y, data: r2 } : e4 ? { x: s2, y: l2, data: r2 } : { x: s2 - r2.x, y: l2 - r2.y, data: r2 };
    } });
  }
});

// node_modules/@spectrum-web-components/overlay/src/PlacementController.js
function p2(o4) {
  if (typeof o4 == "undefined")
    return 0;
  const t = window.devicePixelRatio || 1;
  return Math.round(o4 * t) / t;
}
var m2, L, A, placementUpdatedSymbol, PlacementController;
var init_PlacementController = __esm({
  "node_modules/@spectrum-web-components/overlay/src/PlacementController.js"() {
    "use strict";
    init_floating_ui_dom();
    init_topLayerOverTransforms();
    m2 = 8;
    L = 100;
    A = (o4) => {
      var e4;
      return (e4 = { left: ["right", "bottom", "top"], "left-start": ["right-start", "bottom", "top"], "left-end": ["right-end", "bottom", "top"], right: ["left", "bottom", "top"], "right-start": ["left-start", "bottom", "top"], "right-end": ["left-end", "bottom", "top"], top: ["bottom", "left", "right"], "top-start": ["bottom-start", "left", "right"], "top-end": ["bottom-end", "left", "right"], bottom: ["top", "left", "right"], "bottom-start": ["top-start", "left", "right"], "bottom-end": ["top-end", "left", "right"] }[o4]) != null ? e4 : [o4];
    };
    placementUpdatedSymbol = Symbol("placement updated");
    PlacementController = class {
      constructor(t) {
        this.originalPlacements = /* @__PURE__ */ new WeakMap();
        this.allowPlacementUpdate = false;
        this.updatePlacement = () => {
          if (!this.allowPlacementUpdate && this.options.type !== "modal" && this.cleanup) {
            this.target.dispatchEvent(new Event("close", { bubbles: true }));
            return;
          }
          this.computePlacement(), this.allowPlacementUpdate = false;
        };
        this.resetOverlayPosition = () => {
          !this.target || !this.options || (this.target.style.removeProperty("max-height"), this.target.style.removeProperty("height"), this.initialHeight = void 0, this.isConstrained = false, this.host.offsetHeight, this.computePlacement());
        };
        this.host = t, this.host.addController(this);
      }
      async placeOverlay(t = this.target, e4 = this.options) {
        if (this.target = t, this.options = e4, !t || !e4)
          return;
        const c3 = autoUpdate(e4.trigger, t, this.updatePlacement, { elementResize: false, layoutShift: false });
        this.cleanup = () => {
          var r2;
          (r2 = this.host.elements) == null || r2.forEach((s2) => {
            s2.addEventListener("sp-closed", () => {
              const a3 = this.originalPlacements.get(s2);
              a3 && s2.setAttribute("placement", a3), this.originalPlacements.delete(s2);
            }, { once: true });
          }), c3();
        };
      }
      async computePlacement() {
        var f3, g4;
        const { options: t, target: e4 } = this;
        await (document.fonts ? document.fonts.ready : Promise.resolve());
        const c3 = t.trigger instanceof HTMLElement ? flip() : flip({ padding: m2, fallbackPlacements: A(t.placement) }), [r2 = 0, s2 = 0] = Array.isArray(t == null ? void 0 : t.offset) ? t.offset : [t.offset, 0], a3 = (f3 = this.host.elements.find((i2) => i2.tipElement)) == null ? void 0 : f3.tipElement, v3 = [offset({ mainAxis: r2, crossAxis: s2 }), shift({ padding: m2 }), c3, size({ padding: m2, apply: ({ availableWidth: i2, availableHeight: h2, rects: { floating: x } }) => {
          const u5 = Math.max(L, Math.floor(h2)), l2 = x.height;
          this.initialHeight = this.isConstrained && this.initialHeight || l2, this.isConstrained = l2 < this.initialHeight || u5 <= l2;
          const b2 = this.isConstrained ? `${u5}px` : "";
          Object.assign(e4.style, { maxWidth: `${Math.floor(i2)}px`, maxHeight: b2, height: b2 });
        } }), ...a3 ? [arrow({ element: a3, padding: t.tipPadding || m2 })] : [], topLayerOverTransforms()], { x: P2, y: E4, placement: n3, middlewareData: d2 } = await computePosition2(t.trigger, e4, { placement: t.placement, middleware: v3, strategy: "fixed" });
        if (Object.assign(e4.style, { top: "0px", left: "0px", translate: `${p2(P2)}px ${p2(E4)}px` }), e4.setAttribute("actual-placement", n3), (g4 = this.host.elements) == null || g4.forEach((i2) => {
          this.originalPlacements.set(i2, i2.getAttribute("placement")), i2.setAttribute("placement", n3);
        }), a3 && d2.arrow) {
          const { x: i2, y: h2 } = d2.arrow;
          Object.assign(a3.style, { top: n3.startsWith("right") || n3.startsWith("left") ? "0px" : "", left: n3.startsWith("bottom") || n3.startsWith("top") ? "0px" : "", translate: `${p2(i2)}px ${p2(h2)}px` });
        }
      }
      hostConnected() {
        document.addEventListener("sp-update-overlays", this.resetOverlayPosition);
      }
      hostUpdated() {
        var t;
        this.host.open || ((t = this.cleanup) == null || t.call(this), this.cleanup = void 0);
      }
      hostDisconnected() {
        var t;
        (t = this.cleanup) == null || t.call(this), this.cleanup = void 0, document.removeEventListener("sp-update-overlays", this.resetOverlayPosition);
      }
    };
  }
});

// node_modules/@spectrum-web-components/overlay/src/overlay.css.js
import { css as a2 } from "/libs/features/spectrum-web-components/dist/base.js";
var o, overlay_css_default;
var init_overlay_css = __esm({
  "node_modules/@spectrum-web-components/overlay/src/overlay.css.js"() {
    "use strict";
    o = a2`
:host{--swc-overlay-animation-distance:var(
--spectrum-picker-m-texticon-popover-offset-y,var(--spectrum-global-dimension-size-75)
);display:contents;pointer-events:none}.dialog{--sp-overlay-open:true;background:none;border:0;box-sizing:border-box;display:flex;height:auto;inset:auto;left:0;margin:0;max-height:calc(100vh - 16px);max-height:calc(100dvh - 16px);max-width:calc(100vw - 16px);opacity:1!important;overflow:visible;padding:0;position:fixed;top:0}.dialog:not([is-visible]){translate:-999em -999em!important}.dialog:focus{outline:none}dialog:modal{--mod-popover-filter:var(--spectrum-popover-filter)}:host(:not([open])) .dialog{--sp-overlay-open:false}.dialog::backdrop{display:none}.dialog:before{content:"";inset:-999em;pointer-events:auto!important;position:absolute}.dialog:not(.not-immediately-closable):before{display:none}.dialog>div{width:100%}::slotted(*){pointer-events:auto}::slotted(sp-popover){position:static}::slotted(sp-tooltip){--swc-tooltip-margin:0}.dialog:not([actual-placement])[placement*=top]{margin-top:var(--swc-overlay-animation-distance);padding-block:var(--swc-overlay-animation-distance)}.dialog:not([actual-placement])[placement*=right]{margin-left:calc(var(--swc-overlay-animation-distance)*-1);padding-inline:var(--swc-overlay-animation-distance)}.dialog:not([actual-placement])[placement*=bottom]{margin-top:calc(var(--swc-overlay-animation-distance)*-1);padding-block:var(--swc-overlay-animation-distance)}.dialog:not([actual-placement])[placement*=left]{margin-left:var(--swc-overlay-animation-distance);padding-inline:var(--swc-overlay-animation-distance)}.dialog[actual-placement*=top]{margin-top:var(--swc-overlay-animation-distance);padding-block:var(--swc-overlay-animation-distance)}.dialog[actual-placement*=right]{margin-left:calc(var(--swc-overlay-animation-distance)*-1);padding-inline:var(--swc-overlay-animation-distance)}.dialog[actual-placement*=bottom]{margin-top:calc(var(--swc-overlay-animation-distance)*-1);padding-block:var(--swc-overlay-animation-distance)}.dialog[actual-placement*=left]{margin-left:var(--swc-overlay-animation-distance);padding-inline:var(--swc-overlay-animation-distance)}slot[name=longpress-describedby-descriptor]{display:none}@supports selector(:open){.dialog{opacity:0}.dialog:open{--mod-popover-filter:var(--spectrum-popover-filter);opacity:1}}@supports selector(:popover-open){.dialog{opacity:0}.dialog:popover-open{--mod-popover-filter:var(--spectrum-popover-filter);opacity:1}}@supports (not selector(:open)) and (not selector(:popover-open)){:host:not([open]) .dialog{pointer-events:none}.dialog[actual-placement]{z-index:calc(var(--swc-overlay-z-index-base, 1000) + var(--swc-overlay-open-count))}}
`;
    overlay_css_default = o;
  }
});

// node_modules/@spectrum-web-components/overlay/src/Overlay.js
import { html as u3 } from "/libs/features/spectrum-web-components/dist/base.js";
import { property as l, query as f2, queryAssignedElements as C, state as D } from "/libs/features/spectrum-web-components/dist/base.js";
import { isAndroid as S, isIOS as A2 } from "/libs/features/spectrum-web-components/dist/shared.js";
import { ElementResolutionController as R, elementResolverUpdatedSymbol as O } from "/libs/features/spectrum-web-components/dist/reactive-controllers.js";
import { conditionAttributeWithId as g2 } from "/libs/features/spectrum-web-components/dist/base.js";
import { ifDefined as m3, styleMap as b } from "/libs/features/spectrum-web-components/dist/base.js";
var P, w, n, V, F, LONGPRESS_INSTRUCTIONS, U, c2, o2, Overlay;
var init_Overlay = __esm({
  "node_modules/@spectrum-web-components/overlay/src/Overlay.js"() {
    "use strict";
    init_AbstractOverlay();
    init_OverlayDialog();
    init_OverlayPopover();
    init_OverlayNoPopover();
    init_OverlayStack();
    init_AbstractOverlay();
    init_VirtualTrigger();
    init_PlacementController();
    init_overlay_css();
    P = Object.defineProperty;
    w = Object.getOwnPropertyDescriptor;
    n = (v3, h2, e4, t) => {
      for (var i2 = t > 1 ? void 0 : t ? w(h2, e4) : h2, r2 = v3.length - 1, s2; r2 >= 0; r2--)
        (s2 = v3[r2]) && (i2 = (t ? s2(h2, e4, i2) : s2(i2)) || i2);
      return t && i2 && P(h2, e4, i2), i2;
    };
    V = 300;
    F = 300;
    LONGPRESS_INSTRUCTIONS = { touch: "Double tap and long press for additional options", keyboard: "Press Space or Alt+Down Arrow for additional options", mouse: "Click and hold for additional options" };
    U = "showPopover" in document.createElement("div");
    c2 = OverlayDialog(AbstractOverlay);
    U ? c2 = OverlayPopover(c2) : c2 = OverlayNoPopover(c2);
    o2 = class o3 extends c2 {
      constructor() {
        super(...arguments);
        this._delayed = false;
        this._disabled = false;
        this.longpressState = "null";
        this.offset = 6;
        this.placementController = new PlacementController(this);
        this._open = false;
        this.receivesFocus = "auto";
        this.releaseAriaDescribedby = noop;
        this.releaseLongpressDescribedby = noop;
        this._state = "closed";
        this.triggerElement = null;
        this.type = "auto";
        this.wasOpen = false;
        this.elementResolver = new R(this);
        this.closeOnFocusOut = (e4) => {
          if (!e4.relatedTarget)
            return;
          const t = new Event("overlay-relation-query", { bubbles: true, composed: true });
          e4.relatedTarget.addEventListener(t.type, (i2) => {
            i2.composedPath().includes(this) || (this.open = false);
          }), e4.relatedTarget.dispatchEvent(t);
        };
        this.elementIds = [];
        this.handlePointerdown = (e4) => {
          if (!this.triggerElement || e4.button !== 0)
            return;
          const t = this.triggerElement;
          this.longpressState = "potential", document.addEventListener("pointerup", this.handlePointerup), document.addEventListener("pointercancel", this.handlePointerup), !t.holdAffordance && (this.longressTimeout = setTimeout(() => {
            t && t.dispatchEvent(new CustomEvent("longpress", { bubbles: true, composed: true, detail: { source: "pointer" } }));
          }, V));
        };
        this.handlePointerup = () => {
          clearTimeout(this.longressTimeout), this.triggerElement && (this.longpressState = this.state === "opening" ? "pressed" : "null", document.removeEventListener("pointerup", this.handlePointerup), document.removeEventListener("pointercancel", this.handlePointerup));
        };
        this.handleKeydown = (e4) => {
          const { code: t, altKey: i2 } = e4;
          (t === "Space" || i2 && t === "ArrowDown") && t === "ArrowDown" && (e4.stopPropagation(), e4.stopImmediatePropagation());
        };
        this.handleKeyup = (e4) => {
          const { code: t, altKey: i2 } = e4;
          if (t === "Space" || i2 && t === "ArrowDown") {
            if (!this.triggerElement || !this.hasNonVirtualTrigger)
              return;
            e4.stopPropagation(), this.triggerElement.dispatchEvent(new CustomEvent("longpress", { bubbles: true, composed: true, detail: { source: "keyboard" } })), setTimeout(() => {
              this.longpressState = "null";
            });
          }
        };
        this.preventNextToggle = false;
        this.handlePointerdownForClick = () => {
          this.preventNextToggle = this.open;
        };
        this.handleClick = () => {
          this.longpressState === "opening" || this.longpressState === "pressed" || (this.preventNextToggle || (this.open = !this.open), this.preventNextToggle = false);
        };
        this.focusedin = false;
        this.handleFocusin = () => {
          this.open = true, this.focusedin = true;
        };
        this.handleFocusout = () => {
          this.focusedin = false, !this.pointerentered && (this.open = false);
        };
        this.pointerentered = false;
        this.handlePointerenter = () => {
          this.hoverTimeout && (clearTimeout(this.hoverTimeout), delete this.hoverTimeout), !this.disabled && (this.open = true, this.pointerentered = true);
        };
        this.handleOverlayPointerenter = () => {
          this.hoverTimeout && (clearTimeout(this.hoverTimeout), delete this.hoverTimeout);
        };
        this.handlePointerleave = () => {
          this.doPointerleave();
        };
        this.handleOverlayPointerleave = () => {
          this.doPointerleave();
        };
        this.handleLongpress = () => {
          this.open = true, this.longpressState = this.longpressState === "potential" ? "opening" : "pressed";
        };
      }
      get delayed() {
        var e4;
        return ((e4 = this.elements.at(-1)) == null ? void 0 : e4.hasAttribute("delayed")) || this._delayed;
      }
      set delayed(e4) {
        this._delayed = e4;
      }
      get disabled() {
        return this._disabled;
      }
      set disabled(e4) {
        this._disabled = e4, e4 ? (this.hasNonVirtualTrigger && this.unbindEvents(), this.wasOpen = this.open, this.open = false) : (this.bindEvents(), this.open = this.open || this.wasOpen, this.wasOpen = false);
      }
      get hasNonVirtualTrigger() {
        return !!this.triggerElement && !(this.triggerElement instanceof VirtualTrigger);
      }
      get open() {
        return this._open;
      }
      set open(e4) {
        e4 && this.disabled || e4 !== this.open && ((this.longpressState === "opening" || this.longpressState === "pressed") && !e4 || (this._open = e4, this.open && (o3.openCount += 1), this.requestUpdate("open", !this.open)));
      }
      get state() {
        return this._state;
      }
      set state(e4) {
        if (e4 === this.state)
          return;
        const t = this.state;
        this._state = e4, (this.state === "opened" || this.state === "closed") && (this.longpressState = this.longpressState === "pressed" ? "null" : this.longpressState), this.requestUpdate("state", t);
      }
      get usesDialog() {
        return this.type === "modal" || this.type === "page";
      }
      get popoverValue() {
        if ("popover" in this)
          switch (this.type) {
            case "modal":
            case "page":
              return;
            case "hint":
              return "manual";
            default:
              return this.type;
          }
      }
      get requiresPosition() {
        return !(this.type === "page" || !this.open || !this.triggerElement || !this.placement && this.type !== "hint");
      }
      managePosition() {
        if (!this.requiresPosition || !this.open)
          return;
        const e4 = this.offset || 0, t = this.triggerElement, i2 = this.placement || "right", r2 = this.tipPadding;
        this.placementController.placeOverlay(this.dialogEl, { offset: e4, placement: i2, tipPadding: r2, trigger: t, type: this.type });
      }
      async managePopoverOpen() {
        super.managePopoverOpen();
        const e4 = this.open;
        if (this.open !== e4 || (await this.manageDelay(e4), this.open !== e4) || (await this.ensureOnDOM(e4), this.open !== e4))
          return;
        const t = await this.makeTransition(e4);
        this.open === e4 && await this.applyFocus(e4, t);
      }
      async applyFocus(e4, t) {
        if (!(this.receivesFocus === "false" || this.type === "hint")) {
          if (await nextFrame(), await nextFrame(), e4 === this.open && !this.open) {
            this.hasNonVirtualTrigger && this.contains(this.getRootNode().activeElement) && this.triggerElement.focus();
            return;
          }
          t == null || t.focus();
        }
      }
      async manageOpen(e4) {
        var t;
        if (!(!this.isConnected && this.open)) {
          if (this.hasUpdated || await this.updateComplete, this.open ? (overlayStack.add(this), this.willPreventClose && (document.addEventListener("pointerup", () => {
            this.dialogEl.classList.toggle("not-immediately-closable", false), this.willPreventClose = false;
          }, { once: true }), this.dialogEl.classList.toggle("not-immediately-closable", true))) : (e4 && this.dispose(), overlayStack.remove(this)), this.open && this.state !== "opened" ? this.state = "opening" : !this.open && this.state !== "closed" && (this.state = "closing"), this.usesDialog ? this.manageDialogOpen() : this.managePopoverOpen(), this.type === "auto") {
            const i2 = this.getRootNode();
            this.open ? i2.addEventListener("focusout", this.closeOnFocusOut, { capture: true }) : i2.removeEventListener("focusout", this.closeOnFocusOut, { capture: true });
          }
          if (!this.open && this.type !== "hint") {
            const i2 = () => {
              var p4;
              const r2 = [];
              let s2 = document.activeElement;
              for (; s2 != null && s2.shadowRoot && s2.shadowRoot.activeElement; )
                s2 = s2.shadowRoot.activeElement;
              for (; s2; ) {
                const a3 = s2.assignedSlot || s2.parentElement || ((p4 = s2.getRootNode()) == null ? void 0 : p4.host);
                a3 && r2.push(a3), s2 = a3;
              }
              return r2;
            };
            (t = this.triggerElement) != null && t.focus && (this.contains(this.getRootNode().activeElement) || i2().includes(this)) && this.triggerElement.focus();
          }
        }
      }
      unbindEvents() {
        var e4;
        (e4 = this.abortController) == null || e4.abort();
      }
      bindEvents() {
        if (!this.hasNonVirtualTrigger)
          return;
        this.abortController = new AbortController();
        const e4 = this.triggerElement;
        switch (this.triggerInteraction) {
          case "click":
            this.bindClickEvents(e4);
            return;
          case "longpress":
            this.bindLongpressEvents(e4);
            return;
          case "hover":
            this.bindHoverEvents(e4);
            return;
        }
      }
      bindClickEvents(e4) {
        const t = { signal: this.abortController.signal };
        e4.addEventListener("click", this.handleClick, t), e4.addEventListener("pointerdown", this.handlePointerdownForClick, t);
      }
      bindLongpressEvents(e4) {
        const t = { signal: this.abortController.signal };
        e4.addEventListener("longpress", this.handleLongpress, t), e4.addEventListener("pointerdown", this.handlePointerdown, t), this.prepareLongpressDescription(e4), !e4.holdAffordance && (e4.addEventListener("keydown", this.handleKeydown, t), e4.addEventListener("keyup", this.handleKeyup, t));
      }
      bindHoverEvents(e4) {
        const t = { signal: this.abortController.signal };
        e4.addEventListener("focusin", this.handleFocusin, t), e4.addEventListener("focusout", this.handleFocusout, t), e4.addEventListener("pointerenter", this.handlePointerenter, t), e4.addEventListener("pointerleave", this.handlePointerleave, t), this.addEventListener("pointerenter", this.handleOverlayPointerenter, t), this.addEventListener("pointerleave", this.handleOverlayPointerleave, t);
      }
      manageTriggerElement(e4) {
        e4 && (this.unbindEvents(), this.releaseAriaDescribedby()), !(!this.triggerElement || this.triggerElement instanceof VirtualTrigger) && (this.bindEvents(), this.receivesFocus !== "true" && this.prepareAriaDescribedby());
      }
      prepareLongpressDescription(e4) {
        if (this.triggerInteraction !== "longpress" || this.releaseLongpressDescribedby !== noop || !this.elements.length)
          return;
        const t = document.createElement("div");
        t.id = `longpress-describedby-descriptor-${crypto.randomUUID().slice(0, 8)}`;
        const i2 = A2() || S() ? "touch" : "keyboard";
        t.textContent = LONGPRESS_INSTRUCTIONS[i2], t.slot = "longpress-describedby-descriptor";
        const r2 = e4.getRootNode(), s2 = this.getRootNode();
        r2 === s2 ? this.append(t) : (t.hidden = !("host" in r2), e4.insertAdjacentElement("afterend", t));
        const p4 = g2(e4, "aria-describedby", [t.id]);
        this.releaseLongpressDescribedby = () => {
          p4(), t.remove(), this.releaseLongpressDescribedby = noop;
        };
      }
      prepareAriaDescribedby() {
        if (this.triggerInteraction !== "hover" || this.releaseAriaDescribedby !== noop || !this.elements.length || !this.hasNonVirtualTrigger)
          return;
        const e4 = this.triggerElement, t = e4.getRootNode(), i2 = this.elements[0].getRootNode(), r2 = this.getRootNode();
        if (t == r2) {
          const s2 = g2(e4, "aria-describedby", [this.id]);
          this.releaseAriaDescribedby = () => {
            s2(), this.releaseAriaDescribedby = noop;
          };
        } else if (t === i2) {
          this.elementIds = this.elements.map((a3) => a3.id);
          const s2 = this.elements.map((a3) => (a3.id || (a3.id = `${this.tagName.toLowerCase()}-helper-${crypto.randomUUID().slice(0, 8)}`), a3.id)), p4 = g2(e4, "aria-describedby", s2);
          this.releaseAriaDescribedby = () => {
            p4(), this.elements.map((a3, L2) => {
              a3.id = this.elementIds[L2];
            }), this.releaseAriaDescribedby = noop;
          };
        }
      }
      doPointerleave() {
        this.pointerentered = false;
        const e4 = this.triggerElement;
        this.focusedin && e4.matches(":focus-visible") || (this.hoverTimeout = setTimeout(() => {
          this.open = false;
        }, F));
      }
      handleBeforetoggle(e4) {
        e4.newState !== "open" && this.handleBrowserClose();
      }
      handleBrowserClose() {
        if (this.longpressState !== "opening" && this.longpressState !== "pressed") {
          this.open = false;
          return;
        }
        this.manuallyKeepOpen();
      }
      manuallyKeepOpen() {
        super.manuallyKeepOpen(), this.open = true, this.placementController.allowPlacementUpdate = true, this.manageOpen(false);
      }
      handleSlotchange() {
        this.triggerElement && this.prepareAriaDescribedby(), this.elements.length ? this.hasNonVirtualTrigger && this.prepareLongpressDescription(this.triggerElement) : this.releaseLongpressDescribedby();
      }
      shouldPreventClose() {
        const e4 = this.willPreventClose;
        return this.willPreventClose = false, e4;
      }
      willUpdate(e4) {
        var i2;
        if (this.hasAttribute("id") || this.setAttribute("id", `${this.tagName.toLowerCase()}-${crypto.randomUUID().slice(0, 8)}`), e4.has("open") && (typeof e4.get("open") != "undefined" || this.open) && this.manageOpen(e4.get("open")), e4.has("trigger")) {
          const [r2, s2] = ((i2 = this.trigger) == null ? void 0 : i2.split("@")) || [];
          this.elementResolver.selector = r2 ? `#${r2}` : "", this.triggerInteraction = s2;
        }
        const t = this.triggerElement;
        e4.has(O) && (this.triggerElement = this.elementResolver.element, this.manageTriggerElement(t)), e4.has("triggerElement") && this.manageTriggerElement(e4.get("triggerElement"));
      }
      updated(e4) {
        super.updated(e4), e4.has("placement") && (this.placement ? this.dialogEl.setAttribute("actual-placement", this.placement) : this.dialogEl.removeAttribute("actual-placement"), this.open && typeof e4.get("placement") != "undefined" && this.placementController.resetOverlayPosition());
      }
      renderContent() {
        return u3`
            <slot @slotchange=${this.handleSlotchange}></slot>
        `;
      }
      get dialogStyleMap() {
        return { "--swc-overlay-open-count": o3.openCount.toString() };
      }
      renderDialog() {
        return u3`
            <dialog
                class="dialog"
                part="dialog"
                placement=${m3(this.requiresPosition ? this.placement || "right" : void 0)}
                style=${b(this.dialogStyleMap)}
                @close=${this.handleBrowserClose}
                @cancel=${this.handleBrowserClose}
                @beforetoggle=${this.handleBeforetoggle}
                ?is-visible=${this.state !== "closed"}
            >
                ${this.renderContent()}
            </dialog>
        `;
      }
      renderPopover() {
        return u3`
            <div
                class="dialog"
                part="dialog"
                placement=${m3(this.requiresPosition ? this.placement || "right" : void 0)}
                popover=${m3(this.popoverValue)}
                style=${b(this.dialogStyleMap)}
                @beforetoggle=${this.handleBeforetoggle}
                @close=${this.handleBrowserClose}
                ?is-visible=${this.state !== "closed"}
            >
                ${this.renderContent()}
            </div>
        `;
      }
      render() {
        const e4 = this.type === "modal" || this.type === "page";
        return u3`
            ${e4 ? this.renderDialog() : this.renderPopover()}
            <slot name="longpress-describedby-descriptor"></slot>
        `;
      }
      connectedCallback() {
        super.connectedCallback(), this.addEventListener("close", () => {
          this.open = false;
        }), this.hasNonVirtualTrigger && this.bindEvents();
      }
      disconnectedCallback() {
        this.hasNonVirtualTrigger && this.unbindEvents(), this.releaseAriaDescribedby(), this.releaseLongpressDescribedby(), this.open = false, super.disconnectedCallback();
      }
    };
    o2.styles = [overlay_css_default], o2.openCount = 1, n([l({ type: Boolean })], o2.prototype, "delayed", 1), n([f2(".dialog")], o2.prototype, "dialogEl", 2), n([l({ type: Boolean })], o2.prototype, "disabled", 1), n([C({ flatten: true, selector: ':not([slot="longpress-describedby-descriptor"], slot)' })], o2.prototype, "elements", 2), n([l({ type: Number })], o2.prototype, "offset", 2), n([l({ type: Boolean, reflect: true })], o2.prototype, "open", 1), n([l()], o2.prototype, "placement", 2), n([l({ attribute: "receives-focus" })], o2.prototype, "receivesFocus", 2), n([f2("slot")], o2.prototype, "slotEl", 2), n([D()], o2.prototype, "state", 1), n([l({ type: Number, attribute: "tip-padding" })], o2.prototype, "tipPadding", 2), n([l()], o2.prototype, "trigger", 2), n([l({ attribute: false })], o2.prototype, "triggerElement", 2), n([l({ attribute: false })], o2.prototype, "triggerInteraction", 2), n([l()], o2.prototype, "type", 2);
    Overlay = o2;
  }
});

// node_modules/@spectrum-web-components/overlay/sp-overlay.js
var sp_overlay_exports = {};
import { defineElement as e } from "/libs/features/spectrum-web-components/dist/base.js";
var init_sp_overlay = __esm({
  "node_modules/@spectrum-web-components/overlay/sp-overlay.js"() {
    "use strict";
    init_Overlay();
    e("sp-overlay", Overlay);
  }
});

// src/overlay.js
init_sp_overlay();

// node_modules/@spectrum-web-components/overlay/overlay-trigger.js
import { defineElement as e3 } from "/libs/features/spectrum-web-components/dist/base.js";

// node_modules/@spectrum-web-components/overlay/src/OverlayTrigger.js
import { html as r, SpectrumElement as u4 } from "/libs/features/spectrum-web-components/dist/base.js";
import { property as i, query as h, state as p3 } from "/libs/features/spectrum-web-components/dist/base.js";

// node_modules/@spectrum-web-components/overlay/src/overlay-trigger.css.js
import { css as e2 } from "/libs/features/spectrum-web-components/dist/base.js";
var s = e2`
:host([disabled]) ::slotted([slot=trigger]){pointer-events:none}slot[name=longpress-describedby-descriptor]{display:none}
`;
var overlay_trigger_css_default = s;

// node_modules/@spectrum-web-components/overlay/src/OverlayTrigger.js
var g3 = Object.defineProperty;
var v2 = Object.getOwnPropertyDescriptor;
var n2 = (c3, a3, e4, o4) => {
  for (var t = o4 > 1 ? void 0 : o4 ? v2(a3, e4) : a3, l2 = c3.length - 1, s2; l2 >= 0; l2--)
    (s2 = c3[l2]) && (t = (o4 ? s2(a3, e4, t) : s2(t)) || t);
  return o4 && t && g3(a3, e4, t), t;
};
var OverlayTrigger = class extends u4 {
  constructor() {
    super(...arguments);
    this.content = "click hover longpress";
    this.offset = 6;
    this.disabled = false;
    this.clickContent = [];
    this.longpressContent = [];
    this.hoverContent = [];
    this.targetContent = [];
  }
  static get styles() {
    return [overlay_trigger_css_default];
  }
  getAssignedElementsFromSlot(e4) {
    return e4.assignedElements({ flatten: true });
  }
  handleTriggerContent(e4) {
    this.targetContent = this.getAssignedElementsFromSlot(e4.target);
  }
  handleSlotContent(e4) {
    switch (e4.target.name) {
      case "click-content":
        this.clickContent = this.getAssignedElementsFromSlot(e4.target);
        break;
      case "longpress-content":
        this.longpressContent = this.getAssignedElementsFromSlot(e4.target);
        break;
      case "hover-content":
        this.hoverContent = this.getAssignedElementsFromSlot(e4.target);
        break;
    }
  }
  handleBeforetoggle(e4) {
    const { target: o4 } = e4;
    let t;
    if (o4 === this.clickOverlayElement)
      t = "click";
    else if (o4 === this.longpressOverlayElement)
      t = "longpress";
    else if (o4 === this.hoverOverlayElement)
      t = "hover";
    else
      return;
    e4.newState === "open" ? this.open = t : this.open === t && (this.open = void 0);
  }
  update(e4) {
    var o4, t, l2, s2, d2, m4;
    e4.has("clickContent") && (this.clickPlacement = ((o4 = this.clickContent[0]) == null ? void 0 : o4.getAttribute("placement")) || ((t = this.clickContent[0]) == null ? void 0 : t.getAttribute("direction")) || void 0), e4.has("hoverContent") && (this.hoverPlacement = ((l2 = this.hoverContent[0]) == null ? void 0 : l2.getAttribute("placement")) || ((s2 = this.hoverContent[0]) == null ? void 0 : s2.getAttribute("direction")) || void 0), e4.has("longpressContent") && (this.longpressPlacement = ((d2 = this.longpressContent[0]) == null ? void 0 : d2.getAttribute("placement")) || ((m4 = this.longpressContent[0]) == null ? void 0 : m4.getAttribute("direction")) || void 0), super.update(e4);
  }
  renderSlot(e4) {
    return r`
            <slot name=${e4} @slotchange=${this.handleSlotContent}></slot>
        `;
  }
  renderClickOverlay() {
    Promise.resolve().then(() => init_sp_overlay());
    const e4 = this.renderSlot("click-content");
    return this.clickContent.length ? r`
            <sp-overlay
                id="click-overlay"
                ?disabled=${this.disabled || !this.clickContent.length}
                ?open=${this.open === "click" && !!this.clickContent.length}
                .offset=${this.offset}
                .placement=${this.clickPlacement || this.placement}
                .triggerElement=${this.targetContent[0]}
                .triggerInteraction=${"click"}
                .type=${this.type !== "modal" ? "auto" : "modal"}
                @beforetoggle=${this.handleBeforetoggle}
            >
                ${e4}
            </sp-overlay>
        ` : e4;
  }
  renderHoverOverlay() {
    Promise.resolve().then(() => init_sp_overlay());
    const e4 = this.renderSlot("hover-content");
    return this.hoverContent.length ? r`
            <sp-overlay
                id="hover-overlay"
                ?disabled=${this.disabled || !this.hoverContent.length || !!this.open && this.open !== "hover"}
                ?open=${this.open === "hover" && !!this.hoverContent.length}
                .offset=${this.offset}
                .placement=${this.hoverPlacement || this.placement}
                .triggerElement=${this.targetContent[0]}
                .triggerInteraction=${"hover"}
                .type=${"hint"}
                @beforetoggle=${this.handleBeforetoggle}
            >
                ${e4}
            </sp-overlay>
        ` : e4;
  }
  renderLongpressOverlay() {
    Promise.resolve().then(() => init_sp_overlay());
    const e4 = this.renderSlot("longpress-content");
    return this.longpressContent.length ? r`
            <sp-overlay
                id="longpress-overlay"
                ?disabled=${this.disabled || !this.longpressContent.length}
                ?open=${this.open === "longpress" && !!this.longpressContent.length}
                .offset=${this.offset}
                .placement=${this.longpressPlacement || this.placement}
                .triggerElement=${this.targetContent[0]}
                .triggerInteraction=${"longpress"}
                .type=${"auto"}
                @beforetoggle=${this.handleBeforetoggle}
            >
                ${e4}
            </sp-overlay>
            <slot name="longpress-describedby-descriptor"></slot>
        ` : e4;
  }
  render() {
    const e4 = this.content.split(" ");
    return r`
            <slot
                id="trigger"
                name="trigger"
                @slotchange=${this.handleTriggerContent}
            ></slot>
            ${[e4.includes("click") ? this.renderClickOverlay() : r``, e4.includes("hover") ? this.renderHoverOverlay() : r``, e4.includes("longpress") ? this.renderLongpressOverlay() : r``]}
        `;
  }
  updated(e4) {
    if (super.updated(e4), this.disabled && e4.has("disabled")) {
      this.open = void 0;
      return;
    }
  }
  async getUpdateComplete() {
    return await super.getUpdateComplete();
  }
};
n2([i()], OverlayTrigger.prototype, "content", 2), n2([i({ reflect: true })], OverlayTrigger.prototype, "placement", 2), n2([i()], OverlayTrigger.prototype, "type", 2), n2([i({ type: Number })], OverlayTrigger.prototype, "offset", 2), n2([i({ reflect: true })], OverlayTrigger.prototype, "open", 2), n2([i({ type: Boolean, reflect: true })], OverlayTrigger.prototype, "disabled", 2), n2([p3()], OverlayTrigger.prototype, "clickContent", 2), n2([p3()], OverlayTrigger.prototype, "longpressContent", 2), n2([p3()], OverlayTrigger.prototype, "hoverContent", 2), n2([p3()], OverlayTrigger.prototype, "targetContent", 2), n2([h("#click-overlay", true)], OverlayTrigger.prototype, "clickOverlayElement", 2), n2([h("#longpress-overlay", true)], OverlayTrigger.prototype, "longpressOverlayElement", 2), n2([h("#hover-overlay", true)], OverlayTrigger.prototype, "hoverOverlayElement", 2);

// node_modules/@spectrum-web-components/overlay/overlay-trigger.js
e3("overlay-trigger", OverlayTrigger);

// src/overlay.js
init_Overlay();
window.__merch__spectrum_Overlay = Overlay;
