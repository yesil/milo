{
  "version": 3,
  "sources": ["../node_modules/@spectrum-web-components/alert-dialog/src/AlertDialog.ts", "../node_modules/@lit-labs/observers/src/resize-controller.ts", "../node_modules/@spectrum-web-components/alert-dialog/src/alert-dialog.css.ts", "../node_modules/@spectrum-web-components/alert-dialog/sp-alert-dialog.ts"],
  "sourcesContent": ["/*\nCopyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport {\n    CSSResultArray,\n    html,\n    SpectrumElement,\n    TemplateResult,\n} from '@spectrum-web-components/base';\nimport {\n    property,\n    query,\n} from '@spectrum-web-components/base/src/decorators.js';\nimport '@spectrum-web-components/button/sp-button.js';\nimport { FocusVisiblePolyfillMixin } from '@spectrum-web-components/shared/src/focus-visible.js';\nimport { randomID } from '@spectrum-web-components/shared/src/random-id.js';\nimport { conditionAttributeWithId } from '@spectrum-web-components/base/src/condition-attribute-with-id.js';\nimport { ResizeController } from '@lit-labs/observers/resize-controller.js';\nimport alertStyles from './alert-dialog.css.js';\n\nexport type AlertDialogVariants =\n    | 'confirmation'\n    | 'information'\n    | 'warning'\n    | 'error'\n    | 'destructive'\n    | 'secondary'\n    | '';\n\nexport const alertDialogVariants: AlertDialogVariants[] = [\n    'confirmation',\n    'information',\n    'warning',\n    'error',\n    'destructive',\n    'secondary',\n];\n\nfunction gatherAppliedIdsFromSlottedChildren(\n    slot: HTMLSlotElement,\n    idBase: string\n): string[] {\n    const assignedElements = slot.assignedElements();\n    const ids: string[] = [];\n    assignedElements.forEach((el) => {\n        if (el.id) {\n            ids.push(el.id);\n        } else {\n            const id = idBase + `-${randomID()}`;\n            el.id = id;\n            ids.push(id);\n        }\n    });\n    return ids;\n}\nexport class AlertDialog extends FocusVisiblePolyfillMixin(SpectrumElement) {\n    public static override get styles(): CSSResultArray {\n        return [alertStyles];\n    }\n\n    @query('.content')\n    private contentElement!: HTMLDivElement;\n\n    private resizeController = new ResizeController(this, {\n        callback: () => {\n            this.shouldManageTabOrderForScrolling();\n        },\n    });\n\n    public _variant: AlertDialogVariants = '';\n\n    @property({ type: String, reflect: true })\n    public set variant(variant: AlertDialogVariants) {\n        if (variant === this.variant) {\n            return;\n        }\n        const oldValue = this.variant;\n        if (alertDialogVariants.includes(variant)) {\n            this.setAttribute('variant', variant);\n            this._variant = variant;\n        } else {\n            this.removeAttribute('variant');\n            this._variant = '';\n        }\n        this.requestUpdate('variant', oldValue);\n    }\n\n    public get variant(): AlertDialogVariants {\n        return this._variant;\n    }\n\n    protected renderIcon(): TemplateResult {\n        switch (this.variant) {\n            case 'warning':\n            case 'error':\n                return html`\n                    <sp-icon-alert class=\"icon\"></sp-icon-alert>\n                `;\n\n            default:\n                return html``;\n        }\n    }\n\n    protected renderHeading(): TemplateResult {\n        return html`\n            <slot name=\"heading\" @slotchange=${this.onHeadingSlotchange}></slot>\n        `;\n    }\n\n    protected renderContent(): TemplateResult {\n        return html`\n            <div class=\"content\">\n                <slot @slotchange=${this.onContentSlotChange}></slot>\n            </div>\n        `;\n    }\n\n    static instanceCount = 0;\n    private labelledbyId = `sp-dialog-label-${AlertDialog.instanceCount++}`;\n    private conditionLabelledby?: () => void;\n    private conditionDescribedby?: () => void;\n\n    private onHeadingSlotchange({\n        target,\n    }: Event & { target: HTMLSlotElement }): void {\n        if (this.conditionLabelledby) {\n            this.conditionLabelledby();\n            delete this.conditionLabelledby;\n        }\n        const ids = gatherAppliedIdsFromSlottedChildren(\n            target,\n            this.labelledbyId\n        );\n        if (ids.length) {\n            this.conditionLabelledby = conditionAttributeWithId(\n                this,\n                'aria-labelledby',\n                ids\n            );\n        }\n    }\n\n    public shouldManageTabOrderForScrolling = (): void => {\n        if (!this.contentElement) return;\n\n        const { offsetHeight, scrollHeight } = this.contentElement;\n        if (offsetHeight < scrollHeight) {\n            this.contentElement.tabIndex = 0;\n        } else {\n            this.contentElement.removeAttribute('tabindex');\n        }\n    };\n\n    private describedbyId = `sp-dialog-description-${AlertDialog.instanceCount++}`;\n\n    protected onContentSlotChange({\n        target,\n    }: Event & { target: HTMLSlotElement }): void {\n        requestAnimationFrame(() => {\n            // Can happen more than once. Take this.contentElement out\n            // of the observer before adding it again.\n            this.resizeController.unobserve(this.contentElement);\n            this.resizeController.observe(this.contentElement);\n        });\n        if (this.conditionDescribedby) {\n            this.conditionDescribedby();\n            delete this.conditionDescribedby;\n        }\n        const ids = gatherAppliedIdsFromSlottedChildren(\n            target,\n            this.describedbyId\n        );\n        if (ids.length && ids.length < 4) {\n            this.conditionDescribedby = conditionAttributeWithId(\n                this,\n                'aria-describedby',\n                ids\n            );\n        } else if (!ids.length) {\n            const idProvided = !!this.id;\n            if (!idProvided) this.id = this.describedbyId;\n            const conditionDescribedby = conditionAttributeWithId(\n                this,\n                'aria-describedby',\n                this.id\n            );\n            this.conditionDescribedby = () => {\n                conditionDescribedby();\n                if (!idProvided) {\n                    this.removeAttribute('id');\n                }\n            };\n        }\n    }\n\n    protected renderButtons(): TemplateResult {\n        return html`\n            <sp-button-group class=\"button-group\">\n                <slot name=\"button\"></slot>\n            </sp-button-group>\n        `;\n    }\n\n    protected override render(): TemplateResult {\n        return html`\n            <div class=\"grid\">\n                <div class=\"header\">\n                    ${this.renderHeading()} ${this.renderIcon()}\n                </div>\n                <sp-divider size=\"m\" class=\"divider\"></sp-divider>\n                ${this.renderContent()} ${this.renderButtons()}\n            </div>\n        `;\n    }\n}\n", "/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {\n  ReactiveController,\n  ReactiveControllerHost,\n} from '@lit/reactive-element/reactive-controller.js';\n\n/**\n * The callback function for a ResizeController.\n */\nexport type ResizeValueCallback<T = unknown> = (\n  ...args: Parameters<ResizeObserverCallback>\n) => T;\n\n/**\n * The config options for a ResizeController.\n */\nexport interface ResizeControllerConfig<T = unknown> {\n  /**\n   * Configuration object for the ResizeController.\n   */\n  config?: ResizeObserverOptions;\n  /**\n   * The element to observe. In addition to configuring the target here,\n   * the `observe` method can be called to observe additional targets. When not\n   * specified, the target defaults to the `host`. If set to `null`, no target\n   * is automatically observed. Only the configured target will be re-observed\n   * if the host connects again after unobserving via disconnection.\n   */\n  target?: Element | null;\n  /**\n   * The callback used to process detected changes into a value stored\n   * in the controller's `value` property.\n   */\n  callback?: ResizeValueCallback<T>;\n  /**\n   * By default the `callback` is called without changes when a target is\n   * observed. This is done to help manage initial state, but this\n   * setup step can be skipped by setting this to true.\n   */\n  skipInitial?: boolean;\n}\n\n/**\n * ResizeController is a ReactiveController that integrates a ResizeObserver\n * with a ReactiveControllerHost's reactive update lifecycle. This is typically\n * a ReactiveElement or LitElement. ResizeObservers can be used to detect\n * size changes to DOM elements.\n *\n * The controller can specify a `target` element to observe and the\n * configuration options to pass to the ResizeObserver. The `observe`\n * method can be called to observe additional elements.\n *\n * When a change is detected, the controller's given `callback` function is\n * used to process the result into a value which is stored on the controller.\n * The controller's `value` is usable during the host's update cycle.\n */\nexport class ResizeController<T = unknown> implements ReactiveController {\n  private _host: ReactiveControllerHost;\n  private _targets = new Set<Element>();\n  private _config?: ResizeObserverOptions;\n  private _observer!: ResizeObserver;\n  private _skipInitial = false;\n  /**\n   * Flag used to help manage calling the `callback` when observe is called\n   * in addition to when a mutation occurs. This is done to help setup initial\n   * state and is performed async by requesting a host update and calling\n   * `handleChanges` once by checking and then resetting this flag.\n   */\n  private _unobservedUpdate = false;\n  /**\n   * The result of processing the observer's changes via the `callback`\n   * function.\n   */\n  value?: T;\n  /**\n   * Function that returns a value processed from the observer's changes.\n   * The result is stored in the `value` property.\n   */\n  callback?: ResizeValueCallback<T>;\n  constructor(\n    host: ReactiveControllerHost & Element,\n    {target, config, callback, skipInitial}: ResizeControllerConfig<T>\n  ) {\n    this._host = host;\n    // Target defaults to `host` unless explicitly `null`.\n    if (target !== null) {\n      this._targets.add(target ?? host);\n    }\n    this._config = config;\n    this._skipInitial = skipInitial ?? this._skipInitial;\n    this.callback = callback;\n    // Check browser support.\n    if (!window.ResizeObserver) {\n      console.warn(\n        `ResizeController error: browser does not support ResizeObserver.`\n      );\n      return;\n    }\n    this._observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n      this.handleChanges(entries);\n      this._host.requestUpdate();\n    });\n    host.addController(this);\n  }\n\n  /**\n   * Process the observer's changes with the controller's `callback`\n   * function to produce a result stored in the `value` property.\n   */\n  protected handleChanges(entries: ResizeObserverEntry[]) {\n    this.value = this.callback?.(entries, this._observer);\n  }\n\n  hostConnected() {\n    for (const target of this._targets) {\n      this.observe(target);\n    }\n  }\n\n  hostDisconnected() {\n    this.disconnect();\n  }\n\n  async hostUpdated() {\n    // Handle initial state as a set of 0 changes. This helps setup initial\n    // state and promotes UI = f(state) since ideally the callback does not\n    // rely on changes.\n    if (!this._skipInitial && this._unobservedUpdate) {\n      this.handleChanges([]);\n    }\n    this._unobservedUpdate = false;\n  }\n\n  /**\n   * Observe the target element. The controller's `target` is automatically\n   * observed when the host connects.\n   * @param target Element to observe\n   */\n  observe(target: Element) {\n    this._targets.add(target);\n    this._observer.observe(target, this._config);\n    this._unobservedUpdate = true;\n    this._host.requestUpdate();\n  }\n\n  /**\n   * Unobserve the target element.\n   * @param target Element to unobserve\n   */\n  unobserve(target: Element) {\n    this._targets.delete(target);\n    this._observer.unobserve(target);\n  }\n\n  /**\n   * Disconnects the observer. This is done automatically when the host\n   * disconnects.\n   */\n  protected disconnect() {\n    this._observer.disconnect();\n  }\n}\n", "/*\nCopyright 2024 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { css } from '@spectrum-web-components/base';\nconst styles = css`\n    :host{--spectrum-alert-dialog-min-width:var(--spectrum-alert-dialog-minimum-width);--spectrum-alert-dialog-max-width:var(--spectrum-alert-dialog-maximum-width);--spectrum-alert-dialog-icon-size:var(--spectrum-workflow-icon-size-100);--spectrum-alert-dialog-warning-icon-color:var(--spectrum-notice-visual-color);--spectrum-alert-dialog-error-icon-color:var(--spectrum-negative-visual-color);--spectrum-alert-dialog-title-font-family:var(--spectrum-sans-font-family-stack);--spectrum-alert-dialog-title-font-weight:var(--spectrum-heading-sans-serif-font-weight);--spectrum-alert-dialog-title-font-style:var(--spectrum-heading-sans-serif-font-style);--spectrum-alert-dialog-title-font-size:var(--spectrum-alert-dialog-title-size);--spectrum-alert-dialog-title-line-height:var(--spectrum-heading-line-height);--spectrum-alert-dialog-title-color:var(--spectrum-heading-color);--spectrum-alert-dialog-body-font-family:var(--spectrum-sans-font-family-stack);--spectrum-alert-dialog-body-font-weight:var(--spectrum-body-sans-serif-font-weight);--spectrum-alert-dialog-body-font-style:var(--spectrum-body-sans-serif-font-style);--spectrum-alert-dialog-body-font-size:var(--spectrum-alert-dialog-description-size);--spectrum-alert-dialog-body-line-height:var(--spectrum-line-height-100);--spectrum-alert-dialog-body-color:var(--spectrum-body-color);--spectrum-alert-dialog-title-to-divider:var(--spectrum-spacing-200);--spectrum-alert-dialog-divider-to-description:var(--spectrum-spacing-300);--spectrum-alert-dialog-title-to-icon:var(--spectrum-spacing-300);--mod-buttongroup-justify-content:flex-end;box-sizing:border-box;inline-size:-moz-fit-content;inline-size:fit-content;min-inline-size:var(--mod-alert-dialog-min-width,var(--spectrum-alert-dialog-min-width));max-inline-size:var(--mod-alert-dialog-max-width,var(--spectrum-alert-dialog-max-width));max-block-size:inherit;padding:var(--mod-alert-dialog-padding,var(--spectrum-alert-dialog-padding));outline:none;display:flex}.icon{inline-size:var(--mod-alert-dialog-icon-size,var(--spectrum-alert-dialog-icon-size));block-size:var(--mod-alert-dialog-icon-size,var(--spectrum-alert-dialog-icon-size));flex-shrink:0;margin-inline-start:var(--mod-alert-dialog-title-to-icon,var(--spectrum-alert-dialog-title-to-icon))}:host([variant=warning]){--mod-icon-color:var(--mod-alert-dialog-warning-icon-color,var(--spectrum-alert-dialog-warning-icon-color))}:host([variant=error]){--mod-icon-color:var(--mod-alert-dialog-error-icon-color,var(--spectrum-alert-dialog-error-icon-color))}.grid{display:grid}.header{justify-content:space-between;align-items:baseline;display:flex}::slotted([slot=heading]){font-family:var(--mod-alert-dialog-title-font-family,var(--spectrum-alert-dialog-title-font-family));font-weight:var(--mod-alert-dialog-title-font-weight,var(--spectrum-alert-dialog-title-font-weight));font-style:var(--mod-alert-dialog-title-font-style,var(--spectrum-alert-dialog-title-font-style));font-size:var(--mod-alert-dialog-title-font-size,var(--spectrum-alert-dialog-title-font-size));line-height:var(--mod-alert-dialog-title-line-height,var(--spectrum-alert-dialog-title-line-height));color:var(--mod-alert-dialog-title-color,var(--spectrum-alert-dialog-title-color));margin:0;margin-block-end:var(--mod-alert-dialog-title-to-divider,var(--spectrum-alert-dialog-title-to-divider))}.content{font-family:var(--mod-alert-dialog-body-font-family,var(--spectrum-alert-dialog-body-font-family));font-weight:var(--mod-alert-dialog-body-font-weight,var(--spectrum-alert-dialog-body-font-weight));font-style:var(--mod-alert-dialog-body-font-style,var(--spectrum-alert-dialog-body-font-style));font-size:var(--mod-alert-dialog-body-font-size,var(--spectrum-alert-dialog-body-font-size));line-height:var(--mod-alert-dialog-body-line-height,var(--spectrum-alert-dialog-body-line-height));color:var(--mod-alert-dialog-body-color,var(--spectrum-alert-dialog-body-color));-webkit-overflow-scrolling:touch;margin:0;margin-block-start:var(--mod-alert-dialog-divider-to-description,var(--spectrum-alert-dialog-divider-to-description));margin-block-end:var(--mod-alert-dialog-description-to-buttons,var(--spectrum-alert-dialog-description-to-buttons));overflow-y:auto}@media (forced-colors:active){:host{border:solid}}\n`;\nexport default styles;", "/*\nCopyright 2023 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { AlertDialog } from './src/AlertDialog.js';\n\nimport { defineElement } from '@spectrum-web-components/base/src/define-element.js';\ndefineElement('sp-alert-dialog', AlertDialog);\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'sp-alert-dialog': AlertDialog;\n    }\n}\n"],
  "mappings": "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",
  "names": ["html", "SpectrumElement", "property", "query", "FocusVisiblePolyfillMixin", "randomID", "conditionAttributeWithId", "ResizeController", "host", "target", "config", "callback", "skipInitial", "this", "_targets", "Set", "_skipInitial", "_unobservedUpdate", "_host", "add", "_config", "window", "ResizeObserver", "_observer", "entries", "handleChanges", "requestUpdate", "addController", "console", "warn", "value", "hostConnected", "observe", "hostDisconnected", "disconnect", "hostUpdated", "delete", "unobserve", "css", "styles", "gatherAppliedIdsFromSlottedChildren", "slot", "idBase", "assignedElements", "ids", "el", "id", "randomID", "_AlertDialog", "FocusVisiblePolyfillMixin", "SpectrumElement", "ResizeController", "offsetHeight", "scrollHeight", "alertStyles", "variant", "oldValue", "html", "target", "conditionAttributeWithId", "idProvided", "conditionDescribedby", "__decorateClass", "query", "property", "defineElement", "AlertDialog"]
}
