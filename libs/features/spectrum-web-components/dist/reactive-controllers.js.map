{
  "version": 3,
  "sources": ["../node_modules/@spectrum-web-components/reactive-controllers/src/MatchMedia.ts", "../node_modules/@spectrum-web-components/reactive-controllers/src/FocusGroup.ts", "../node_modules/@spectrum-web-components/reactive-controllers/src/RovingTabindex.ts", "../node_modules/@spectrum-web-components/reactive-controllers/src/ElementResolution.ts", "../node_modules/@spectrum-web-components/reactive-controllers/src/DependencyManger.ts"],
  "sourcesContent": ["/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport type { ReactiveController, ReactiveElement } from 'lit';\n\nexport const DARK_MODE = '(prefers-color-scheme: dark)';\nexport const IS_MOBILE =\n    '(max-width: 700px) and (hover: none) and (pointer: coarse), (max-height: 700px) and (hover: none) and (pointer: coarse)';\n\nexport class MatchMediaController implements ReactiveController {\n    key = Symbol('match-media-key');\n\n    matches = false;\n\n    protected host: ReactiveElement;\n\n    protected media: MediaQueryList;\n\n    constructor(host: ReactiveElement, query: string) {\n        this.host = host;\n        this.host.addController(this);\n        this.media = window.matchMedia(query);\n        this.matches = this.media.matches;\n        this.onChange = this.onChange.bind(this);\n        host.addController(this);\n    }\n\n    public hostConnected(): void {\n        this.media?.addEventListener('change', this.onChange);\n    }\n\n    public hostDisconnected(): void {\n        this.media?.removeEventListener('change', this.onChange);\n    }\n\n    protected onChange(event: MediaQueryListEvent): void {\n        if (this.matches === event.matches) return;\n        this.matches = event.matches;\n        this.host.requestUpdate(this.key, !this.matches);\n    }\n}\n", "/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport type { ReactiveController, ReactiveElement } from 'lit';\n\ntype DirectionTypes = 'horizontal' | 'vertical' | 'both' | 'grid';\nexport type FocusGroupConfig<T> = {\n    focusInIndex?: (_elements: T[]) => number;\n    direction?: DirectionTypes | (() => DirectionTypes);\n    elementEnterAction?: (el: T) => void;\n    elements: () => T[];\n    isFocusableElement?: (el: T) => boolean;\n    listenerScope?: HTMLElement | (() => HTMLElement);\n};\n\nfunction ensureMethod<T, RT>(\n    value: T | RT | undefined,\n    type: string,\n    fallback: T\n): T {\n    if (typeof value === type) {\n        return (() => value) as T;\n    } else if (typeof value === 'function') {\n        return value as T;\n    }\n    return fallback;\n}\n\nexport class FocusGroupController<T extends HTMLElement>\n    implements ReactiveController\n{\n    protected cachedElements?: T[];\n    private mutationObserver: MutationObserver;\n\n    get currentIndex(): number {\n        if (this._currentIndex === -1) {\n            this._currentIndex = this.focusInIndex;\n        }\n        return this._currentIndex - this.offset;\n    }\n\n    set currentIndex(currentIndex) {\n        this._currentIndex = currentIndex + this.offset;\n    }\n\n    private _currentIndex = -1;\n\n    private prevIndex = -1;\n\n    get direction(): DirectionTypes {\n        return this._direction();\n    }\n\n    _direction = (): DirectionTypes => 'both';\n\n    public directionLength = 5;\n\n    elementEnterAction = (_el: T): void => {\n        return;\n    };\n\n    get elements(): T[] {\n        if (!this.cachedElements) {\n            this.cachedElements = this._elements();\n        }\n        return this.cachedElements;\n    }\n\n    private _elements!: () => T[];\n\n    protected set focused(focused: boolean) {\n        /* c8 ignore next 1 */\n        if (focused === this.focused) return;\n        this._focused = focused;\n    }\n\n    protected get focused(): boolean {\n        return this._focused;\n    }\n\n    private _focused = false;\n\n    get focusInElement(): T {\n        return this.elements[this.focusInIndex];\n    }\n\n    get focusInIndex(): number {\n        return this._focusInIndex(this.elements);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _focusInIndex = (_elements: T[]): number => 0;\n\n    host: ReactiveElement;\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isFocusableElement = (_el: T): boolean => true;\n\n    isEventWithinListenerScope(event: Event): boolean {\n        if (this._listenerScope() === this.host) return true;\n        return event.composedPath().includes(this._listenerScope());\n    }\n\n    _listenerScope = (): HTMLElement => this.host;\n\n    // When elements are virtualized, the delta between the first element\n    // and the first rendered element.\n    offset = 0;\n\n    recentlyConnected = false;\n\n    constructor(\n        host: ReactiveElement,\n        {\n            direction,\n            elementEnterAction,\n            elements,\n            focusInIndex,\n            isFocusableElement,\n            listenerScope,\n        }: FocusGroupConfig<T> = { elements: () => [] }\n    ) {\n        this.mutationObserver = new MutationObserver(() => {\n            this.handleItemMutation();\n        });\n        this.host = host;\n        this.host.addController(this);\n        this._elements = elements;\n        this.isFocusableElement = isFocusableElement || this.isFocusableElement;\n        this._direction = ensureMethod<() => DirectionTypes, DirectionTypes>(\n            direction,\n            'string',\n            this._direction\n        );\n        this.elementEnterAction = elementEnterAction || this.elementEnterAction;\n        this._focusInIndex = ensureMethod<(_elements: T[]) => number, number>(\n            focusInIndex,\n            'number',\n            this._focusInIndex\n        );\n        this._listenerScope = ensureMethod<() => HTMLElement, HTMLElement>(\n            listenerScope,\n            'object',\n            this._listenerScope\n        );\n    }\n    /*  In  handleItemMutation() method the first if condition is checking if the element is not focused or if the element's children's length is not decreasing then it means no element has been deleted and we must return.\n        Then we are checking if the deleted element was the focused one before the deletion if so then we need to proceed else we casn return;\n    */\n    handleItemMutation(): void {\n        if (\n            this._currentIndex == -1 ||\n            this.elements.length <= this._elements().length\n        )\n            return;\n        const focusedElement = this.elements[this.currentIndex];\n        this.clearElementCache();\n        if (this.elements.includes(focusedElement)) return;\n        const moveToNextElement = this.currentIndex !== this.elements.length;\n        const diff = moveToNextElement ? 1 : -1;\n        if (moveToNextElement) {\n            this.setCurrentIndexCircularly(-1);\n        }\n        this.setCurrentIndexCircularly(diff);\n        this.focus();\n    }\n\n    update({ elements }: FocusGroupConfig<T> = { elements: () => [] }): void {\n        this.unmanage();\n        this._elements = elements;\n        this.clearElementCache();\n        this.manage();\n    }\n\n    focus(options?: FocusOptions): void {\n        const elements = this.elements;\n        if (!elements.length) return;\n        let focusElement = elements[this.currentIndex];\n        if (!focusElement || !this.isFocusableElement(focusElement)) {\n            this.setCurrentIndexCircularly(1);\n            focusElement = elements[this.currentIndex];\n        }\n        if (focusElement && this.isFocusableElement(focusElement)) {\n            elements[this.prevIndex]?.setAttribute('tabindex', '-1');\n            focusElement.tabIndex = 0;\n            focusElement.focus(options);\n        }\n    }\n\n    clearElementCache(offset = 0): void {\n        this.mutationObserver.disconnect();\n        delete this.cachedElements;\n        this.offset = offset;\n        requestAnimationFrame(() => {\n            this.elements.forEach((element) => {\n                this.mutationObserver.observe(element, {\n                    attributes: true,\n                });\n            });\n        });\n    }\n\n    setCurrentIndexCircularly(diff: number): void {\n        const { length } = this.elements;\n        let steps = length;\n        this.prevIndex = this.currentIndex;\n        // start at a possibly not 0 index\n        let nextIndex = (length + this.currentIndex + diff) % length;\n        while (\n            // don't cycle the elements more than once\n            steps &&\n            this.elements[nextIndex] &&\n            !this.isFocusableElement(this.elements[nextIndex])\n        ) {\n            nextIndex = (length + nextIndex + diff) % length;\n            steps -= 1;\n        }\n        this.currentIndex = nextIndex;\n    }\n\n    hostContainsFocus(): void {\n        this.host.addEventListener('focusout', this.handleFocusout);\n        this.host.addEventListener('keydown', this.handleKeydown);\n        this.focused = true;\n    }\n\n    hostNoLongerContainsFocus(): void {\n        this.host.addEventListener('focusin', this.handleFocusin);\n        this.host.removeEventListener('focusout', this.handleFocusout);\n        this.host.removeEventListener('keydown', this.handleKeydown);\n        this.focused = false;\n    }\n\n    isRelatedTargetOrContainAnElement(event: FocusEvent): boolean {\n        const relatedTarget = event.relatedTarget as null | Element;\n\n        const isRelatedTargetAnElement = this.elements.includes(\n            relatedTarget as T\n        );\n        const isRelatedTargetContainedWithinElements = this.elements.some(\n            (el) => el.contains(relatedTarget)\n        );\n        return !(\n            isRelatedTargetAnElement || isRelatedTargetContainedWithinElements\n        );\n    }\n\n    handleFocusin = (event: FocusEvent): void => {\n        if (!this.isEventWithinListenerScope(event)) return;\n        if (this.isRelatedTargetOrContainAnElement(event)) {\n            this.hostContainsFocus();\n        }\n        const path = event.composedPath() as T[];\n        let targetIndex = -1;\n        path.find((el) => {\n            targetIndex = this.elements.indexOf(el);\n            return targetIndex !== -1;\n        });\n        this.prevIndex = this.currentIndex;\n        this.currentIndex = targetIndex > -1 ? targetIndex : this.currentIndex;\n    };\n\n    handleFocusout = (event: FocusEvent): void => {\n        if (this.isRelatedTargetOrContainAnElement(event)) {\n            this.hostNoLongerContainsFocus();\n        }\n    };\n\n    acceptsEventCode(code: string): boolean {\n        if (code === 'End' || code === 'Home') {\n            return true;\n        }\n        switch (this.direction) {\n            case 'horizontal':\n                return code === 'ArrowLeft' || code === 'ArrowRight';\n            case 'vertical':\n                return code === 'ArrowUp' || code === 'ArrowDown';\n            case 'both':\n            case 'grid':\n                return code.startsWith('Arrow');\n        }\n    }\n\n    handleKeydown = (event: KeyboardEvent): void => {\n        if (!this.acceptsEventCode(event.code) || event.defaultPrevented) {\n            return;\n        }\n        let diff = 0;\n        this.prevIndex = this.currentIndex;\n        switch (event.code) {\n            case 'ArrowRight':\n                diff += 1;\n                break;\n            case 'ArrowDown':\n                diff += this.direction === 'grid' ? this.directionLength : 1;\n                break;\n            case 'ArrowLeft':\n                diff -= 1;\n                break;\n            case 'ArrowUp':\n                diff -= this.direction === 'grid' ? this.directionLength : 1;\n                break;\n            case 'End':\n                this.currentIndex = 0;\n                diff -= 1;\n                break;\n            case 'Home':\n                this.currentIndex = this.elements.length - 1;\n                diff += 1;\n                break;\n        }\n        event.preventDefault();\n        if (this.direction === 'grid' && this.currentIndex + diff < 0) {\n            this.currentIndex = 0;\n        } else if (\n            this.direction === 'grid' &&\n            this.currentIndex + diff > this.elements.length - 1\n        ) {\n            this.currentIndex = this.elements.length - 1;\n        } else {\n            this.setCurrentIndexCircularly(diff);\n        }\n        // To allow the `focusInIndex` to be calculated with the \"after\" state of the keyboard interaction\n        // do `elementEnterAction` _before_ focusing the next element.\n        this.elementEnterAction(this.elements[this.currentIndex]);\n        this.focus();\n    };\n\n    manage(): void {\n        this.addEventListeners();\n    }\n\n    unmanage(): void {\n        this.removeEventListeners();\n    }\n\n    addEventListeners(): void {\n        this.host.addEventListener('focusin', this.handleFocusin);\n    }\n\n    removeEventListeners(): void {\n        this.host.removeEventListener('focusin', this.handleFocusin);\n        this.host.removeEventListener('focusout', this.handleFocusout);\n        this.host.removeEventListener('keydown', this.handleKeydown);\n    }\n\n    hostConnected(): void {\n        this.recentlyConnected = true;\n        this.addEventListeners();\n    }\n\n    hostDisconnected(): void {\n        this.mutationObserver.disconnect();\n        this.removeEventListeners();\n    }\n\n    hostUpdated(): void {\n        if (this.recentlyConnected) {\n            this.recentlyConnected = false;\n            this.elements.forEach((element) => {\n                this.mutationObserver.observe(element, {\n                    attributes: true,\n                });\n            });\n        }\n    }\n}\n", "/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { FocusGroupConfig, FocusGroupController } from './FocusGroup.js';\n\nexport type RovingTabindexConfig<T> = FocusGroupConfig<T>;\ninterface UpdateTabIndexes {\n    tabIndex: number;\n    removeTabIndex?: boolean;\n}\n\nexport class RovingTabindexController<\n    T extends HTMLElement,\n> extends FocusGroupController<T> {\n    protected override set focused(focused: boolean) {\n        if (focused === this.focused) return;\n        super.focused = focused;\n        this.manageTabindexes();\n    }\n\n    protected override get focused(): boolean {\n        return super.focused;\n    }\n\n    private managed = true;\n\n    private manageIndexesAnimationFrame = 0;\n\n    override clearElementCache(offset = 0): void {\n        cancelAnimationFrame(this.manageIndexesAnimationFrame);\n        super.clearElementCache(offset);\n        if (!this.managed) return;\n\n        this.manageIndexesAnimationFrame = requestAnimationFrame(() =>\n            this.manageTabindexes()\n        );\n    }\n\n    manageTabindexes(): void {\n        if (this.focused) {\n            this.updateTabindexes(() => ({ tabIndex: -1 }));\n        } else {\n            this.updateTabindexes((el: HTMLElement): UpdateTabIndexes => {\n                return {\n                    removeTabIndex:\n                        el.contains(this.focusInElement) &&\n                        el !== this.focusInElement,\n                    tabIndex: el === this.focusInElement ? 0 : -1,\n                };\n            });\n        }\n    }\n\n    updateTabindexes(getTabIndex: (el: HTMLElement) => UpdateTabIndexes): void {\n        this.elements.forEach((el) => {\n            const { tabIndex, removeTabIndex } = getTabIndex(el);\n            if (!removeTabIndex) {\n                el.tabIndex = tabIndex;\n                return;\n            }\n            el.removeAttribute('tabindex');\n            const updatable = el as unknown as {\n                requestUpdate?: () => void;\n            };\n            if (updatable.requestUpdate) updatable.requestUpdate();\n        });\n    }\n\n    override manage(): void {\n        this.managed = true;\n        this.manageTabindexes();\n        super.manage();\n    }\n\n    override unmanage(): void {\n        this.managed = false;\n        this.updateTabindexes(() => ({ tabIndex: 0 }));\n        super.unmanage();\n    }\n\n    override hostUpdated(): void {\n        super.hostUpdated();\n        if (!this.host.hasUpdated) {\n            this.manageTabindexes();\n        }\n    }\n}\n", "/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport type { ReactiveController, ReactiveElement } from 'lit';\nexport const elementResolverUpdatedSymbol = Symbol('element resolver updated');\n\nexport class ElementResolutionController implements ReactiveController {\n    get element(): HTMLElement | null {\n        return this._element;\n    }\n\n    set element(element: HTMLElement | null) {\n        if (element === this.element) return;\n        const previous = this.element;\n        this._element = element;\n        // requestUpdate leveraging the exported Symbol() so that the\n        // changes can be easily tracked in the host element.\n        this.host.requestUpdate(elementResolverUpdatedSymbol, previous);\n    }\n\n    private _element: HTMLElement | null = null;\n\n    private host!: ReactiveElement;\n\n    private observer!: MutationObserver;\n\n    get selector(): string {\n        return this._selector;\n    }\n\n    set selector(selector: string) {\n        if (selector === this.selector) return;\n        this.releaseElement();\n        this._selector = selector;\n        this.resolveElement();\n    }\n\n    private _selector = '';\n\n    get selectorAsId(): string {\n        return this.selector.slice(1);\n    }\n\n    get selectorIsId(): boolean {\n        return !!this.selector && this.selector.startsWith('#');\n    }\n\n    constructor(\n        host: ReactiveElement,\n        { selector }: { selector: string } = { selector: '' }\n    ) {\n        this.host = host;\n        this.selector = selector;\n        this.observer = new MutationObserver(this.mutationCallback);\n        // Add the controller after the MutationObserver has been created in preparation\n        // for the `hostConnected`/`hostDisconnected` callbacks to be run.\n        this.host.addController(this);\n    }\n\n    protected mutationCallback: MutationCallback = (mutationList) => {\n        let needsResolution = false;\n        mutationList.forEach((mutation) => {\n            if (needsResolution) return;\n            if (mutation.type === 'childList') {\n                const currentElementRemoved =\n                    this.element &&\n                    [...mutation.removedNodes].includes(this.element);\n                const matchingElementAdded =\n                    !!this.selector &&\n                    ([...mutation.addedNodes] as HTMLElement[]).some(\n                        this.elementIsSelected\n                    );\n                needsResolution =\n                    needsResolution ||\n                    currentElementRemoved ||\n                    matchingElementAdded;\n            }\n            if (mutation.type === 'attributes') {\n                const attributeChangedOnCurrentElement =\n                    mutation.target === this.element;\n                const attributeChangedOnMatchingElement =\n                    !!this.selector &&\n                    this.elementIsSelected(mutation.target as HTMLElement);\n                needsResolution =\n                    needsResolution ||\n                    attributeChangedOnCurrentElement ||\n                    attributeChangedOnMatchingElement;\n            }\n        });\n        if (needsResolution) {\n            this.resolveElement();\n        }\n    };\n\n    public hostConnected(): void {\n        this.resolveElement();\n        this.observer.observe(this.host.getRootNode(), {\n            subtree: true,\n            childList: true,\n            attributes: true,\n        });\n    }\n\n    public hostDisconnected(): void {\n        this.releaseElement();\n        this.observer.disconnect();\n    }\n\n    private resolveElement(): void {\n        if (!this.selector) {\n            this.releaseElement();\n            return;\n        }\n\n        const parent = this.host.getRootNode() as ShadowRoot;\n        this.element = this.selectorIsId\n            ? (parent.getElementById(this.selectorAsId) as HTMLElement)\n            : (parent.querySelector(this.selector) as HTMLElement);\n    }\n\n    private releaseElement(): void {\n        this.element = null;\n    }\n\n    private elementIsSelected = (el: HTMLElement): boolean => {\n        return this.selectorIsId\n            ? el?.id === this.selectorAsId\n            : el?.matches?.(this.selector);\n    };\n}\n", "/*\nCopyright 2022 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport type { ReactiveElement } from 'lit';\nexport const dependencyManagerLoadedSymbol = Symbol(\n    'dependency manager loaded'\n);\n\n/**\n * Manage the availability of custom element dependencies of a host element\n * to gate render and functional behavior before and after their presence\n */\nexport class DependencyManagerController {\n    private dependencies: Record<string, boolean> = {};\n\n    private host!: ReactiveElement;\n\n    /**\n     * Whether all of the provided dependencies have been registered.\n     * This will be `false` when no dependencies have been listed for management.\n     * Changes to this value will trigger `requestUpdate()` on the host.\n     */\n    public get loaded(): boolean {\n        return this._loaded;\n    }\n\n    private set loaded(loaded: boolean) {\n        if (loaded === this.loaded) return;\n        this._loaded = loaded;\n        this.host.requestUpdate(dependencyManagerLoadedSymbol, !this.loaded);\n    }\n\n    private _loaded = false;\n\n    constructor(host: ReactiveElement) {\n        this.host = host;\n    }\n\n    /**\n     * Submit a custom element tag name to be managed as a dependency.\n     *\n     * @param dependency {string} - the custom element tag to manage\n     * @param alreadyLoaded {boolean} - force the managemented custom element to be listed as loaded\n     */\n    public add(dependency: string, alreadyLoaded?: boolean): void {\n        const loaded =\n            !!alreadyLoaded ||\n            !!customElements.get(dependency) ||\n            this.dependencies[dependency];\n        if (!loaded) {\n            customElements.whenDefined(dependency).then(() => {\n                this.add(dependency, true);\n            });\n        }\n        this.dependencies = {\n            ...this.dependencies,\n            [dependency]: loaded,\n        };\n        // Update the loaded property based on the new loaded state of all dependencies\n        this.loaded = Object.values(this.dependencies).every(\n            (loaded) => loaded\n        );\n    }\n}\n"],
  "mappings": "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",
  "names": ["host", "query", "_a", "event", "ensureMethod", "value", "type", "fallback", "host", "direction", "elementEnterAction", "elements", "focusInIndex", "isFocusableElement", "listenerScope", "_el", "_elements", "event", "path", "targetIndex", "el", "diff", "currentIndex", "focused", "focusedElement", "moveToNextElement", "options", "_a", "focusElement", "offset", "element", "length", "steps", "nextIndex", "relatedTarget", "isRelatedTargetAnElement", "isRelatedTargetContainedWithinElements", "code", "FocusGroupController", "focused", "offset", "el", "getTabIndex", "tabIndex", "removeTabIndex", "updatable", "host", "selector", "mutationList", "needsResolution", "mutation", "currentElementRemoved", "matchingElementAdded", "attributeChangedOnCurrentElement", "attributeChangedOnMatchingElement", "el", "_a", "element", "previous", "parent", "host", "loaded", "dependency", "alreadyLoaded"]
}
